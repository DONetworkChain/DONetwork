// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PrintMsgReq::PrintMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrintMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrintMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrintMsgReqDefaultTypeInternal() {}
  union {
    PrintMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrintMsgReqDefaultTypeInternal _PrintMsgReq_default_instance_;
PROTOBUF_CONSTEXPR NodeInfo::NodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listen_ip_)*/0u
  , /*decltype(_impl_.listen_port_)*/0u
  , /*decltype(_impl_.public_ip_)*/0u
  , /*decltype(_impl_.public_port_)*/0u
  , /*decltype(_impl_.time_stamp_)*/uint64_t{0u}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeInfoDefaultTypeInternal() {}
  union {
    NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeReq::RegisterNodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mynode_)*/nullptr
  , /*decltype(_impl_.is_get_nodelist_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeReqDefaultTypeInternal() {}
  union {
    RegisterNodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeReqDefaultTypeInternal _RegisterNodeReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeAck::RegisterNodeAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_ip_)*/0u
  , /*decltype(_impl_.from_port_)*/0u
  , /*decltype(_impl_.fd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeAckDefaultTypeInternal() {}
  union {
    RegisterNodeAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeAckDefaultTypeInternal _RegisterNodeAck_default_instance_;
PROTOBUF_CONSTEXPR SyncNodeReq::SyncNodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncNodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncNodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncNodeReqDefaultTypeInternal() {}
  union {
    SyncNodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncNodeReqDefaultTypeInternal _SyncNodeReq_default_instance_;
PROTOBUF_CONSTEXPR SyncNodeAck::SyncNodeAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.ids_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncNodeAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncNodeAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncNodeAckDefaultTypeInternal() {}
  union {
    SyncNodeAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncNodeAckDefaultTypeInternal _SyncNodeAck_default_instance_;
PROTOBUF_CONSTEXPR BroadcastMsgReq::BroadcastMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastMsgReqDefaultTypeInternal() {}
  union {
    BroadcastMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastMsgReqDefaultTypeInternal _BroadcastMsgReq_default_instance_;
PROTOBUF_CONSTEXPR PingReq::PingReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingReqDefaultTypeInternal() {}
  union {
    PingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingReqDefaultTypeInternal _PingReq_default_instance_;
PROTOBUF_CONSTEXPR PongReq::PongReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PongReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PongReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PongReqDefaultTypeInternal() {}
  union {
    PongReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PongReqDefaultTypeInternal _PongReq_default_instance_;
PROTOBUF_CONSTEXPR EchoReq::EchoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EchoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoReqDefaultTypeInternal() {}
  union {
    EchoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoReqDefaultTypeInternal _EchoReq_default_instance_;
PROTOBUF_CONSTEXPR EchoAck::EchoAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EchoAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoAckDefaultTypeInternal() {}
  union {
    EchoAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoAckDefaultTypeInternal _EchoAck_default_instance_;
PROTOBUF_CONSTEXPR NodeHeightChangedReq::NodeHeightChangedReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/nullptr
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeHeightChangedReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeHeightChangedReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeHeightChangedReqDefaultTypeInternal() {}
  union {
    NodeHeightChangedReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeHeightChangedReqDefaultTypeInternal _NodeHeightChangedReq_default_instance_;
PROTOBUF_CONSTEXPR NodeSign::NodeSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeSignDefaultTypeInternal() {}
  union {
    NodeSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeSignDefaultTypeInternal _NodeSign_default_instance_;
PROTOBUF_CONSTEXPR NodeAddrChangedReq::NodeAddrChangedReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldsign_)*/nullptr
  , /*decltype(_impl_.newsign_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeAddrChangedReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeAddrChangedReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeAddrChangedReqDefaultTypeInternal() {}
  union {
    NodeAddrChangedReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeAddrChangedReqDefaultTypeInternal _NodeAddrChangedReq_default_instance_;
PROTOBUF_CONSTEXPR TestNetAck::TestNetAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestNetAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNetAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNetAckDefaultTypeInternal() {}
  union {
    TestNetAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNetAckDefaultTypeInternal _TestNetAck_default_instance_;
PROTOBUF_CONSTEXPR TestNetReq::TestNetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestNetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNetReqDefaultTypeInternal() {}
  union {
    TestNetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNetReqDefaultTypeInternal _TestNetReq_default_instance_;
static ::_pb::Metadata file_level_metadata_net_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_net_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const uint32_t TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PrintMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PrintMsgReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::PrintMsgReq, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.pub_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.public_addr_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.listen_ip_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.listen_port_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.public_ip_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.public_port_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::NodeInfo, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReq, _impl_.mynode_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReq, _impl_.is_get_nodelist_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReq, _impl_.msg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeAck, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeAck, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeAck, _impl_.from_ip_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeAck, _impl_.from_port_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeAck, _impl_.fd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncNodeReq, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::SyncNodeReq, _impl_.msg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncNodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncNodeAck, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::SyncNodeAck, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::SyncNodeAck, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::SyncNodeAck, _impl_.msg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BroadcastMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BroadcastMsgReq, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::BroadcastMsgReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::BroadcastMsgReq, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PingReq, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PongReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PongReq, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EchoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EchoReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::EchoReq, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EchoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EchoAck, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::EchoAck, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeHeightChangedReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NodeHeightChangedReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::NodeHeightChangedReq, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::NodeHeightChangedReq, _impl_.sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NodeSign, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::NodeSign, _impl_.pub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeAddrChangedReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NodeAddrChangedReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::NodeAddrChangedReq, _impl_.oldsign_),
  PROTOBUF_FIELD_OFFSET(::NodeAddrChangedReq, _impl_.newsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestNetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestNetAck, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::TestNetAck, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::TestNetAck, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::TestNetAck, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestNetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestNetReq, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::TestNetReq, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::TestNetReq, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::TestNetReq, _impl_.id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PrintMsgReq)},
  { 8, -1, -1, sizeof(::NodeInfo)},
  { 28, -1, -1, sizeof(::RegisterNodeReq)},
  { 37, -1, -1, sizeof(::RegisterNodeAck)},
  { 48, -1, -1, sizeof(::SyncNodeReq)},
  { 56, -1, -1, sizeof(::SyncNodeAck)},
  { 66, -1, -1, sizeof(::BroadcastMsgReq)},
  { 75, -1, -1, sizeof(::PingReq)},
  { 82, -1, -1, sizeof(::PongReq)},
  { 89, -1, -1, sizeof(::EchoReq)},
  { 97, -1, -1, sizeof(::EchoAck)},
  { 105, -1, -1, sizeof(::NodeHeightChangedReq)},
  { 114, -1, -1, sizeof(::NodeSign)},
  { 122, -1, -1, sizeof(::NodeAddrChangedReq)},
  { 131, -1, -1, sizeof(::TestNetAck)},
  { 141, -1, -1, sizeof(::TestNetReq)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PrintMsgReq_default_instance_._instance,
  &::_NodeInfo_default_instance_._instance,
  &::_RegisterNodeReq_default_instance_._instance,
  &::_RegisterNodeAck_default_instance_._instance,
  &::_SyncNodeReq_default_instance_._instance,
  &::_SyncNodeAck_default_instance_._instance,
  &::_BroadcastMsgReq_default_instance_._instance,
  &::_PingReq_default_instance_._instance,
  &::_PongReq_default_instance_._instance,
  &::_EchoReq_default_instance_._instance,
  &::_EchoAck_default_instance_._instance,
  &::_NodeHeightChangedReq_default_instance_._instance,
  &::_NodeSign_default_instance_._instance,
  &::_NodeAddrChangedReq_default_instance_._instance,
  &::_TestNetAck_default_instance_._instance,
  &::_TestNetReq_default_instance_._instance,
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\032\nsign.proto\")\n\013PrintMsgReq\022\014"
  "\n\004data\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\"\373\001\n\010NodeInfo\022"
  "\013\n\003pub\030\001 \001(\014\022\014\n\004sign\030\002 \001(\014\022\020\n\010identity\030\003"
  " \001(\014\022\014\n\004addr\030\004 \001(\t\022\023\n\013public_addr\030\005 \001(\t\022"
  "\014\n\004name\030\006 \001(\t\022\014\n\004logo\030\007 \001(\t\022\021\n\tlisten_ip"
  "\030\010 \001(\r\022\023\n\013listen_port\030\t \001(\r\022\021\n\tpublic_ip"
  "\030\n \001(\r\022\023\n\013public_port\030\013 \001(\r\022\016\n\006height\030\014 "
  "\001(\r\022\022\n\ntime_stamp\030\r \001(\004\022\017\n\007version\030\016 \001(\t"
  "\"U\n\017RegisterNodeReq\022\031\n\006mynode\030\001 \001(\0132\t.No"
  "deInfo\022\027\n\017is_get_nodelist\030\002 \001(\010\022\016\n\006msg_i"
  "d\030\003 \001(\t\"k\n\017RegisterNodeAck\022\030\n\005nodes\030\001 \003("
  "\0132\t.NodeInfo\022\016\n\006msg_id\030\002 \001(\t\022\017\n\007from_ip\030"
  "\003 \001(\r\022\021\n\tfrom_port\030\004 \001(\r\022\n\n\002fd\030\005 \001(\r\"*\n\013"
  "SyncNodeReq\022\013\n\003ids\030\001 \001(\t\022\016\n\006msg_id\030\003 \001(\t"
  "\"Z\n\013SyncNodeAck\022\030\n\005nodes\030\001 \003(\0132\t.NodeInf"
  "o\022\024\n\004sign\030\002 \001(\0132\006.CSign\022\013\n\003ids\030\003 \001(\t\022\016\n\006"
  "msg_id\030\004 \001(\t\"J\n\017BroadcastMsgReq\022\027\n\004from\030"
  "\001 \001(\0132\t.NodeInfo\022\014\n\004data\030\002 \001(\014\022\020\n\010priori"
  "ty\030\003 \001(\r\"\025\n\007PingReq\022\n\n\002id\030\001 \001(\t\"\025\n\007PongR"
  "eq\022\n\n\002id\030\001 \001(\t\"&\n\007EchoReq\022\n\n\002id\030\001 \001(\t\022\017\n"
  "\007message\030\002 \001(\t\"&\n\007EchoAck\022\n\n\002id\030\001 \001(\t\022\017\n"
  "\007message\030\002 \001(\t\"H\n\024NodeHeightChangedReq\022\n"
  "\n\002id\030\001 \001(\t\022\016\n\006height\030\002 \001(\r\022\024\n\004sign\030\003 \001(\013"
  "2\006.CSign\"%\n\010NodeSign\022\014\n\004sign\030\001 \001(\014\022\013\n\003pu"
  "b\030\002 \001(\014\"]\n\022NodeAddrChangedReq\022\017\n\007version"
  "\030\001 \001(\t\022\032\n\007oldSign\030\002 \001(\0132\t.NodeSign\022\032\n\007ne"
  "wSign\030\003 \001(\0132\t.NodeSign\"B\n\nTestNetAck\022\014\n\004"
  "data\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t\022\014\n\004time\030\003 \001(\004\022\n"
  "\n\002id\030\004 \001(\t\"B\n\nTestNetReq\022\014\n\004data\030\001 \001(\t\022\014"
  "\n\004hash\030\002 \001(\t\022\014\n\004time\030\003 \001(\004\022\n\n\002id\030\004 \001(\tb\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_net_2eproto_deps[1] = {
  &::descriptor_table_sign_2eproto,
};
static ::_pbi::once_flag descriptor_table_net_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2eproto = {
    false, false, 1206, descriptor_table_protodef_net_2eproto,
    "net.proto",
    &descriptor_table_net_2eproto_once, descriptor_table_net_2eproto_deps, 1, 16,
    schemas, file_default_instances, TableStruct_net_2eproto::offsets,
    file_level_metadata_net_2eproto, file_level_enum_descriptors_net_2eproto,
    file_level_service_descriptors_net_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);

// ===================================================================

class PrintMsgReq::_Internal {
 public:
};

PrintMsgReq::PrintMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PrintMsgReq)
}
PrintMsgReq::PrintMsgReq(const PrintMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrintMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:PrintMsgReq)
}

inline void PrintMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrintMsgReq::~PrintMsgReq() {
  // @@protoc_insertion_point(destructor:PrintMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrintMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void PrintMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrintMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PrintMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrintMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PrintMsgReq.data"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrintMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrintMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PrintMsgReq.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrintMsgReq)
  return target;
}

size_t PrintMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrintMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrintMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrintMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrintMsgReq::GetClassData() const { return &_class_data_; }


void PrintMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrintMsgReq*>(&to_msg);
  auto& from = static_cast<const PrintMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PrintMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrintMsgReq::CopyFrom(const PrintMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrintMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintMsgReq::IsInitialized() const {
  return true;
}

void PrintMsgReq::InternalSwap(PrintMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrintMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}

// ===================================================================

class NodeInfo::_Internal {
 public:
};

NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.public_addr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.listen_ip_){}
    , decltype(_impl_.listen_port_){}
    , decltype(_impl_.public_ip_){}
    , decltype(_impl_.public_port_){}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub().empty()) {
    _this->_impl_.pub_.Set(from._internal_pub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_addr().empty()) {
    _this->_impl_.public_addr_.Set(from._internal_public_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.listen_ip_, &from._impl_.listen_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.listen_ip_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:NodeInfo)
}

inline void NodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.public_addr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.listen_ip_){0u}
    , decltype(_impl_.listen_port_){0u}
    , decltype(_impl_.public_ip_){0u}
    , decltype(_impl_.public_port_){0u}
    , decltype(_impl_.time_stamp_){uint64_t{0u}}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:NodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pub_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.addr_.Destroy();
  _impl_.public_addr_.Destroy();
  _impl_.name_.Destroy();
  _impl_.logo_.Destroy();
  _impl_.version_.Destroy();
}

void NodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pub_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  _impl_.public_addr_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  ::memset(&_impl_.listen_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.listen_ip_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeInfo.addr"));
        } else
          goto handle_unusual;
        continue;
      // string public_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_public_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeInfo.public_addr"));
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeInfo.logo"));
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.listen_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 public_ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 public_port = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time_stamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeInfo.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub = 1;
  if (!this->_internal_pub().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pub(), target);
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sign(), target);
  }

  // bytes identity = 3;
  if (!this->_internal_identity().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_identity(), target);
  }

  // string addr = 4;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeInfo.addr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_addr(), target);
  }

  // string public_addr = 5;
  if (!this->_internal_public_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_addr().data(), static_cast<int>(this->_internal_public_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeInfo.public_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_public_addr(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeInfo.logo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logo(), target);
  }

  // uint32 listen_ip = 8;
  if (this->_internal_listen_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_listen_ip(), target);
  }

  // uint32 listen_port = 9;
  if (this->_internal_listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_listen_port(), target);
  }

  // uint32 public_ip = 10;
  if (this->_internal_public_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_public_ip(), target);
  }

  // uint32 public_port = 11;
  if (this->_internal_public_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_public_port(), target);
  }

  // uint32 height = 12;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_height(), target);
  }

  // uint64 time_stamp = 13;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_time_stamp(), target);
  }

  // string version = 14;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeInfo.version");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pub = 1;
  if (!this->_internal_pub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes identity = 3;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_identity());
  }

  // string addr = 4;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string public_addr = 5;
  if (!this->_internal_public_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_addr());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // string version = 14;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint32 listen_ip = 8;
  if (this->_internal_listen_ip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_ip());
  }

  // uint32 listen_port = 9;
  if (this->_internal_listen_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_port());
  }

  // uint32 public_ip = 10;
  if (this->_internal_public_ip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_public_ip());
  }

  // uint32 public_port = 11;
  if (this->_internal_public_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_public_port());
  }

  // uint64 time_stamp = 13;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
  }

  // uint32 height = 12;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo::GetClassData() const { return &_class_data_; }


void NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeInfo*>(&to_msg);
  auto& from = static_cast<const NodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub().empty()) {
    _this->_internal_set_pub(from._internal_pub());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (!from._internal_public_addr().empty()) {
    _this->_internal_set_public_addr(from._internal_public_addr());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_listen_ip() != 0) {
    _this->_internal_set_listen_ip(from._internal_listen_ip());
  }
  if (from._internal_listen_port() != 0) {
    _this->_internal_set_listen_port(from._internal_listen_port());
  }
  if (from._internal_public_ip() != 0) {
    _this->_internal_set_public_ip(from._internal_public_ip());
  }
  if (from._internal_public_port() != 0) {
    _this->_internal_set_public_port(from._internal_public_port());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pub_, lhs_arena,
      &other->_impl_.pub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_addr_, lhs_arena,
      &other->_impl_.public_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_, lhs_arena,
      &other->_impl_.logo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, _impl_.height_)
      + sizeof(NodeInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, _impl_.listen_ip_)>(
          reinterpret_cast<char*>(&_impl_.listen_ip_),
          reinterpret_cast<char*>(&other->_impl_.listen_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[1]);
}

// ===================================================================

class RegisterNodeReq::_Internal {
 public:
  static const ::NodeInfo& mynode(const RegisterNodeReq* msg);
};

const ::NodeInfo&
RegisterNodeReq::_Internal::mynode(const RegisterNodeReq* msg) {
  return *msg->_impl_.mynode_;
}
RegisterNodeReq::RegisterNodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterNodeReq)
}
RegisterNodeReq::RegisterNodeReq(const RegisterNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.mynode_){nullptr}
    , decltype(_impl_.is_get_nodelist_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mynode()) {
    _this->_impl_.mynode_ = new ::NodeInfo(*from._impl_.mynode_);
  }
  _this->_impl_.is_get_nodelist_ = from._impl_.is_get_nodelist_;
  // @@protoc_insertion_point(copy_constructor:RegisterNodeReq)
}

inline void RegisterNodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.mynode_){nullptr}
    , decltype(_impl_.is_get_nodelist_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterNodeReq::~RegisterNodeReq() {
  // @@protoc_insertion_point(destructor:RegisterNodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mynode_;
}

void RegisterNodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mynode_ != nullptr) {
    delete _impl_.mynode_;
  }
  _impl_.mynode_ = nullptr;
  _impl_.is_get_nodelist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NodeInfo mynode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mynode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_get_nodelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_get_nodelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RegisterNodeReq.msg_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NodeInfo mynode = 1;
  if (this->_internal_has_mynode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mynode(this),
        _Internal::mynode(this).GetCachedSize(), target, stream);
  }

  // bool is_get_nodelist = 2;
  if (this->_internal_is_get_nodelist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_get_nodelist(), target);
  }

  // string msg_id = 3;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterNodeReq.msg_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeReq)
  return target;
}

size_t RegisterNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_id = 3;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // .NodeInfo mynode = 1;
  if (this->_internal_has_mynode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mynode_);
  }

  // bool is_get_nodelist = 2;
  if (this->_internal_is_get_nodelist() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeReq::GetClassData() const { return &_class_data_; }


void RegisterNodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeReq*>(&to_msg);
  auto& from = static_cast<const RegisterNodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_has_mynode()) {
    _this->_internal_mutable_mynode()->::NodeInfo::MergeFrom(
        from._internal_mynode());
  }
  if (from._internal_is_get_nodelist() != 0) {
    _this->_internal_set_is_get_nodelist(from._internal_is_get_nodelist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeReq::CopyFrom(const RegisterNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeReq::IsInitialized() const {
  return true;
}

void RegisterNodeReq::InternalSwap(RegisterNodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterNodeReq, _impl_.is_get_nodelist_)
      + sizeof(RegisterNodeReq::_impl_.is_get_nodelist_)
      - PROTOBUF_FIELD_OFFSET(RegisterNodeReq, _impl_.mynode_)>(
          reinterpret_cast<char*>(&_impl_.mynode_),
          reinterpret_cast<char*>(&other->_impl_.mynode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[2]);
}

// ===================================================================

class RegisterNodeAck::_Internal {
 public:
};

RegisterNodeAck::RegisterNodeAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterNodeAck)
}
RegisterNodeAck::RegisterNodeAck(const RegisterNodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.from_ip_){}
    , decltype(_impl_.from_port_){}
    , decltype(_impl_.fd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_ip_, &from._impl_.from_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fd_) -
    reinterpret_cast<char*>(&_impl_.from_ip_)) + sizeof(_impl_.fd_));
  // @@protoc_insertion_point(copy_constructor:RegisterNodeAck)
}

inline void RegisterNodeAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.from_ip_){0u}
    , decltype(_impl_.from_port_){0u}
    , decltype(_impl_.fd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterNodeAck::~RegisterNodeAck() {
  // @@protoc_insertion_point(destructor:RegisterNodeAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.msg_id_.Destroy();
}

void RegisterNodeAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.msg_id_.ClearToEmpty();
  ::memset(&_impl_.from_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fd_) -
      reinterpret_cast<char*>(&_impl_.from_ip_)) + sizeof(_impl_.fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RegisterNodeAck.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 from_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.from_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 from_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NodeInfo nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterNodeAck.msg_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_id(), target);
  }

  // uint32 from_ip = 3;
  if (this->_internal_from_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_from_ip(), target);
  }

  // uint32 from_port = 4;
  if (this->_internal_from_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_from_port(), target);
  }

  // uint32 fd = 5;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeAck)
  return target;
}

size_t RegisterNodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NodeInfo nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // uint32 from_ip = 3;
  if (this->_internal_from_ip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_ip());
  }

  // uint32 from_port = 4;
  if (this->_internal_from_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_port());
  }

  // uint32 fd = 5;
  if (this->_internal_fd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeAck::GetClassData() const { return &_class_data_; }


void RegisterNodeAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeAck*>(&to_msg);
  auto& from = static_cast<const RegisterNodeAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_from_ip() != 0) {
    _this->_internal_set_from_ip(from._internal_from_ip());
  }
  if (from._internal_from_port() != 0) {
    _this->_internal_set_from_port(from._internal_from_port());
  }
  if (from._internal_fd() != 0) {
    _this->_internal_set_fd(from._internal_fd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeAck::CopyFrom(const RegisterNodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeAck::IsInitialized() const {
  return true;
}

void RegisterNodeAck::InternalSwap(RegisterNodeAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterNodeAck, _impl_.fd_)
      + sizeof(RegisterNodeAck::_impl_.fd_)
      - PROTOBUF_FIELD_OFFSET(RegisterNodeAck, _impl_.from_ip_)>(
          reinterpret_cast<char*>(&_impl_.from_ip_),
          reinterpret_cast<char*>(&other->_impl_.from_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[3]);
}

// ===================================================================

class SyncNodeReq::_Internal {
 public:
};

SyncNodeReq::SyncNodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SyncNodeReq)
}
SyncNodeReq::SyncNodeReq(const SyncNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncNodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){}
    , decltype(_impl_.msg_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ids_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ids().empty()) {
    _this->_impl_.ids_.Set(from._internal_ids(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncNodeReq)
}

inline void SyncNodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){}
    , decltype(_impl_.msg_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ids_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncNodeReq::~SyncNodeReq() {
  // @@protoc_insertion_point(destructor:SyncNodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncNodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.Destroy();
  _impl_.msg_id_.Destroy();
}

void SyncNodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncNodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.ClearToEmpty();
  _impl_.msg_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncNodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ids();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncNodeReq.ids"));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncNodeReq.msg_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncNodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncNodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ids = 1;
  if (!this->_internal_ids().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ids().data(), static_cast<int>(this->_internal_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncNodeReq.ids");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ids(), target);
  }

  // string msg_id = 3;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncNodeReq.msg_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncNodeReq)
  return target;
}

size_t SyncNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncNodeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ids = 1;
  if (!this->_internal_ids().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ids());
  }

  // string msg_id = 3;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncNodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncNodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncNodeReq::GetClassData() const { return &_class_data_; }


void SyncNodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncNodeReq*>(&to_msg);
  auto& from = static_cast<const SyncNodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SyncNodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ids().empty()) {
    _this->_internal_set_ids(from._internal_ids());
  }
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncNodeReq::CopyFrom(const SyncNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeReq::IsInitialized() const {
  return true;
}

void SyncNodeReq::InternalSwap(SyncNodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ids_, lhs_arena,
      &other->_impl_.ids_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncNodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[4]);
}

// ===================================================================

class SyncNodeAck::_Internal {
 public:
  static const ::CSign& sign(const SyncNodeAck* msg);
};

const ::CSign&
SyncNodeAck::_Internal::sign(const SyncNodeAck* msg) {
  return *msg->_impl_.sign_;
}
void SyncNodeAck::clear_sign() {
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
}
SyncNodeAck::SyncNodeAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SyncNodeAck)
}
SyncNodeAck::SyncNodeAck(const SyncNodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncNodeAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.ids_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.sign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ids_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ids().empty()) {
    _this->_impl_.ids_.Set(from._internal_ids(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sign()) {
    _this->_impl_.sign_ = new ::CSign(*from._impl_.sign_);
  }
  // @@protoc_insertion_point(copy_constructor:SyncNodeAck)
}

inline void SyncNodeAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.ids_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.sign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ids_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncNodeAck::~SyncNodeAck() {
  // @@protoc_insertion_point(destructor:SyncNodeAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncNodeAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.ids_.Destroy();
  _impl_.msg_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sign_;
}

void SyncNodeAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncNodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncNodeAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.ids_.ClearToEmpty();
  _impl_.msg_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncNodeAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .CSign sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ids();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncNodeAck.ids"));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncNodeAck.msg_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncNodeAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncNodeAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NodeInfo nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .CSign sign = 2;
  if (this->_internal_has_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sign(this),
        _Internal::sign(this).GetCachedSize(), target, stream);
  }

  // string ids = 3;
  if (!this->_internal_ids().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ids().data(), static_cast<int>(this->_internal_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncNodeAck.ids");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ids(), target);
  }

  // string msg_id = 4;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncNodeAck.msg_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncNodeAck)
  return target;
}

size_t SyncNodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncNodeAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NodeInfo nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ids = 3;
  if (!this->_internal_ids().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ids());
  }

  // string msg_id = 4;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // .CSign sign = 2;
  if (this->_internal_has_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sign_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncNodeAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncNodeAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncNodeAck::GetClassData() const { return &_class_data_; }


void SyncNodeAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncNodeAck*>(&to_msg);
  auto& from = static_cast<const SyncNodeAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SyncNodeAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (!from._internal_ids().empty()) {
    _this->_internal_set_ids(from._internal_ids());
  }
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_has_sign()) {
    _this->_internal_mutable_sign()->::CSign::MergeFrom(
        from._internal_sign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncNodeAck::CopyFrom(const SyncNodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeAck::IsInitialized() const {
  return true;
}

void SyncNodeAck::InternalSwap(SyncNodeAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ids_, lhs_arena,
      &other->_impl_.ids_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  swap(_impl_.sign_, other->_impl_.sign_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncNodeAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[5]);
}

// ===================================================================

class BroadcastMsgReq::_Internal {
 public:
  static const ::NodeInfo& from(const BroadcastMsgReq* msg);
};

const ::NodeInfo&
BroadcastMsgReq::_Internal::from(const BroadcastMsgReq* msg) {
  return *msg->_impl_.from_;
}
BroadcastMsgReq::BroadcastMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BroadcastMsgReq)
}
BroadcastMsgReq::BroadcastMsgReq(const BroadcastMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::NodeInfo(*from._impl_.from_);
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:BroadcastMsgReq)
}

inline void BroadcastMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.priority_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastMsgReq::~BroadcastMsgReq() {
  // @@protoc_insertion_point(destructor:BroadcastMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
}

void BroadcastMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BroadcastMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  _impl_.priority_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NodeInfo from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BroadcastMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NodeInfo from = 1;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BroadcastMsgReq)
  return target;
}

size_t BroadcastMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BroadcastMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .NodeInfo from = 1;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // uint32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastMsgReq::GetClassData() const { return &_class_data_; }


void BroadcastMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastMsgReq*>(&to_msg);
  auto& from = static_cast<const BroadcastMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BroadcastMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::NodeInfo::MergeFrom(
        from._internal_from());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastMsgReq::CopyFrom(const BroadcastMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BroadcastMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMsgReq::IsInitialized() const {
  return true;
}

void BroadcastMsgReq::InternalSwap(BroadcastMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastMsgReq, _impl_.priority_)
      + sizeof(BroadcastMsgReq::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(BroadcastMsgReq, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[6]);
}

// ===================================================================

class PingReq::_Internal {
 public:
};

PingReq::PingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PingReq)
}
PingReq::PingReq(const PingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PingReq)
}

inline void PingReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingReq::~PingReq() {
  // @@protoc_insertion_point(destructor:PingReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void PingReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PingReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PingReq.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PingReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PingReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PingReq)
  return target;
}

size_t PingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PingReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingReq::GetClassData() const { return &_class_data_; }


void PingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingReq*>(&to_msg);
  auto& from = static_cast<const PingReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PingReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingReq::CopyFrom(const PingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReq::IsInitialized() const {
  return true;
}

void PingReq::InternalSwap(PingReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PingReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[7]);
}

// ===================================================================

class PongReq::_Internal {
 public:
};

PongReq::PongReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PongReq)
}
PongReq::PongReq(const PongReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PongReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PongReq)
}

inline void PongReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PongReq::~PongReq() {
  // @@protoc_insertion_point(destructor:PongReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PongReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void PongReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PongReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PongReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PongReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PongReq.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PongReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PongReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PongReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PongReq)
  return target;
}

size_t PongReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PongReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PongReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PongReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PongReq::GetClassData() const { return &_class_data_; }


void PongReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PongReq*>(&to_msg);
  auto& from = static_cast<const PongReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PongReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PongReq::CopyFrom(const PongReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PongReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongReq::IsInitialized() const {
  return true;
}

void PongReq::InternalSwap(PongReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PongReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[8]);
}

// ===================================================================

class EchoReq::_Internal {
 public:
};

EchoReq::EchoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EchoReq)
}
EchoReq::EchoReq(const EchoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EchoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EchoReq)
}

inline void EchoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoReq::~EchoReq() {
  // @@protoc_insertion_point(destructor:EchoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.message_.Destroy();
}

void EchoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EchoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EchoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EchoReq.id"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EchoReq.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EchoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EchoReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EchoReq.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EchoReq)
  return target;
}

size_t EchoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EchoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EchoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoReq::GetClassData() const { return &_class_data_; }


void EchoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EchoReq*>(&to_msg);
  auto& from = static_cast<const EchoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EchoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoReq::CopyFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EchoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoReq::IsInitialized() const {
  return true;
}

void EchoReq::InternalSwap(EchoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[9]);
}

// ===================================================================

class EchoAck::_Internal {
 public:
};

EchoAck::EchoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EchoAck)
}
EchoAck::EchoAck(const EchoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EchoAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EchoAck)
}

inline void EchoAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoAck::~EchoAck() {
  // @@protoc_insertion_point(destructor:EchoAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.message_.Destroy();
}

void EchoAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EchoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:EchoAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EchoAck.id"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EchoAck.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EchoAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EchoAck.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EchoAck.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EchoAck)
  return target;
}

size_t EchoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EchoAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EchoAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoAck::GetClassData() const { return &_class_data_; }


void EchoAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EchoAck*>(&to_msg);
  auto& from = static_cast<const EchoAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EchoAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoAck::CopyFrom(const EchoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EchoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoAck::IsInitialized() const {
  return true;
}

void EchoAck::InternalSwap(EchoAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[10]);
}

// ===================================================================

class NodeHeightChangedReq::_Internal {
 public:
  static const ::CSign& sign(const NodeHeightChangedReq* msg);
};

const ::CSign&
NodeHeightChangedReq::_Internal::sign(const NodeHeightChangedReq* msg) {
  return *msg->_impl_.sign_;
}
void NodeHeightChangedReq::clear_sign() {
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
}
NodeHeightChangedReq::NodeHeightChangedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NodeHeightChangedReq)
}
NodeHeightChangedReq::NodeHeightChangedReq(const NodeHeightChangedReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeHeightChangedReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sign()) {
    _this->_impl_.sign_ = new ::CSign(*from._impl_.sign_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:NodeHeightChangedReq)
}

inline void NodeHeightChangedReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeHeightChangedReq::~NodeHeightChangedReq() {
  // @@protoc_insertion_point(destructor:NodeHeightChangedReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeHeightChangedReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sign_;
}

void NodeHeightChangedReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeHeightChangedReq::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeHeightChangedReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
  _impl_.height_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeHeightChangedReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeHeightChangedReq.id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CSign sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeHeightChangedReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeHeightChangedReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeHeightChangedReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // .CSign sign = 3;
  if (this->_internal_has_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sign(this),
        _Internal::sign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeHeightChangedReq)
  return target;
}

size_t NodeHeightChangedReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeHeightChangedReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .CSign sign = 3;
  if (this->_internal_has_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sign_);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeHeightChangedReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeHeightChangedReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeHeightChangedReq::GetClassData() const { return &_class_data_; }


void NodeHeightChangedReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeHeightChangedReq*>(&to_msg);
  auto& from = static_cast<const NodeHeightChangedReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NodeHeightChangedReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_sign()) {
    _this->_internal_mutable_sign()->::CSign::MergeFrom(
        from._internal_sign());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeHeightChangedReq::CopyFrom(const NodeHeightChangedReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeHeightChangedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeHeightChangedReq::IsInitialized() const {
  return true;
}

void NodeHeightChangedReq::InternalSwap(NodeHeightChangedReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeHeightChangedReq, _impl_.height_)
      + sizeof(NodeHeightChangedReq::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(NodeHeightChangedReq, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeHeightChangedReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[11]);
}

// ===================================================================

class NodeSign::_Internal {
 public:
};

NodeSign::NodeSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NodeSign)
}
NodeSign::NodeSign(const NodeSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeSign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sign_){}
    , decltype(_impl_.pub_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub().empty()) {
    _this->_impl_.pub_.Set(from._internal_pub(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:NodeSign)
}

inline void NodeSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sign_){}
    , decltype(_impl_.pub_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeSign::~NodeSign() {
  // @@protoc_insertion_point(destructor:NodeSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sign_.Destroy();
  _impl_.pub_.Destroy();
}

void NodeSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeSign::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sign_.ClearToEmpty();
  _impl_.pub_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sign = 1;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sign(), target);
  }

  // bytes pub = 2;
  if (!this->_internal_pub().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pub(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeSign)
  return target;
}

size_t NodeSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sign = 1;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes pub = 2;
  if (!this->_internal_pub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeSign::GetClassData() const { return &_class_data_; }


void NodeSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeSign*>(&to_msg);
  auto& from = static_cast<const NodeSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NodeSign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_pub().empty()) {
    _this->_internal_set_pub(from._internal_pub());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeSign::CopyFrom(const NodeSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSign::IsInitialized() const {
  return true;
}

void NodeSign::InternalSwap(NodeSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pub_, lhs_arena,
      &other->_impl_.pub_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[12]);
}

// ===================================================================

class NodeAddrChangedReq::_Internal {
 public:
  static const ::NodeSign& oldsign(const NodeAddrChangedReq* msg);
  static const ::NodeSign& newsign(const NodeAddrChangedReq* msg);
};

const ::NodeSign&
NodeAddrChangedReq::_Internal::oldsign(const NodeAddrChangedReq* msg) {
  return *msg->_impl_.oldsign_;
}
const ::NodeSign&
NodeAddrChangedReq::_Internal::newsign(const NodeAddrChangedReq* msg) {
  return *msg->_impl_.newsign_;
}
NodeAddrChangedReq::NodeAddrChangedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NodeAddrChangedReq)
}
NodeAddrChangedReq::NodeAddrChangedReq(const NodeAddrChangedReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeAddrChangedReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.oldsign_){nullptr}
    , decltype(_impl_.newsign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_oldsign()) {
    _this->_impl_.oldsign_ = new ::NodeSign(*from._impl_.oldsign_);
  }
  if (from._internal_has_newsign()) {
    _this->_impl_.newsign_ = new ::NodeSign(*from._impl_.newsign_);
  }
  // @@protoc_insertion_point(copy_constructor:NodeAddrChangedReq)
}

inline void NodeAddrChangedReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.oldsign_){nullptr}
    , decltype(_impl_.newsign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeAddrChangedReq::~NodeAddrChangedReq() {
  // @@protoc_insertion_point(destructor:NodeAddrChangedReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeAddrChangedReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.oldsign_;
  if (this != internal_default_instance()) delete _impl_.newsign_;
}

void NodeAddrChangedReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeAddrChangedReq::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeAddrChangedReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.oldsign_ != nullptr) {
    delete _impl_.oldsign_;
  }
  _impl_.oldsign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newsign_ != nullptr) {
    delete _impl_.newsign_;
  }
  _impl_.newsign_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeAddrChangedReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NodeAddrChangedReq.version"));
        } else
          goto handle_unusual;
        continue;
      // .NodeSign oldSign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .NodeSign newSign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeAddrChangedReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeAddrChangedReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeAddrChangedReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .NodeSign oldSign = 2;
  if (this->_internal_has_oldsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::oldsign(this),
        _Internal::oldsign(this).GetCachedSize(), target, stream);
  }

  // .NodeSign newSign = 3;
  if (this->_internal_has_newsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newsign(this),
        _Internal::newsign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeAddrChangedReq)
  return target;
}

size_t NodeAddrChangedReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeAddrChangedReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .NodeSign oldSign = 2;
  if (this->_internal_has_oldsign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldsign_);
  }

  // .NodeSign newSign = 3;
  if (this->_internal_has_newsign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newsign_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeAddrChangedReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeAddrChangedReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeAddrChangedReq::GetClassData() const { return &_class_data_; }


void NodeAddrChangedReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeAddrChangedReq*>(&to_msg);
  auto& from = static_cast<const NodeAddrChangedReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NodeAddrChangedReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_oldsign()) {
    _this->_internal_mutable_oldsign()->::NodeSign::MergeFrom(
        from._internal_oldsign());
  }
  if (from._internal_has_newsign()) {
    _this->_internal_mutable_newsign()->::NodeSign::MergeFrom(
        from._internal_newsign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeAddrChangedReq::CopyFrom(const NodeAddrChangedReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeAddrChangedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAddrChangedReq::IsInitialized() const {
  return true;
}

void NodeAddrChangedReq::InternalSwap(NodeAddrChangedReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeAddrChangedReq, _impl_.newsign_)
      + sizeof(NodeAddrChangedReq::_impl_.newsign_)
      - PROTOBUF_FIELD_OFFSET(NodeAddrChangedReq, _impl_.oldsign_)>(
          reinterpret_cast<char*>(&_impl_.oldsign_),
          reinterpret_cast<char*>(&other->_impl_.oldsign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeAddrChangedReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[13]);
}

// ===================================================================

class TestNetAck::_Internal {
 public:
};

TestNetAck::TestNetAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestNetAck)
}
TestNetAck::TestNetAck(const TestNetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestNetAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:TestNetAck)
}

inline void TestNetAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestNetAck::~TestNetAck() {
  // @@protoc_insertion_point(destructor:TestNetAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNetAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.id_.Destroy();
}

void TestNetAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestNetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:TestNetAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNetAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestNetAck.data"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestNetAck.hash"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestNetAck.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNetAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestNetAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestNetAck.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestNetAck.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestNetAck.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestNetAck)
  return target;
}

size_t TestNetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestNetAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNetAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestNetAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNetAck::GetClassData() const { return &_class_data_; }


void TestNetAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestNetAck*>(&to_msg);
  auto& from = static_cast<const TestNetAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestNetAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNetAck::CopyFrom(const TestNetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestNetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNetAck::IsInitialized() const {
  return true;
}

void TestNetAck::InternalSwap(TestNetAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNetAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[14]);
}

// ===================================================================

class TestNetReq::_Internal {
 public:
};

TestNetReq::TestNetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestNetReq)
}
TestNetReq::TestNetReq(const TestNetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestNetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:TestNetReq)
}

inline void TestNetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestNetReq::~TestNetReq() {
  // @@protoc_insertion_point(destructor:TestNetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.id_.Destroy();
}

void TestNetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestNetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:TestNetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestNetReq.data"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestNetReq.hash"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestNetReq.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestNetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestNetReq.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestNetReq.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestNetReq.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestNetReq)
  return target;
}

size_t TestNetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestNetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestNetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNetReq::GetClassData() const { return &_class_data_; }


void TestNetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestNetReq*>(&to_msg);
  auto& from = static_cast<const TestNetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestNetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNetReq::CopyFrom(const TestNetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestNetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNetReq::IsInitialized() const {
  return true;
}

void TestNetReq::InternalSwap(TestNetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PrintMsgReq*
Arena::CreateMaybeMessage< ::PrintMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PrintMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::NodeInfo*
Arena::CreateMaybeMessage< ::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterNodeReq*
Arena::CreateMaybeMessage< ::RegisterNodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterNodeAck*
Arena::CreateMaybeMessage< ::RegisterNodeAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterNodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncNodeReq*
Arena::CreateMaybeMessage< ::SyncNodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncNodeAck*
Arena::CreateMaybeMessage< ::SyncNodeAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncNodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::BroadcastMsgReq*
Arena::CreateMaybeMessage< ::BroadcastMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BroadcastMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PingReq*
Arena::CreateMaybeMessage< ::PingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PongReq*
Arena::CreateMaybeMessage< ::PongReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PongReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EchoReq*
Arena::CreateMaybeMessage< ::EchoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EchoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EchoAck*
Arena::CreateMaybeMessage< ::EchoAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EchoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::NodeHeightChangedReq*
Arena::CreateMaybeMessage< ::NodeHeightChangedReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeHeightChangedReq >(arena);
}
template<> PROTOBUF_NOINLINE ::NodeSign*
Arena::CreateMaybeMessage< ::NodeSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeSign >(arena);
}
template<> PROTOBUF_NOINLINE ::NodeAddrChangedReq*
Arena::CreateMaybeMessage< ::NodeAddrChangedReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeAddrChangedReq >(arena);
}
template<> PROTOBUF_NOINLINE ::TestNetAck*
Arena::CreateMaybeMessage< ::TestNetAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestNetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::TestNetReq*
Arena::CreateMaybeMessage< ::TestNetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestNetReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
