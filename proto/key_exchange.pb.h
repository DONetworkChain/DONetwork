// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_key_5fexchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_key_5fexchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_key_5fexchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_key_5fexchange_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_key_5fexchange_2eproto;
class Ciphertext;
struct CiphertextDefaultTypeInternal;
extern CiphertextDefaultTypeInternal _Ciphertext_default_instance_;
class KeyExchangeRequest;
struct KeyExchangeRequestDefaultTypeInternal;
extern KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
class KeyExchangeResponse;
struct KeyExchangeResponseDefaultTypeInternal;
extern KeyExchangeResponseDefaultTypeInternal _KeyExchangeResponse_default_instance_;
class KeyInfo;
struct KeyInfoDefaultTypeInternal;
extern KeyInfoDefaultTypeInternal _KeyInfo_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ciphertext* Arena::CreateMaybeMessage<::Ciphertext>(Arena*);
template<> ::KeyExchangeRequest* Arena::CreateMaybeMessage<::KeyExchangeRequest>(Arena*);
template<> ::KeyExchangeResponse* Arena::CreateMaybeMessage<::KeyExchangeResponse>(Arena*);
template<> ::KeyInfo* Arena::CreateMaybeMessage<::KeyInfo>(Arena*);
template<> ::Token* Arena::CreateMaybeMessage<::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class KeyExchangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyExchangeRequest) */ {
 public:
  inline KeyExchangeRequest() : KeyExchangeRequest(nullptr) {}
  ~KeyExchangeRequest() override;
  explicit PROTOBUF_CONSTEXPR KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyExchangeRequest(const KeyExchangeRequest& from);
  KeyExchangeRequest(KeyExchangeRequest&& from) noexcept
    : KeyExchangeRequest() {
    *this = ::std::move(from);
  }

  inline KeyExchangeRequest& operator=(const KeyExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchangeRequest& operator=(KeyExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const KeyExchangeRequest*>(
               &_KeyExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyExchangeRequest& a, KeyExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyExchangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyExchangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyExchangeRequest& from) {
    KeyExchangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyExchangeRequest";
  }
  protected:
  explicit KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kKeyInfoFieldNumber = 2,
  };
  // string msg_id = 1;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // .KeyInfo key_info = 2;
  bool has_key_info() const;
  private:
  bool _internal_has_key_info() const;
  public:
  void clear_key_info();
  const ::KeyInfo& key_info() const;
  PROTOBUF_NODISCARD ::KeyInfo* release_key_info();
  ::KeyInfo* mutable_key_info();
  void set_allocated_key_info(::KeyInfo* key_info);
  private:
  const ::KeyInfo& _internal_key_info() const;
  ::KeyInfo* _internal_mutable_key_info();
  public:
  void unsafe_arena_set_allocated_key_info(
      ::KeyInfo* key_info);
  ::KeyInfo* unsafe_arena_release_key_info();

  // @@protoc_insertion_point(class_scope:KeyExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::KeyInfo* key_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class KeyExchangeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyExchangeResponse) */ {
 public:
  inline KeyExchangeResponse() : KeyExchangeResponse(nullptr) {}
  ~KeyExchangeResponse() override;
  explicit PROTOBUF_CONSTEXPR KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyExchangeResponse(const KeyExchangeResponse& from);
  KeyExchangeResponse(KeyExchangeResponse&& from) noexcept
    : KeyExchangeResponse() {
    *this = ::std::move(from);
  }

  inline KeyExchangeResponse& operator=(const KeyExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchangeResponse& operator=(KeyExchangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyExchangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyExchangeResponse* internal_default_instance() {
    return reinterpret_cast<const KeyExchangeResponse*>(
               &_KeyExchangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyExchangeResponse& a, KeyExchangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchangeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyExchangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyExchangeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyExchangeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyExchangeResponse& from) {
    KeyExchangeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchangeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyExchangeResponse";
  }
  protected:
  explicit KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kKeyInfoFieldNumber = 2,
  };
  // string msg_id = 1;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // .KeyInfo key_info = 2;
  bool has_key_info() const;
  private:
  bool _internal_has_key_info() const;
  public:
  void clear_key_info();
  const ::KeyInfo& key_info() const;
  PROTOBUF_NODISCARD ::KeyInfo* release_key_info();
  ::KeyInfo* mutable_key_info();
  void set_allocated_key_info(::KeyInfo* key_info);
  private:
  const ::KeyInfo& _internal_key_info() const;
  ::KeyInfo* _internal_mutable_key_info();
  public:
  void unsafe_arena_set_allocated_key_info(
      ::KeyInfo* key_info);
  ::KeyInfo* unsafe_arena_release_key_info();

  // @@protoc_insertion_point(class_scope:KeyExchangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::KeyInfo* key_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class KeyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyInfo) */ {
 public:
  inline KeyInfo() : KeyInfo(nullptr) {}
  ~KeyInfo() override;
  explicit PROTOBUF_CONSTEXPR KeyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyInfo(const KeyInfo& from);
  KeyInfo(KeyInfo&& from) noexcept
    : KeyInfo() {
    *this = ::std::move(from);
  }

  inline KeyInfo& operator=(const KeyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyInfo& operator=(KeyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyInfo* internal_default_instance() {
    return reinterpret_cast<const KeyInfo*>(
               &_KeyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyInfo& a, KeyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyInfo& from) {
    KeyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyInfo";
  }
  protected:
  explicit KeyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSalt32BytesFieldNumber = 1,
    kEcPublicKey65BytesFieldNumber = 2,
  };
  // bytes salt_32bytes = 1;
  void clear_salt_32bytes();
  const std::string& salt_32bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt_32bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt_32bytes();
  PROTOBUF_NODISCARD std::string* release_salt_32bytes();
  void set_allocated_salt_32bytes(std::string* salt_32bytes);
  private:
  const std::string& _internal_salt_32bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt_32bytes(const std::string& value);
  std::string* _internal_mutable_salt_32bytes();
  public:

  // bytes ec_public_key_65bytes = 2;
  void clear_ec_public_key_65bytes();
  const std::string& ec_public_key_65bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ec_public_key_65bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ec_public_key_65bytes();
  PROTOBUF_NODISCARD std::string* release_ec_public_key_65bytes();
  void set_allocated_ec_public_key_65bytes(std::string* ec_public_key_65bytes);
  private:
  const std::string& _internal_ec_public_key_65bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ec_public_key_65bytes(const std::string& value);
  std::string* _internal_mutable_ec_public_key_65bytes();
  public:

  // @@protoc_insertion_point(class_scope:KeyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_32bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_public_key_65bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit PROTOBUF_CONSTEXPR Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSalt3BytesFieldNumber = 1,
    kHmac3BytesFieldNumber = 2,
  };
  // bytes salt_3bytes = 1;
  void clear_salt_3bytes();
  const std::string& salt_3bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt_3bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt_3bytes();
  PROTOBUF_NODISCARD std::string* release_salt_3bytes();
  void set_allocated_salt_3bytes(std::string* salt_3bytes);
  private:
  const std::string& _internal_salt_3bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt_3bytes(const std::string& value);
  std::string* _internal_mutable_salt_3bytes();
  public:

  // bytes hmac_3bytes = 2;
  void clear_hmac_3bytes();
  const std::string& hmac_3bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hmac_3bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hmac_3bytes();
  PROTOBUF_NODISCARD std::string* release_hmac_3bytes();
  void set_allocated_hmac_3bytes(std::string* hmac_3bytes);
  private:
  const std::string& _internal_hmac_3bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hmac_3bytes(const std::string& value);
  std::string* _internal_mutable_hmac_3bytes();
  public:

  // @@protoc_insertion_point(class_scope:Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_3bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hmac_3bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Ciphertext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ciphertext) */ {
 public:
  inline Ciphertext() : Ciphertext(nullptr) {}
  ~Ciphertext() override;
  explicit PROTOBUF_CONSTEXPR Ciphertext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ciphertext(const Ciphertext& from);
  Ciphertext(Ciphertext&& from) noexcept
    : Ciphertext() {
    *this = ::std::move(from);
  }

  inline Ciphertext& operator=(const Ciphertext& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ciphertext& operator=(Ciphertext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ciphertext& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ciphertext* internal_default_instance() {
    return reinterpret_cast<const Ciphertext*>(
               &_Ciphertext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ciphertext& a, Ciphertext& b) {
    a.Swap(&b);
  }
  inline void Swap(Ciphertext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ciphertext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ciphertext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ciphertext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ciphertext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ciphertext& from) {
    Ciphertext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ciphertext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ciphertext";
  }
  protected:
  explicit Ciphertext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAesIv12BytesFieldNumber = 2,
    kCiphertextNbytesFieldNumber = 3,
    kAesTag16BytesFieldNumber = 4,
    kTokenFieldNumber = 5,
    kCipherVersionFieldNumber = 1,
  };
  // bytes aes_iv_12bytes = 2;
  void clear_aes_iv_12bytes();
  const std::string& aes_iv_12bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aes_iv_12bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aes_iv_12bytes();
  PROTOBUF_NODISCARD std::string* release_aes_iv_12bytes();
  void set_allocated_aes_iv_12bytes(std::string* aes_iv_12bytes);
  private:
  const std::string& _internal_aes_iv_12bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aes_iv_12bytes(const std::string& value);
  std::string* _internal_mutable_aes_iv_12bytes();
  public:

  // bytes ciphertext_nbytes = 3;
  void clear_ciphertext_nbytes();
  const std::string& ciphertext_nbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ciphertext_nbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ciphertext_nbytes();
  PROTOBUF_NODISCARD std::string* release_ciphertext_nbytes();
  void set_allocated_ciphertext_nbytes(std::string* ciphertext_nbytes);
  private:
  const std::string& _internal_ciphertext_nbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ciphertext_nbytes(const std::string& value);
  std::string* _internal_mutable_ciphertext_nbytes();
  public:

  // bytes aes_tag_16bytes = 4;
  void clear_aes_tag_16bytes();
  const std::string& aes_tag_16bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aes_tag_16bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aes_tag_16bytes();
  PROTOBUF_NODISCARD std::string* release_aes_tag_16bytes();
  void set_allocated_aes_tag_16bytes(std::string* aes_tag_16bytes);
  private:
  const std::string& _internal_aes_tag_16bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aes_tag_16bytes(const std::string& value);
  std::string* _internal_mutable_aes_tag_16bytes();
  public:

  // .Token token = 5;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Token& token() const;
  PROTOBUF_NODISCARD ::Token* release_token();
  ::Token* mutable_token();
  void set_allocated_token(::Token* token);
  private:
  const ::Token& _internal_token() const;
  ::Token* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::Token* token);
  ::Token* unsafe_arena_release_token();

  // int32 cipher_version = 1;
  void clear_cipher_version();
  int32_t cipher_version() const;
  void set_cipher_version(int32_t value);
  private:
  int32_t _internal_cipher_version() const;
  void _internal_set_cipher_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Ciphertext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aes_iv_12bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_nbytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aes_tag_16bytes_;
    ::Token* token_;
    int32_t cipher_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyExchangeRequest

// string msg_id = 1;
inline void KeyExchangeRequest::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& KeyExchangeRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:KeyExchangeRequest.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyExchangeRequest::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KeyExchangeRequest.msg_id)
}
inline std::string* KeyExchangeRequest::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:KeyExchangeRequest.msg_id)
  return _s;
}
inline const std::string& KeyExchangeRequest::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void KeyExchangeRequest::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyExchangeRequest::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyExchangeRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:KeyExchangeRequest.msg_id)
  return _impl_.msg_id_.Release();
}
inline void KeyExchangeRequest::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KeyExchangeRequest.msg_id)
}

// .KeyInfo key_info = 2;
inline bool KeyExchangeRequest::_internal_has_key_info() const {
  return this != internal_default_instance() && _impl_.key_info_ != nullptr;
}
inline bool KeyExchangeRequest::has_key_info() const {
  return _internal_has_key_info();
}
inline void KeyExchangeRequest::clear_key_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_info_ != nullptr) {
    delete _impl_.key_info_;
  }
  _impl_.key_info_ = nullptr;
}
inline const ::KeyInfo& KeyExchangeRequest::_internal_key_info() const {
  const ::KeyInfo* p = _impl_.key_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KeyInfo&>(
      ::_KeyInfo_default_instance_);
}
inline const ::KeyInfo& KeyExchangeRequest::key_info() const {
  // @@protoc_insertion_point(field_get:KeyExchangeRequest.key_info)
  return _internal_key_info();
}
inline void KeyExchangeRequest::unsafe_arena_set_allocated_key_info(
    ::KeyInfo* key_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_info_);
  }
  _impl_.key_info_ = key_info;
  if (key_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KeyExchangeRequest.key_info)
}
inline ::KeyInfo* KeyExchangeRequest::release_key_info() {
  
  ::KeyInfo* temp = _impl_.key_info_;
  _impl_.key_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KeyInfo* KeyExchangeRequest::unsafe_arena_release_key_info() {
  // @@protoc_insertion_point(field_release:KeyExchangeRequest.key_info)
  
  ::KeyInfo* temp = _impl_.key_info_;
  _impl_.key_info_ = nullptr;
  return temp;
}
inline ::KeyInfo* KeyExchangeRequest::_internal_mutable_key_info() {
  
  if (_impl_.key_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyInfo>(GetArenaForAllocation());
    _impl_.key_info_ = p;
  }
  return _impl_.key_info_;
}
inline ::KeyInfo* KeyExchangeRequest::mutable_key_info() {
  ::KeyInfo* _msg = _internal_mutable_key_info();
  // @@protoc_insertion_point(field_mutable:KeyExchangeRequest.key_info)
  return _msg;
}
inline void KeyExchangeRequest::set_allocated_key_info(::KeyInfo* key_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_info_;
  }
  if (key_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key_info);
    if (message_arena != submessage_arena) {
      key_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_info_ = key_info;
  // @@protoc_insertion_point(field_set_allocated:KeyExchangeRequest.key_info)
}

// -------------------------------------------------------------------

// KeyExchangeResponse

// string msg_id = 1;
inline void KeyExchangeResponse::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& KeyExchangeResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:KeyExchangeResponse.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyExchangeResponse::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KeyExchangeResponse.msg_id)
}
inline std::string* KeyExchangeResponse::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:KeyExchangeResponse.msg_id)
  return _s;
}
inline const std::string& KeyExchangeResponse::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void KeyExchangeResponse::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyExchangeResponse::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyExchangeResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:KeyExchangeResponse.msg_id)
  return _impl_.msg_id_.Release();
}
inline void KeyExchangeResponse::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KeyExchangeResponse.msg_id)
}

// .KeyInfo key_info = 2;
inline bool KeyExchangeResponse::_internal_has_key_info() const {
  return this != internal_default_instance() && _impl_.key_info_ != nullptr;
}
inline bool KeyExchangeResponse::has_key_info() const {
  return _internal_has_key_info();
}
inline void KeyExchangeResponse::clear_key_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_info_ != nullptr) {
    delete _impl_.key_info_;
  }
  _impl_.key_info_ = nullptr;
}
inline const ::KeyInfo& KeyExchangeResponse::_internal_key_info() const {
  const ::KeyInfo* p = _impl_.key_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KeyInfo&>(
      ::_KeyInfo_default_instance_);
}
inline const ::KeyInfo& KeyExchangeResponse::key_info() const {
  // @@protoc_insertion_point(field_get:KeyExchangeResponse.key_info)
  return _internal_key_info();
}
inline void KeyExchangeResponse::unsafe_arena_set_allocated_key_info(
    ::KeyInfo* key_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_info_);
  }
  _impl_.key_info_ = key_info;
  if (key_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KeyExchangeResponse.key_info)
}
inline ::KeyInfo* KeyExchangeResponse::release_key_info() {
  
  ::KeyInfo* temp = _impl_.key_info_;
  _impl_.key_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KeyInfo* KeyExchangeResponse::unsafe_arena_release_key_info() {
  // @@protoc_insertion_point(field_release:KeyExchangeResponse.key_info)
  
  ::KeyInfo* temp = _impl_.key_info_;
  _impl_.key_info_ = nullptr;
  return temp;
}
inline ::KeyInfo* KeyExchangeResponse::_internal_mutable_key_info() {
  
  if (_impl_.key_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyInfo>(GetArenaForAllocation());
    _impl_.key_info_ = p;
  }
  return _impl_.key_info_;
}
inline ::KeyInfo* KeyExchangeResponse::mutable_key_info() {
  ::KeyInfo* _msg = _internal_mutable_key_info();
  // @@protoc_insertion_point(field_mutable:KeyExchangeResponse.key_info)
  return _msg;
}
inline void KeyExchangeResponse::set_allocated_key_info(::KeyInfo* key_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_info_;
  }
  if (key_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key_info);
    if (message_arena != submessage_arena) {
      key_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_info_ = key_info;
  // @@protoc_insertion_point(field_set_allocated:KeyExchangeResponse.key_info)
}

// -------------------------------------------------------------------

// KeyInfo

// bytes salt_32bytes = 1;
inline void KeyInfo::clear_salt_32bytes() {
  _impl_.salt_32bytes_.ClearToEmpty();
}
inline const std::string& KeyInfo::salt_32bytes() const {
  // @@protoc_insertion_point(field_get:KeyInfo.salt_32bytes)
  return _internal_salt_32bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyInfo::set_salt_32bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.salt_32bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KeyInfo.salt_32bytes)
}
inline std::string* KeyInfo::mutable_salt_32bytes() {
  std::string* _s = _internal_mutable_salt_32bytes();
  // @@protoc_insertion_point(field_mutable:KeyInfo.salt_32bytes)
  return _s;
}
inline const std::string& KeyInfo::_internal_salt_32bytes() const {
  return _impl_.salt_32bytes_.Get();
}
inline void KeyInfo::_internal_set_salt_32bytes(const std::string& value) {
  
  _impl_.salt_32bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyInfo::_internal_mutable_salt_32bytes() {
  
  return _impl_.salt_32bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyInfo::release_salt_32bytes() {
  // @@protoc_insertion_point(field_release:KeyInfo.salt_32bytes)
  return _impl_.salt_32bytes_.Release();
}
inline void KeyInfo::set_allocated_salt_32bytes(std::string* salt_32bytes) {
  if (salt_32bytes != nullptr) {
    
  } else {
    
  }
  _impl_.salt_32bytes_.SetAllocated(salt_32bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.salt_32bytes_.IsDefault()) {
    _impl_.salt_32bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KeyInfo.salt_32bytes)
}

// bytes ec_public_key_65bytes = 2;
inline void KeyInfo::clear_ec_public_key_65bytes() {
  _impl_.ec_public_key_65bytes_.ClearToEmpty();
}
inline const std::string& KeyInfo::ec_public_key_65bytes() const {
  // @@protoc_insertion_point(field_get:KeyInfo.ec_public_key_65bytes)
  return _internal_ec_public_key_65bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyInfo::set_ec_public_key_65bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ec_public_key_65bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KeyInfo.ec_public_key_65bytes)
}
inline std::string* KeyInfo::mutable_ec_public_key_65bytes() {
  std::string* _s = _internal_mutable_ec_public_key_65bytes();
  // @@protoc_insertion_point(field_mutable:KeyInfo.ec_public_key_65bytes)
  return _s;
}
inline const std::string& KeyInfo::_internal_ec_public_key_65bytes() const {
  return _impl_.ec_public_key_65bytes_.Get();
}
inline void KeyInfo::_internal_set_ec_public_key_65bytes(const std::string& value) {
  
  _impl_.ec_public_key_65bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyInfo::_internal_mutable_ec_public_key_65bytes() {
  
  return _impl_.ec_public_key_65bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyInfo::release_ec_public_key_65bytes() {
  // @@protoc_insertion_point(field_release:KeyInfo.ec_public_key_65bytes)
  return _impl_.ec_public_key_65bytes_.Release();
}
inline void KeyInfo::set_allocated_ec_public_key_65bytes(std::string* ec_public_key_65bytes) {
  if (ec_public_key_65bytes != nullptr) {
    
  } else {
    
  }
  _impl_.ec_public_key_65bytes_.SetAllocated(ec_public_key_65bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ec_public_key_65bytes_.IsDefault()) {
    _impl_.ec_public_key_65bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KeyInfo.ec_public_key_65bytes)
}

// -------------------------------------------------------------------

// Token

// bytes salt_3bytes = 1;
inline void Token::clear_salt_3bytes() {
  _impl_.salt_3bytes_.ClearToEmpty();
}
inline const std::string& Token::salt_3bytes() const {
  // @@protoc_insertion_point(field_get:Token.salt_3bytes)
  return _internal_salt_3bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_salt_3bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.salt_3bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Token.salt_3bytes)
}
inline std::string* Token::mutable_salt_3bytes() {
  std::string* _s = _internal_mutable_salt_3bytes();
  // @@protoc_insertion_point(field_mutable:Token.salt_3bytes)
  return _s;
}
inline const std::string& Token::_internal_salt_3bytes() const {
  return _impl_.salt_3bytes_.Get();
}
inline void Token::_internal_set_salt_3bytes(const std::string& value) {
  
  _impl_.salt_3bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_salt_3bytes() {
  
  return _impl_.salt_3bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Token::release_salt_3bytes() {
  // @@protoc_insertion_point(field_release:Token.salt_3bytes)
  return _impl_.salt_3bytes_.Release();
}
inline void Token::set_allocated_salt_3bytes(std::string* salt_3bytes) {
  if (salt_3bytes != nullptr) {
    
  } else {
    
  }
  _impl_.salt_3bytes_.SetAllocated(salt_3bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.salt_3bytes_.IsDefault()) {
    _impl_.salt_3bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Token.salt_3bytes)
}

// bytes hmac_3bytes = 2;
inline void Token::clear_hmac_3bytes() {
  _impl_.hmac_3bytes_.ClearToEmpty();
}
inline const std::string& Token::hmac_3bytes() const {
  // @@protoc_insertion_point(field_get:Token.hmac_3bytes)
  return _internal_hmac_3bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_hmac_3bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hmac_3bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Token.hmac_3bytes)
}
inline std::string* Token::mutable_hmac_3bytes() {
  std::string* _s = _internal_mutable_hmac_3bytes();
  // @@protoc_insertion_point(field_mutable:Token.hmac_3bytes)
  return _s;
}
inline const std::string& Token::_internal_hmac_3bytes() const {
  return _impl_.hmac_3bytes_.Get();
}
inline void Token::_internal_set_hmac_3bytes(const std::string& value) {
  
  _impl_.hmac_3bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_hmac_3bytes() {
  
  return _impl_.hmac_3bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Token::release_hmac_3bytes() {
  // @@protoc_insertion_point(field_release:Token.hmac_3bytes)
  return _impl_.hmac_3bytes_.Release();
}
inline void Token::set_allocated_hmac_3bytes(std::string* hmac_3bytes) {
  if (hmac_3bytes != nullptr) {
    
  } else {
    
  }
  _impl_.hmac_3bytes_.SetAllocated(hmac_3bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hmac_3bytes_.IsDefault()) {
    _impl_.hmac_3bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Token.hmac_3bytes)
}

// -------------------------------------------------------------------

// Ciphertext

// int32 cipher_version = 1;
inline void Ciphertext::clear_cipher_version() {
  _impl_.cipher_version_ = 0;
}
inline int32_t Ciphertext::_internal_cipher_version() const {
  return _impl_.cipher_version_;
}
inline int32_t Ciphertext::cipher_version() const {
  // @@protoc_insertion_point(field_get:Ciphertext.cipher_version)
  return _internal_cipher_version();
}
inline void Ciphertext::_internal_set_cipher_version(int32_t value) {
  
  _impl_.cipher_version_ = value;
}
inline void Ciphertext::set_cipher_version(int32_t value) {
  _internal_set_cipher_version(value);
  // @@protoc_insertion_point(field_set:Ciphertext.cipher_version)
}

// bytes aes_iv_12bytes = 2;
inline void Ciphertext::clear_aes_iv_12bytes() {
  _impl_.aes_iv_12bytes_.ClearToEmpty();
}
inline const std::string& Ciphertext::aes_iv_12bytes() const {
  // @@protoc_insertion_point(field_get:Ciphertext.aes_iv_12bytes)
  return _internal_aes_iv_12bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ciphertext::set_aes_iv_12bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aes_iv_12bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Ciphertext.aes_iv_12bytes)
}
inline std::string* Ciphertext::mutable_aes_iv_12bytes() {
  std::string* _s = _internal_mutable_aes_iv_12bytes();
  // @@protoc_insertion_point(field_mutable:Ciphertext.aes_iv_12bytes)
  return _s;
}
inline const std::string& Ciphertext::_internal_aes_iv_12bytes() const {
  return _impl_.aes_iv_12bytes_.Get();
}
inline void Ciphertext::_internal_set_aes_iv_12bytes(const std::string& value) {
  
  _impl_.aes_iv_12bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Ciphertext::_internal_mutable_aes_iv_12bytes() {
  
  return _impl_.aes_iv_12bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Ciphertext::release_aes_iv_12bytes() {
  // @@protoc_insertion_point(field_release:Ciphertext.aes_iv_12bytes)
  return _impl_.aes_iv_12bytes_.Release();
}
inline void Ciphertext::set_allocated_aes_iv_12bytes(std::string* aes_iv_12bytes) {
  if (aes_iv_12bytes != nullptr) {
    
  } else {
    
  }
  _impl_.aes_iv_12bytes_.SetAllocated(aes_iv_12bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aes_iv_12bytes_.IsDefault()) {
    _impl_.aes_iv_12bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ciphertext.aes_iv_12bytes)
}

// bytes ciphertext_nbytes = 3;
inline void Ciphertext::clear_ciphertext_nbytes() {
  _impl_.ciphertext_nbytes_.ClearToEmpty();
}
inline const std::string& Ciphertext::ciphertext_nbytes() const {
  // @@protoc_insertion_point(field_get:Ciphertext.ciphertext_nbytes)
  return _internal_ciphertext_nbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ciphertext::set_ciphertext_nbytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ciphertext_nbytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Ciphertext.ciphertext_nbytes)
}
inline std::string* Ciphertext::mutable_ciphertext_nbytes() {
  std::string* _s = _internal_mutable_ciphertext_nbytes();
  // @@protoc_insertion_point(field_mutable:Ciphertext.ciphertext_nbytes)
  return _s;
}
inline const std::string& Ciphertext::_internal_ciphertext_nbytes() const {
  return _impl_.ciphertext_nbytes_.Get();
}
inline void Ciphertext::_internal_set_ciphertext_nbytes(const std::string& value) {
  
  _impl_.ciphertext_nbytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Ciphertext::_internal_mutable_ciphertext_nbytes() {
  
  return _impl_.ciphertext_nbytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Ciphertext::release_ciphertext_nbytes() {
  // @@protoc_insertion_point(field_release:Ciphertext.ciphertext_nbytes)
  return _impl_.ciphertext_nbytes_.Release();
}
inline void Ciphertext::set_allocated_ciphertext_nbytes(std::string* ciphertext_nbytes) {
  if (ciphertext_nbytes != nullptr) {
    
  } else {
    
  }
  _impl_.ciphertext_nbytes_.SetAllocated(ciphertext_nbytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ciphertext_nbytes_.IsDefault()) {
    _impl_.ciphertext_nbytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ciphertext.ciphertext_nbytes)
}

// bytes aes_tag_16bytes = 4;
inline void Ciphertext::clear_aes_tag_16bytes() {
  _impl_.aes_tag_16bytes_.ClearToEmpty();
}
inline const std::string& Ciphertext::aes_tag_16bytes() const {
  // @@protoc_insertion_point(field_get:Ciphertext.aes_tag_16bytes)
  return _internal_aes_tag_16bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ciphertext::set_aes_tag_16bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aes_tag_16bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Ciphertext.aes_tag_16bytes)
}
inline std::string* Ciphertext::mutable_aes_tag_16bytes() {
  std::string* _s = _internal_mutable_aes_tag_16bytes();
  // @@protoc_insertion_point(field_mutable:Ciphertext.aes_tag_16bytes)
  return _s;
}
inline const std::string& Ciphertext::_internal_aes_tag_16bytes() const {
  return _impl_.aes_tag_16bytes_.Get();
}
inline void Ciphertext::_internal_set_aes_tag_16bytes(const std::string& value) {
  
  _impl_.aes_tag_16bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Ciphertext::_internal_mutable_aes_tag_16bytes() {
  
  return _impl_.aes_tag_16bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Ciphertext::release_aes_tag_16bytes() {
  // @@protoc_insertion_point(field_release:Ciphertext.aes_tag_16bytes)
  return _impl_.aes_tag_16bytes_.Release();
}
inline void Ciphertext::set_allocated_aes_tag_16bytes(std::string* aes_tag_16bytes) {
  if (aes_tag_16bytes != nullptr) {
    
  } else {
    
  }
  _impl_.aes_tag_16bytes_.SetAllocated(aes_tag_16bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aes_tag_16bytes_.IsDefault()) {
    _impl_.aes_tag_16bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ciphertext.aes_tag_16bytes)
}

// .Token token = 5;
inline bool Ciphertext::_internal_has_token() const {
  return this != internal_default_instance() && _impl_.token_ != nullptr;
}
inline bool Ciphertext::has_token() const {
  return _internal_has_token();
}
inline void Ciphertext::clear_token() {
  if (GetArenaForAllocation() == nullptr && _impl_.token_ != nullptr) {
    delete _impl_.token_;
  }
  _impl_.token_ = nullptr;
}
inline const ::Token& Ciphertext::_internal_token() const {
  const ::Token* p = _impl_.token_;
  return p != nullptr ? *p : reinterpret_cast<const ::Token&>(
      ::_Token_default_instance_);
}
inline const ::Token& Ciphertext::token() const {
  // @@protoc_insertion_point(field_get:Ciphertext.token)
  return _internal_token();
}
inline void Ciphertext::unsafe_arena_set_allocated_token(
    ::Token* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_);
  }
  _impl_.token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ciphertext.token)
}
inline ::Token* Ciphertext::release_token() {
  
  ::Token* temp = _impl_.token_;
  _impl_.token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Token* Ciphertext::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:Ciphertext.token)
  
  ::Token* temp = _impl_.token_;
  _impl_.token_ = nullptr;
  return temp;
}
inline ::Token* Ciphertext::_internal_mutable_token() {
  
  if (_impl_.token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Token>(GetArenaForAllocation());
    _impl_.token_ = p;
  }
  return _impl_.token_;
}
inline ::Token* Ciphertext::mutable_token() {
  ::Token* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Ciphertext.token)
  return _msg;
}
inline void Ciphertext::set_allocated_token(::Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Ciphertext.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_key_5fexchange_2eproto
