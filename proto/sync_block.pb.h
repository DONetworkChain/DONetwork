// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_5fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_5fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_5fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_5fblock_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_5fblock_2eproto;
class FastSyncBlock;
struct FastSyncBlockDefaultTypeInternal;
extern FastSyncBlockDefaultTypeInternal _FastSyncBlock_default_instance_;
class FastSyncBlockHashs;
struct FastSyncBlockHashsDefaultTypeInternal;
extern FastSyncBlockHashsDefaultTypeInternal _FastSyncBlockHashs_default_instance_;
class FastSyncGetBlockAck;
struct FastSyncGetBlockAckDefaultTypeInternal;
extern FastSyncGetBlockAckDefaultTypeInternal _FastSyncGetBlockAck_default_instance_;
class FastSyncGetBlockReq;
struct FastSyncGetBlockReqDefaultTypeInternal;
extern FastSyncGetBlockReqDefaultTypeInternal _FastSyncGetBlockReq_default_instance_;
class FastSyncGetHashAck;
struct FastSyncGetHashAckDefaultTypeInternal;
extern FastSyncGetHashAckDefaultTypeInternal _FastSyncGetHashAck_default_instance_;
class FastSyncGetHashReq;
struct FastSyncGetHashReqDefaultTypeInternal;
extern FastSyncGetHashReqDefaultTypeInternal _FastSyncGetHashReq_default_instance_;
class GetBlockByHashAck;
struct GetBlockByHashAckDefaultTypeInternal;
extern GetBlockByHashAckDefaultTypeInternal _GetBlockByHashAck_default_instance_;
class GetBlockByHashReq;
struct GetBlockByHashReqDefaultTypeInternal;
extern GetBlockByHashReqDefaultTypeInternal _GetBlockByHashReq_default_instance_;
class GetBlockByUtxoAck;
struct GetBlockByUtxoAckDefaultTypeInternal;
extern GetBlockByUtxoAckDefaultTypeInternal _GetBlockByUtxoAck_default_instance_;
class GetBlockByUtxoReq;
struct GetBlockByUtxoReqDefaultTypeInternal;
extern GetBlockByUtxoReqDefaultTypeInternal _GetBlockByUtxoReq_default_instance_;
class GetCheckSumHashAck;
struct GetCheckSumHashAckDefaultTypeInternal;
extern GetCheckSumHashAckDefaultTypeInternal _GetCheckSumHashAck_default_instance_;
class GetCheckSumHashReq;
struct GetCheckSumHashReqDefaultTypeInternal;
extern GetCheckSumHashReqDefaultTypeInternal _GetCheckSumHashReq_default_instance_;
class HashType;
struct HashTypeDefaultTypeInternal;
extern HashTypeDefaultTypeInternal _HashType_default_instance_;
class SyncFromZeroGetBlockAck;
struct SyncFromZeroGetBlockAckDefaultTypeInternal;
extern SyncFromZeroGetBlockAckDefaultTypeInternal _SyncFromZeroGetBlockAck_default_instance_;
class SyncFromZeroGetBlockReq;
struct SyncFromZeroGetBlockReqDefaultTypeInternal;
extern SyncFromZeroGetBlockReqDefaultTypeInternal _SyncFromZeroGetBlockReq_default_instance_;
class SyncFromZeroGetSumHashAck;
struct SyncFromZeroGetSumHashAckDefaultTypeInternal;
extern SyncFromZeroGetSumHashAckDefaultTypeInternal _SyncFromZeroGetSumHashAck_default_instance_;
class SyncFromZeroGetSumHashReq;
struct SyncFromZeroGetSumHashReqDefaultTypeInternal;
extern SyncFromZeroGetSumHashReqDefaultTypeInternal _SyncFromZeroGetSumHashReq_default_instance_;
class SyncFromZeroSumHash;
struct SyncFromZeroSumHashDefaultTypeInternal;
extern SyncFromZeroSumHashDefaultTypeInternal _SyncFromZeroSumHash_default_instance_;
class SyncGetBlockAck;
struct SyncGetBlockAckDefaultTypeInternal;
extern SyncGetBlockAckDefaultTypeInternal _SyncGetBlockAck_default_instance_;
class SyncGetBlockReq;
struct SyncGetBlockReqDefaultTypeInternal;
extern SyncGetBlockReqDefaultTypeInternal _SyncGetBlockReq_default_instance_;
class SyncGetHeightHashAck;
struct SyncGetHeightHashAckDefaultTypeInternal;
extern SyncGetHeightHashAckDefaultTypeInternal _SyncGetHeightHashAck_default_instance_;
class SyncGetHeightHashReq;
struct SyncGetHeightHashReqDefaultTypeInternal;
extern SyncGetHeightHashReqDefaultTypeInternal _SyncGetHeightHashReq_default_instance_;
class SyncGetSumHashAck;
struct SyncGetSumHashAckDefaultTypeInternal;
extern SyncGetSumHashAckDefaultTypeInternal _SyncGetSumHashAck_default_instance_;
class SyncGetSumHashReq;
struct SyncGetSumHashReqDefaultTypeInternal;
extern SyncGetSumHashReqDefaultTypeInternal _SyncGetSumHashReq_default_instance_;
class SyncNodeHashAck;
struct SyncNodeHashAckDefaultTypeInternal;
extern SyncNodeHashAckDefaultTypeInternal _SyncNodeHashAck_default_instance_;
class SyncNodeHashReq;
struct SyncNodeHashReqDefaultTypeInternal;
extern SyncNodeHashReqDefaultTypeInternal _SyncNodeHashReq_default_instance_;
class SyncSumHash;
struct SyncSumHashDefaultTypeInternal;
extern SyncSumHashDefaultTypeInternal _SyncSumHash_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FastSyncBlock* Arena::CreateMaybeMessage<::FastSyncBlock>(Arena*);
template<> ::FastSyncBlockHashs* Arena::CreateMaybeMessage<::FastSyncBlockHashs>(Arena*);
template<> ::FastSyncGetBlockAck* Arena::CreateMaybeMessage<::FastSyncGetBlockAck>(Arena*);
template<> ::FastSyncGetBlockReq* Arena::CreateMaybeMessage<::FastSyncGetBlockReq>(Arena*);
template<> ::FastSyncGetHashAck* Arena::CreateMaybeMessage<::FastSyncGetHashAck>(Arena*);
template<> ::FastSyncGetHashReq* Arena::CreateMaybeMessage<::FastSyncGetHashReq>(Arena*);
template<> ::GetBlockByHashAck* Arena::CreateMaybeMessage<::GetBlockByHashAck>(Arena*);
template<> ::GetBlockByHashReq* Arena::CreateMaybeMessage<::GetBlockByHashReq>(Arena*);
template<> ::GetBlockByUtxoAck* Arena::CreateMaybeMessage<::GetBlockByUtxoAck>(Arena*);
template<> ::GetBlockByUtxoReq* Arena::CreateMaybeMessage<::GetBlockByUtxoReq>(Arena*);
template<> ::GetCheckSumHashAck* Arena::CreateMaybeMessage<::GetCheckSumHashAck>(Arena*);
template<> ::GetCheckSumHashReq* Arena::CreateMaybeMessage<::GetCheckSumHashReq>(Arena*);
template<> ::HashType* Arena::CreateMaybeMessage<::HashType>(Arena*);
template<> ::SyncFromZeroGetBlockAck* Arena::CreateMaybeMessage<::SyncFromZeroGetBlockAck>(Arena*);
template<> ::SyncFromZeroGetBlockReq* Arena::CreateMaybeMessage<::SyncFromZeroGetBlockReq>(Arena*);
template<> ::SyncFromZeroGetSumHashAck* Arena::CreateMaybeMessage<::SyncFromZeroGetSumHashAck>(Arena*);
template<> ::SyncFromZeroGetSumHashReq* Arena::CreateMaybeMessage<::SyncFromZeroGetSumHashReq>(Arena*);
template<> ::SyncFromZeroSumHash* Arena::CreateMaybeMessage<::SyncFromZeroSumHash>(Arena*);
template<> ::SyncGetBlockAck* Arena::CreateMaybeMessage<::SyncGetBlockAck>(Arena*);
template<> ::SyncGetBlockReq* Arena::CreateMaybeMessage<::SyncGetBlockReq>(Arena*);
template<> ::SyncGetHeightHashAck* Arena::CreateMaybeMessage<::SyncGetHeightHashAck>(Arena*);
template<> ::SyncGetHeightHashReq* Arena::CreateMaybeMessage<::SyncGetHeightHashReq>(Arena*);
template<> ::SyncGetSumHashAck* Arena::CreateMaybeMessage<::SyncGetSumHashAck>(Arena*);
template<> ::SyncGetSumHashReq* Arena::CreateMaybeMessage<::SyncGetSumHashReq>(Arena*);
template<> ::SyncNodeHashAck* Arena::CreateMaybeMessage<::SyncNodeHashAck>(Arena*);
template<> ::SyncNodeHashReq* Arena::CreateMaybeMessage<::SyncNodeHashReq>(Arena*);
template<> ::SyncSumHash* Arena::CreateMaybeMessage<::SyncSumHash>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FastSyncGetHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FastSyncGetHashReq) */ {
 public:
  inline FastSyncGetHashReq() : FastSyncGetHashReq(nullptr) {}
  ~FastSyncGetHashReq() override;
  explicit PROTOBUF_CONSTEXPR FastSyncGetHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastSyncGetHashReq(const FastSyncGetHashReq& from);
  FastSyncGetHashReq(FastSyncGetHashReq&& from) noexcept
    : FastSyncGetHashReq() {
    *this = ::std::move(from);
  }

  inline FastSyncGetHashReq& operator=(const FastSyncGetHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastSyncGetHashReq& operator=(FastSyncGetHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastSyncGetHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastSyncGetHashReq* internal_default_instance() {
    return reinterpret_cast<const FastSyncGetHashReq*>(
               &_FastSyncGetHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FastSyncGetHashReq& a, FastSyncGetHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FastSyncGetHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastSyncGetHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastSyncGetHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastSyncGetHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastSyncGetHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastSyncGetHashReq& from) {
    FastSyncGetHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastSyncGetHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FastSyncGetHashReq";
  }
  protected:
  explicit FastSyncGetHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kStartHeightFieldNumber = 3,
    kEndHeightFieldNumber = 4,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 start_height = 3;
  void clear_start_height();
  uint64_t start_height() const;
  void set_start_height(uint64_t value);
  private:
  uint64_t _internal_start_height() const;
  void _internal_set_start_height(uint64_t value);
  public:

  // uint64 end_height = 4;
  void clear_end_height();
  uint64_t end_height() const;
  void set_end_height(uint64_t value);
  private:
  uint64_t _internal_end_height() const;
  void _internal_set_end_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FastSyncGetHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t start_height_;
    uint64_t end_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class FastSyncBlockHashs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FastSyncBlockHashs) */ {
 public:
  inline FastSyncBlockHashs() : FastSyncBlockHashs(nullptr) {}
  ~FastSyncBlockHashs() override;
  explicit PROTOBUF_CONSTEXPR FastSyncBlockHashs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastSyncBlockHashs(const FastSyncBlockHashs& from);
  FastSyncBlockHashs(FastSyncBlockHashs&& from) noexcept
    : FastSyncBlockHashs() {
    *this = ::std::move(from);
  }

  inline FastSyncBlockHashs& operator=(const FastSyncBlockHashs& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastSyncBlockHashs& operator=(FastSyncBlockHashs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastSyncBlockHashs& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastSyncBlockHashs* internal_default_instance() {
    return reinterpret_cast<const FastSyncBlockHashs*>(
               &_FastSyncBlockHashs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FastSyncBlockHashs& a, FastSyncBlockHashs& b) {
    a.Swap(&b);
  }
  inline void Swap(FastSyncBlockHashs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastSyncBlockHashs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastSyncBlockHashs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastSyncBlockHashs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastSyncBlockHashs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastSyncBlockHashs& from) {
    FastSyncBlockHashs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastSyncBlockHashs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FastSyncBlockHashs";
  }
  protected:
  explicit FastSyncBlockHashs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashsFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // repeated string hashs = 2;
  int hashs_size() const;
  private:
  int _internal_hashs_size() const;
  public:
  void clear_hashs();
  const std::string& hashs(int index) const;
  std::string* mutable_hashs(int index);
  void set_hashs(int index, const std::string& value);
  void set_hashs(int index, std::string&& value);
  void set_hashs(int index, const char* value);
  void set_hashs(int index, const char* value, size_t size);
  std::string* add_hashs();
  void add_hashs(const std::string& value);
  void add_hashs(std::string&& value);
  void add_hashs(const char* value);
  void add_hashs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashs();
  private:
  const std::string& _internal_hashs(int index) const;
  std::string* _internal_add_hashs();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FastSyncBlockHashs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashs_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class FastSyncGetHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FastSyncGetHashAck) */ {
 public:
  inline FastSyncGetHashAck() : FastSyncGetHashAck(nullptr) {}
  ~FastSyncGetHashAck() override;
  explicit PROTOBUF_CONSTEXPR FastSyncGetHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastSyncGetHashAck(const FastSyncGetHashAck& from);
  FastSyncGetHashAck(FastSyncGetHashAck&& from) noexcept
    : FastSyncGetHashAck() {
    *this = ::std::move(from);
  }

  inline FastSyncGetHashAck& operator=(const FastSyncGetHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastSyncGetHashAck& operator=(FastSyncGetHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastSyncGetHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastSyncGetHashAck* internal_default_instance() {
    return reinterpret_cast<const FastSyncGetHashAck*>(
               &_FastSyncGetHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FastSyncGetHashAck& a, FastSyncGetHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(FastSyncGetHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastSyncGetHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastSyncGetHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastSyncGetHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastSyncGetHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastSyncGetHashAck& from) {
    FastSyncGetHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastSyncGetHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FastSyncGetHashAck";
  }
  protected:
  explicit FastSyncGetHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashsFieldNumber = 4,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kNodeBlockHeightFieldNumber = 3,
  };
  // repeated .FastSyncBlockHashs hashs = 4;
  int hashs_size() const;
  private:
  int _internal_hashs_size() const;
  public:
  void clear_hashs();
  ::FastSyncBlockHashs* mutable_hashs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >*
      mutable_hashs();
  private:
  const ::FastSyncBlockHashs& _internal_hashs(int index) const;
  ::FastSyncBlockHashs* _internal_add_hashs();
  public:
  const ::FastSyncBlockHashs& hashs(int index) const;
  ::FastSyncBlockHashs* add_hashs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >&
      hashs() const;

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 node_block_height = 3;
  void clear_node_block_height();
  uint64_t node_block_height() const;
  void set_node_block_height(uint64_t value);
  private:
  uint64_t _internal_node_block_height() const;
  void _internal_set_node_block_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FastSyncGetHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs > hashs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t node_block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class FastSyncGetBlockReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FastSyncGetBlockReq) */ {
 public:
  inline FastSyncGetBlockReq() : FastSyncGetBlockReq(nullptr) {}
  ~FastSyncGetBlockReq() override;
  explicit PROTOBUF_CONSTEXPR FastSyncGetBlockReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastSyncGetBlockReq(const FastSyncGetBlockReq& from);
  FastSyncGetBlockReq(FastSyncGetBlockReq&& from) noexcept
    : FastSyncGetBlockReq() {
    *this = ::std::move(from);
  }

  inline FastSyncGetBlockReq& operator=(const FastSyncGetBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastSyncGetBlockReq& operator=(FastSyncGetBlockReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastSyncGetBlockReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastSyncGetBlockReq* internal_default_instance() {
    return reinterpret_cast<const FastSyncGetBlockReq*>(
               &_FastSyncGetBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FastSyncGetBlockReq& a, FastSyncGetBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FastSyncGetBlockReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastSyncGetBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastSyncGetBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastSyncGetBlockReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastSyncGetBlockReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastSyncGetBlockReq& from) {
    FastSyncGetBlockReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastSyncGetBlockReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FastSyncGetBlockReq";
  }
  protected:
  explicit FastSyncGetBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashsFieldNumber = 3,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // repeated .FastSyncBlockHashs hashs = 3;
  int hashs_size() const;
  private:
  int _internal_hashs_size() const;
  public:
  void clear_hashs();
  ::FastSyncBlockHashs* mutable_hashs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >*
      mutable_hashs();
  private:
  const ::FastSyncBlockHashs& _internal_hashs(int index) const;
  ::FastSyncBlockHashs* _internal_add_hashs();
  public:
  const ::FastSyncBlockHashs& hashs(int index) const;
  ::FastSyncBlockHashs* add_hashs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >&
      hashs() const;

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:FastSyncGetBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs > hashs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class FastSyncBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FastSyncBlock) */ {
 public:
  inline FastSyncBlock() : FastSyncBlock(nullptr) {}
  ~FastSyncBlock() override;
  explicit PROTOBUF_CONSTEXPR FastSyncBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastSyncBlock(const FastSyncBlock& from);
  FastSyncBlock(FastSyncBlock&& from) noexcept
    : FastSyncBlock() {
    *this = ::std::move(from);
  }

  inline FastSyncBlock& operator=(const FastSyncBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastSyncBlock& operator=(FastSyncBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastSyncBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastSyncBlock* internal_default_instance() {
    return reinterpret_cast<const FastSyncBlock*>(
               &_FastSyncBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FastSyncBlock& a, FastSyncBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(FastSyncBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastSyncBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastSyncBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastSyncBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastSyncBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastSyncBlock& from) {
    FastSyncBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastSyncBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FastSyncBlock";
  }
  protected:
  explicit FastSyncBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // repeated bytes blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  const std::string& blocks(int index) const;
  std::string* mutable_blocks(int index);
  void set_blocks(int index, const std::string& value);
  void set_blocks(int index, std::string&& value);
  void set_blocks(int index, const char* value);
  void set_blocks(int index, const void* value, size_t size);
  std::string* add_blocks();
  void add_blocks(const std::string& value);
  void add_blocks(std::string&& value);
  void add_blocks(const char* value);
  void add_blocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks();
  private:
  const std::string& _internal_blocks(int index) const;
  std::string* _internal_add_blocks();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FastSyncBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class FastSyncGetBlockAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FastSyncGetBlockAck) */ {
 public:
  inline FastSyncGetBlockAck() : FastSyncGetBlockAck(nullptr) {}
  ~FastSyncGetBlockAck() override;
  explicit PROTOBUF_CONSTEXPR FastSyncGetBlockAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastSyncGetBlockAck(const FastSyncGetBlockAck& from);
  FastSyncGetBlockAck(FastSyncGetBlockAck&& from) noexcept
    : FastSyncGetBlockAck() {
    *this = ::std::move(from);
  }

  inline FastSyncGetBlockAck& operator=(const FastSyncGetBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastSyncGetBlockAck& operator=(FastSyncGetBlockAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastSyncGetBlockAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastSyncGetBlockAck* internal_default_instance() {
    return reinterpret_cast<const FastSyncGetBlockAck*>(
               &_FastSyncGetBlockAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FastSyncGetBlockAck& a, FastSyncGetBlockAck& b) {
    a.Swap(&b);
  }
  inline void Swap(FastSyncGetBlockAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastSyncGetBlockAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastSyncGetBlockAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastSyncGetBlockAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastSyncGetBlockAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastSyncGetBlockAck& from) {
    FastSyncGetBlockAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastSyncGetBlockAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FastSyncGetBlockAck";
  }
  protected:
  explicit FastSyncGetBlockAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kMsgIdFieldNumber = 1,
  };
  // repeated .FastSyncBlock blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::FastSyncBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlock >*
      mutable_blocks();
  private:
  const ::FastSyncBlock& _internal_blocks(int index) const;
  ::FastSyncBlock* _internal_add_blocks();
  public:
  const ::FastSyncBlock& blocks(int index) const;
  ::FastSyncBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlock >&
      blocks() const;

  // string msg_id = 1;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:FastSyncGetBlockAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlock > blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncGetSumHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetSumHashReq) */ {
 public:
  inline SyncGetSumHashReq() : SyncGetSumHashReq(nullptr) {}
  ~SyncGetSumHashReq() override;
  explicit PROTOBUF_CONSTEXPR SyncGetSumHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetSumHashReq(const SyncGetSumHashReq& from);
  SyncGetSumHashReq(SyncGetSumHashReq&& from) noexcept
    : SyncGetSumHashReq() {
    *this = ::std::move(from);
  }

  inline SyncGetSumHashReq& operator=(const SyncGetSumHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetSumHashReq& operator=(SyncGetSumHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetSumHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetSumHashReq* internal_default_instance() {
    return reinterpret_cast<const SyncGetSumHashReq*>(
               &_SyncGetSumHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncGetSumHashReq& a, SyncGetSumHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetSumHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetSumHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetSumHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetSumHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetSumHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetSumHashReq& from) {
    SyncGetSumHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetSumHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetSumHashReq";
  }
  protected:
  explicit SyncGetSumHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kStartHeightFieldNumber = 3,
    kEndHeightFieldNumber = 4,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 start_height = 3;
  void clear_start_height();
  uint64_t start_height() const;
  void set_start_height(uint64_t value);
  private:
  uint64_t _internal_start_height() const;
  void _internal_set_start_height(uint64_t value);
  public:

  // uint64 end_height = 4;
  void clear_end_height();
  uint64_t end_height() const;
  void set_end_height(uint64_t value);
  private:
  uint64_t _internal_end_height() const;
  void _internal_set_end_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncGetSumHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t start_height_;
    uint64_t end_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncSumHash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncSumHash) */ {
 public:
  inline SyncSumHash() : SyncSumHash(nullptr) {}
  ~SyncSumHash() override;
  explicit PROTOBUF_CONSTEXPR SyncSumHash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncSumHash(const SyncSumHash& from);
  SyncSumHash(SyncSumHash&& from) noexcept
    : SyncSumHash() {
    *this = ::std::move(from);
  }

  inline SyncSumHash& operator=(const SyncSumHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncSumHash& operator=(SyncSumHash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncSumHash& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncSumHash* internal_default_instance() {
    return reinterpret_cast<const SyncSumHash*>(
               &_SyncSumHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SyncSumHash& a, SyncSumHash& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncSumHash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncSumHash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncSumHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncSumHash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncSumHash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncSumHash& from) {
    SyncSumHash::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncSumHash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncSumHash";
  }
  protected:
  explicit SyncSumHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 3,
    kStartHeightFieldNumber = 1,
    kEndHeightFieldNumber = 2,
  };
  // string hash = 3;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 start_height = 1;
  void clear_start_height();
  uint64_t start_height() const;
  void set_start_height(uint64_t value);
  private:
  uint64_t _internal_start_height() const;
  void _internal_set_start_height(uint64_t value);
  public:

  // uint64 end_height = 2;
  void clear_end_height();
  uint64_t end_height() const;
  void set_end_height(uint64_t value);
  private:
  uint64_t _internal_end_height() const;
  void _internal_set_end_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncSumHash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    uint64_t start_height_;
    uint64_t end_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncGetSumHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetSumHashAck) */ {
 public:
  inline SyncGetSumHashAck() : SyncGetSumHashAck(nullptr) {}
  ~SyncGetSumHashAck() override;
  explicit PROTOBUF_CONSTEXPR SyncGetSumHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetSumHashAck(const SyncGetSumHashAck& from);
  SyncGetSumHashAck(SyncGetSumHashAck&& from) noexcept
    : SyncGetSumHashAck() {
    *this = ::std::move(from);
  }

  inline SyncGetSumHashAck& operator=(const SyncGetSumHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetSumHashAck& operator=(SyncGetSumHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetSumHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetSumHashAck* internal_default_instance() {
    return reinterpret_cast<const SyncGetSumHashAck*>(
               &_SyncGetSumHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SyncGetSumHashAck& a, SyncGetSumHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetSumHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetSumHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetSumHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetSumHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetSumHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetSumHashAck& from) {
    SyncGetSumHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetSumHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetSumHashAck";
  }
  protected:
  explicit SyncGetSumHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncSumHashesFieldNumber = 4,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kNodeBlockHeightFieldNumber = 3,
  };
  // repeated .SyncSumHash sync_sum_hashes = 4;
  int sync_sum_hashes_size() const;
  private:
  int _internal_sync_sum_hashes_size() const;
  public:
  void clear_sync_sum_hashes();
  ::SyncSumHash* mutable_sync_sum_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncSumHash >*
      mutable_sync_sum_hashes();
  private:
  const ::SyncSumHash& _internal_sync_sum_hashes(int index) const;
  ::SyncSumHash* _internal_add_sync_sum_hashes();
  public:
  const ::SyncSumHash& sync_sum_hashes(int index) const;
  ::SyncSumHash* add_sync_sum_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncSumHash >&
      sync_sum_hashes() const;

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 node_block_height = 3;
  void clear_node_block_height();
  uint64_t node_block_height() const;
  void set_node_block_height(uint64_t value);
  private:
  uint64_t _internal_node_block_height() const;
  void _internal_set_node_block_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncGetSumHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncSumHash > sync_sum_hashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t node_block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncGetHeightHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetHeightHashReq) */ {
 public:
  inline SyncGetHeightHashReq() : SyncGetHeightHashReq(nullptr) {}
  ~SyncGetHeightHashReq() override;
  explicit PROTOBUF_CONSTEXPR SyncGetHeightHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetHeightHashReq(const SyncGetHeightHashReq& from);
  SyncGetHeightHashReq(SyncGetHeightHashReq&& from) noexcept
    : SyncGetHeightHashReq() {
    *this = ::std::move(from);
  }

  inline SyncGetHeightHashReq& operator=(const SyncGetHeightHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetHeightHashReq& operator=(SyncGetHeightHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetHeightHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetHeightHashReq* internal_default_instance() {
    return reinterpret_cast<const SyncGetHeightHashReq*>(
               &_SyncGetHeightHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SyncGetHeightHashReq& a, SyncGetHeightHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetHeightHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetHeightHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetHeightHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetHeightHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetHeightHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetHeightHashReq& from) {
    SyncGetHeightHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetHeightHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetHeightHashReq";
  }
  protected:
  explicit SyncGetHeightHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kStartHeightFieldNumber = 3,
    kEndHeightFieldNumber = 4,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 start_height = 3;
  void clear_start_height();
  uint64_t start_height() const;
  void set_start_height(uint64_t value);
  private:
  uint64_t _internal_start_height() const;
  void _internal_set_start_height(uint64_t value);
  public:

  // uint64 end_height = 4;
  void clear_end_height();
  uint64_t end_height() const;
  void set_end_height(uint64_t value);
  private:
  uint64_t _internal_end_height() const;
  void _internal_set_end_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncGetHeightHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t start_height_;
    uint64_t end_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncGetHeightHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetHeightHashAck) */ {
 public:
  inline SyncGetHeightHashAck() : SyncGetHeightHashAck(nullptr) {}
  ~SyncGetHeightHashAck() override;
  explicit PROTOBUF_CONSTEXPR SyncGetHeightHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetHeightHashAck(const SyncGetHeightHashAck& from);
  SyncGetHeightHashAck(SyncGetHeightHashAck&& from) noexcept
    : SyncGetHeightHashAck() {
    *this = ::std::move(from);
  }

  inline SyncGetHeightHashAck& operator=(const SyncGetHeightHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetHeightHashAck& operator=(SyncGetHeightHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetHeightHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetHeightHashAck* internal_default_instance() {
    return reinterpret_cast<const SyncGetHeightHashAck*>(
               &_SyncGetHeightHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SyncGetHeightHashAck& a, SyncGetHeightHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetHeightHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetHeightHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetHeightHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetHeightHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetHeightHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetHeightHashAck& from) {
    SyncGetHeightHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetHeightHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetHeightHashAck";
  }
  protected:
  explicit SyncGetHeightHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashesFieldNumber = 4,
    kSelfNodeIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // repeated string block_hashes = 4;
  int block_hashes_size() const;
  private:
  int _internal_block_hashes_size() const;
  public:
  void clear_block_hashes();
  const std::string& block_hashes(int index) const;
  std::string* mutable_block_hashes(int index);
  void set_block_hashes(int index, const std::string& value);
  void set_block_hashes(int index, std::string&& value);
  void set_block_hashes(int index, const char* value);
  void set_block_hashes(int index, const char* value, size_t size);
  std::string* add_block_hashes();
  void add_block_hashes(const std::string& value);
  void add_block_hashes(std::string&& value);
  void add_block_hashes(const char* value);
  void add_block_hashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_hashes();
  private:
  const std::string& _internal_block_hashes(int index) const;
  std::string* _internal_add_block_hashes();
  public:

  // string self_node_id = 2;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncGetHeightHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_hashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncGetBlockReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetBlockReq) */ {
 public:
  inline SyncGetBlockReq() : SyncGetBlockReq(nullptr) {}
  ~SyncGetBlockReq() override;
  explicit PROTOBUF_CONSTEXPR SyncGetBlockReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetBlockReq(const SyncGetBlockReq& from);
  SyncGetBlockReq(SyncGetBlockReq&& from) noexcept
    : SyncGetBlockReq() {
    *this = ::std::move(from);
  }

  inline SyncGetBlockReq& operator=(const SyncGetBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetBlockReq& operator=(SyncGetBlockReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetBlockReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetBlockReq* internal_default_instance() {
    return reinterpret_cast<const SyncGetBlockReq*>(
               &_SyncGetBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SyncGetBlockReq& a, SyncGetBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetBlockReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetBlockReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetBlockReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetBlockReq& from) {
    SyncGetBlockReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetBlockReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetBlockReq";
  }
  protected:
  explicit SyncGetBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashesFieldNumber = 3,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // repeated string block_hashes = 3;
  int block_hashes_size() const;
  private:
  int _internal_block_hashes_size() const;
  public:
  void clear_block_hashes();
  const std::string& block_hashes(int index) const;
  std::string* mutable_block_hashes(int index);
  void set_block_hashes(int index, const std::string& value);
  void set_block_hashes(int index, std::string&& value);
  void set_block_hashes(int index, const char* value);
  void set_block_hashes(int index, const char* value, size_t size);
  std::string* add_block_hashes();
  void add_block_hashes(const std::string& value);
  void add_block_hashes(std::string&& value);
  void add_block_hashes(const char* value);
  void add_block_hashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_hashes();
  private:
  const std::string& _internal_block_hashes(int index) const;
  std::string* _internal_add_block_hashes();
  public:

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncGetBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_hashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncGetBlockAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetBlockAck) */ {
 public:
  inline SyncGetBlockAck() : SyncGetBlockAck(nullptr) {}
  ~SyncGetBlockAck() override;
  explicit PROTOBUF_CONSTEXPR SyncGetBlockAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetBlockAck(const SyncGetBlockAck& from);
  SyncGetBlockAck(SyncGetBlockAck&& from) noexcept
    : SyncGetBlockAck() {
    *this = ::std::move(from);
  }

  inline SyncGetBlockAck& operator=(const SyncGetBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetBlockAck& operator=(SyncGetBlockAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetBlockAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetBlockAck* internal_default_instance() {
    return reinterpret_cast<const SyncGetBlockAck*>(
               &_SyncGetBlockAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SyncGetBlockAck& a, SyncGetBlockAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetBlockAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetBlockAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetBlockAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetBlockAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetBlockAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetBlockAck& from) {
    SyncGetBlockAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetBlockAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetBlockAck";
  }
  protected:
  explicit SyncGetBlockAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kMsgIdFieldNumber = 1,
  };
  // repeated bytes blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  const std::string& blocks(int index) const;
  std::string* mutable_blocks(int index);
  void set_blocks(int index, const std::string& value);
  void set_blocks(int index, std::string&& value);
  void set_blocks(int index, const char* value);
  void set_blocks(int index, const void* value, size_t size);
  std::string* add_blocks();
  void add_blocks(const std::string& value);
  void add_blocks(std::string&& value);
  void add_blocks(const char* value);
  void add_blocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks();
  private:
  const std::string& _internal_blocks(int index) const;
  std::string* _internal_add_blocks();
  public:

  // string msg_id = 1;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncGetBlockAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncFromZeroSumHash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncFromZeroSumHash) */ {
 public:
  inline SyncFromZeroSumHash() : SyncFromZeroSumHash(nullptr) {}
  ~SyncFromZeroSumHash() override;
  explicit PROTOBUF_CONSTEXPR SyncFromZeroSumHash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncFromZeroSumHash(const SyncFromZeroSumHash& from);
  SyncFromZeroSumHash(SyncFromZeroSumHash&& from) noexcept
    : SyncFromZeroSumHash() {
    *this = ::std::move(from);
  }

  inline SyncFromZeroSumHash& operator=(const SyncFromZeroSumHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncFromZeroSumHash& operator=(SyncFromZeroSumHash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncFromZeroSumHash& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncFromZeroSumHash* internal_default_instance() {
    return reinterpret_cast<const SyncFromZeroSumHash*>(
               &_SyncFromZeroSumHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SyncFromZeroSumHash& a, SyncFromZeroSumHash& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncFromZeroSumHash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncFromZeroSumHash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncFromZeroSumHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncFromZeroSumHash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncFromZeroSumHash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncFromZeroSumHash& from) {
    SyncFromZeroSumHash::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncFromZeroSumHash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncFromZeroSumHash";
  }
  protected:
  explicit SyncFromZeroSumHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncFromZeroSumHash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncFromZeroGetSumHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncFromZeroGetSumHashReq) */ {
 public:
  inline SyncFromZeroGetSumHashReq() : SyncFromZeroGetSumHashReq(nullptr) {}
  ~SyncFromZeroGetSumHashReq() override;
  explicit PROTOBUF_CONSTEXPR SyncFromZeroGetSumHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncFromZeroGetSumHashReq(const SyncFromZeroGetSumHashReq& from);
  SyncFromZeroGetSumHashReq(SyncFromZeroGetSumHashReq&& from) noexcept
    : SyncFromZeroGetSumHashReq() {
    *this = ::std::move(from);
  }

  inline SyncFromZeroGetSumHashReq& operator=(const SyncFromZeroGetSumHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncFromZeroGetSumHashReq& operator=(SyncFromZeroGetSumHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncFromZeroGetSumHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncFromZeroGetSumHashReq* internal_default_instance() {
    return reinterpret_cast<const SyncFromZeroGetSumHashReq*>(
               &_SyncFromZeroGetSumHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SyncFromZeroGetSumHashReq& a, SyncFromZeroGetSumHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncFromZeroGetSumHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncFromZeroGetSumHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncFromZeroGetSumHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncFromZeroGetSumHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncFromZeroGetSumHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncFromZeroGetSumHashReq& from) {
    SyncFromZeroGetSumHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncFromZeroGetSumHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncFromZeroGetSumHashReq";
  }
  protected:
  explicit SyncFromZeroGetSumHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 3,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // repeated uint64 heights = 3;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncFromZeroGetSumHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
    mutable std::atomic<int> _heights_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncFromZeroGetSumHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncFromZeroGetSumHashAck) */ {
 public:
  inline SyncFromZeroGetSumHashAck() : SyncFromZeroGetSumHashAck(nullptr) {}
  ~SyncFromZeroGetSumHashAck() override;
  explicit PROTOBUF_CONSTEXPR SyncFromZeroGetSumHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncFromZeroGetSumHashAck(const SyncFromZeroGetSumHashAck& from);
  SyncFromZeroGetSumHashAck(SyncFromZeroGetSumHashAck&& from) noexcept
    : SyncFromZeroGetSumHashAck() {
    *this = ::std::move(from);
  }

  inline SyncFromZeroGetSumHashAck& operator=(const SyncFromZeroGetSumHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncFromZeroGetSumHashAck& operator=(SyncFromZeroGetSumHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncFromZeroGetSumHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncFromZeroGetSumHashAck* internal_default_instance() {
    return reinterpret_cast<const SyncFromZeroGetSumHashAck*>(
               &_SyncFromZeroGetSumHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SyncFromZeroGetSumHashAck& a, SyncFromZeroGetSumHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncFromZeroGetSumHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncFromZeroGetSumHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncFromZeroGetSumHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncFromZeroGetSumHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncFromZeroGetSumHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncFromZeroGetSumHashAck& from) {
    SyncFromZeroGetSumHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncFromZeroGetSumHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncFromZeroGetSumHashAck";
  }
  protected:
  explicit SyncFromZeroGetSumHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSumHashesFieldNumber = 4,
    kSelfNodeIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // repeated .SyncFromZeroSumHash sum_hashes = 4;
  int sum_hashes_size() const;
  private:
  int _internal_sum_hashes_size() const;
  public:
  void clear_sum_hashes();
  ::SyncFromZeroSumHash* mutable_sum_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncFromZeroSumHash >*
      mutable_sum_hashes();
  private:
  const ::SyncFromZeroSumHash& _internal_sum_hashes(int index) const;
  ::SyncFromZeroSumHash* _internal_add_sum_hashes();
  public:
  const ::SyncFromZeroSumHash& sum_hashes(int index) const;
  ::SyncFromZeroSumHash* add_sum_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncFromZeroSumHash >&
      sum_hashes() const;

  // string self_node_id = 2;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncFromZeroGetSumHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncFromZeroSumHash > sum_hashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncFromZeroGetBlockReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncFromZeroGetBlockReq) */ {
 public:
  inline SyncFromZeroGetBlockReq() : SyncFromZeroGetBlockReq(nullptr) {}
  ~SyncFromZeroGetBlockReq() override;
  explicit PROTOBUF_CONSTEXPR SyncFromZeroGetBlockReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncFromZeroGetBlockReq(const SyncFromZeroGetBlockReq& from);
  SyncFromZeroGetBlockReq(SyncFromZeroGetBlockReq&& from) noexcept
    : SyncFromZeroGetBlockReq() {
    *this = ::std::move(from);
  }

  inline SyncFromZeroGetBlockReq& operator=(const SyncFromZeroGetBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncFromZeroGetBlockReq& operator=(SyncFromZeroGetBlockReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncFromZeroGetBlockReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncFromZeroGetBlockReq* internal_default_instance() {
    return reinterpret_cast<const SyncFromZeroGetBlockReq*>(
               &_SyncFromZeroGetBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SyncFromZeroGetBlockReq& a, SyncFromZeroGetBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncFromZeroGetBlockReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncFromZeroGetBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncFromZeroGetBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncFromZeroGetBlockReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncFromZeroGetBlockReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncFromZeroGetBlockReq& from) {
    SyncFromZeroGetBlockReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncFromZeroGetBlockReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncFromZeroGetBlockReq";
  }
  protected:
  explicit SyncFromZeroGetBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 height = 3;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncFromZeroGetBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncFromZeroGetBlockAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncFromZeroGetBlockAck) */ {
 public:
  inline SyncFromZeroGetBlockAck() : SyncFromZeroGetBlockAck(nullptr) {}
  ~SyncFromZeroGetBlockAck() override;
  explicit PROTOBUF_CONSTEXPR SyncFromZeroGetBlockAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncFromZeroGetBlockAck(const SyncFromZeroGetBlockAck& from);
  SyncFromZeroGetBlockAck(SyncFromZeroGetBlockAck&& from) noexcept
    : SyncFromZeroGetBlockAck() {
    *this = ::std::move(from);
  }

  inline SyncFromZeroGetBlockAck& operator=(const SyncFromZeroGetBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncFromZeroGetBlockAck& operator=(SyncFromZeroGetBlockAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncFromZeroGetBlockAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncFromZeroGetBlockAck* internal_default_instance() {
    return reinterpret_cast<const SyncFromZeroGetBlockAck*>(
               &_SyncFromZeroGetBlockAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SyncFromZeroGetBlockAck& a, SyncFromZeroGetBlockAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncFromZeroGetBlockAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncFromZeroGetBlockAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncFromZeroGetBlockAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncFromZeroGetBlockAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncFromZeroGetBlockAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncFromZeroGetBlockAck& from) {
    SyncFromZeroGetBlockAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncFromZeroGetBlockAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncFromZeroGetBlockAck";
  }
  protected:
  explicit SyncFromZeroGetBlockAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 4,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated bytes blocks = 4;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  const std::string& blocks(int index) const;
  std::string* mutable_blocks(int index);
  void set_blocks(int index, const std::string& value);
  void set_blocks(int index, std::string&& value);
  void set_blocks(int index, const char* value);
  void set_blocks(int index, const void* value, size_t size);
  std::string* add_blocks();
  void add_blocks(const std::string& value);
  void add_blocks(std::string&& value);
  void add_blocks(const char* value);
  void add_blocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks();
  private:
  const std::string& _internal_blocks(int index) const;
  std::string* _internal_add_blocks();
  public:

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 height = 3;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncFromZeroGetBlockAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class GetBlockByUtxoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockByUtxoReq) */ {
 public:
  inline GetBlockByUtxoReq() : GetBlockByUtxoReq(nullptr) {}
  ~GetBlockByUtxoReq() override;
  explicit PROTOBUF_CONSTEXPR GetBlockByUtxoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockByUtxoReq(const GetBlockByUtxoReq& from);
  GetBlockByUtxoReq(GetBlockByUtxoReq&& from) noexcept
    : GetBlockByUtxoReq() {
    *this = ::std::move(from);
  }

  inline GetBlockByUtxoReq& operator=(const GetBlockByUtxoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockByUtxoReq& operator=(GetBlockByUtxoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockByUtxoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockByUtxoReq* internal_default_instance() {
    return reinterpret_cast<const GetBlockByUtxoReq*>(
               &_GetBlockByUtxoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetBlockByUtxoReq& a, GetBlockByUtxoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockByUtxoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockByUtxoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockByUtxoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockByUtxoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockByUtxoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockByUtxoReq& from) {
    GetBlockByUtxoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockByUtxoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockByUtxoReq";
  }
  protected:
  explicit GetBlockByUtxoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kUtxoFieldNumber = 2,
    kMsgIdFieldNumber = 3,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string utxo = 2;
  void clear_utxo();
  const std::string& utxo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxo();
  PROTOBUF_NODISCARD std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:GetBlockByUtxoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class GetBlockByUtxoAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockByUtxoAck) */ {
 public:
  inline GetBlockByUtxoAck() : GetBlockByUtxoAck(nullptr) {}
  ~GetBlockByUtxoAck() override;
  explicit PROTOBUF_CONSTEXPR GetBlockByUtxoAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockByUtxoAck(const GetBlockByUtxoAck& from);
  GetBlockByUtxoAck(GetBlockByUtxoAck&& from) noexcept
    : GetBlockByUtxoAck() {
    *this = ::std::move(from);
  }

  inline GetBlockByUtxoAck& operator=(const GetBlockByUtxoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockByUtxoAck& operator=(GetBlockByUtxoAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockByUtxoAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockByUtxoAck* internal_default_instance() {
    return reinterpret_cast<const GetBlockByUtxoAck*>(
               &_GetBlockByUtxoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetBlockByUtxoAck& a, GetBlockByUtxoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockByUtxoAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockByUtxoAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockByUtxoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockByUtxoAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockByUtxoAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockByUtxoAck& from) {
    GetBlockByUtxoAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockByUtxoAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockByUtxoAck";
  }
  protected:
  explicit GetBlockByUtxoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kUtxoFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kBlockRawFieldNumber = 4,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string utxo = 2;
  void clear_utxo();
  const std::string& utxo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxo();
  PROTOBUF_NODISCARD std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // bytes block_raw = 4;
  void clear_block_raw();
  const std::string& block_raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_raw();
  PROTOBUF_NODISCARD std::string* release_block_raw();
  void set_allocated_block_raw(std::string* block_raw);
  private:
  const std::string& _internal_block_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_raw(const std::string& value);
  std::string* _internal_mutable_block_raw();
  public:

  // @@protoc_insertion_point(class_scope:GetBlockByUtxoAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_raw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class HashType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HashType) */ {
 public:
  inline HashType() : HashType(nullptr) {}
  ~HashType() override;
  explicit PROTOBUF_CONSTEXPR HashType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashType(const HashType& from);
  HashType(HashType&& from) noexcept
    : HashType() {
    *this = ::std::move(from);
  }

  inline HashType& operator=(const HashType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashType& operator=(HashType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashType& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashType* internal_default_instance() {
    return reinterpret_cast<const HashType*>(
               &_HashType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HashType& a, HashType& b) {
    a.Swap(&b);
  }
  inline void Swap(HashType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HashType& from) {
    HashType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HashType";
  }
  protected:
  explicit HashType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kBlockRawFieldNumber = 3,
    kTxOrBlockFieldNumber = 2,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes block_raw = 3;
  void clear_block_raw();
  const std::string& block_raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_raw();
  PROTOBUF_NODISCARD std::string* release_block_raw();
  void set_allocated_block_raw(std::string* block_raw);
  private:
  const std::string& _internal_block_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_raw(const std::string& value);
  std::string* _internal_mutable_block_raw();
  public:

  // bool tx_or_block = 2;
  void clear_tx_or_block();
  bool tx_or_block() const;
  void set_tx_or_block(bool value);
  private:
  bool _internal_tx_or_block() const;
  void _internal_set_tx_or_block(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HashType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_raw_;
    bool tx_or_block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class GetBlockByHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockByHashReq) */ {
 public:
  inline GetBlockByHashReq() : GetBlockByHashReq(nullptr) {}
  ~GetBlockByHashReq() override;
  explicit PROTOBUF_CONSTEXPR GetBlockByHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockByHashReq(const GetBlockByHashReq& from);
  GetBlockByHashReq(GetBlockByHashReq&& from) noexcept
    : GetBlockByHashReq() {
    *this = ::std::move(from);
  }

  inline GetBlockByHashReq& operator=(const GetBlockByHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockByHashReq& operator=(GetBlockByHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockByHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockByHashReq* internal_default_instance() {
    return reinterpret_cast<const GetBlockByHashReq*>(
               &_GetBlockByHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetBlockByHashReq& a, GetBlockByHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockByHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockByHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockByHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockByHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockByHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockByHashReq& from) {
    GetBlockByHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockByHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockByHashReq";
  }
  protected:
  explicit GetBlockByHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissingHashsFieldNumber = 2,
    kAddrFieldNumber = 1,
    kMsgIdFieldNumber = 3,
  };
  // repeated .HashType missingHashs = 2;
  int missinghashs_size() const;
  private:
  int _internal_missinghashs_size() const;
  public:
  void clear_missinghashs();
  ::HashType* mutable_missinghashs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >*
      mutable_missinghashs();
  private:
  const ::HashType& _internal_missinghashs(int index) const;
  ::HashType* _internal_add_missinghashs();
  public:
  const ::HashType& missinghashs(int index) const;
  ::HashType* add_missinghashs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >&
      missinghashs() const;

  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:GetBlockByHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType > missinghashs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class GetBlockByHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockByHashAck) */ {
 public:
  inline GetBlockByHashAck() : GetBlockByHashAck(nullptr) {}
  ~GetBlockByHashAck() override;
  explicit PROTOBUF_CONSTEXPR GetBlockByHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockByHashAck(const GetBlockByHashAck& from);
  GetBlockByHashAck(GetBlockByHashAck&& from) noexcept
    : GetBlockByHashAck() {
    *this = ::std::move(from);
  }

  inline GetBlockByHashAck& operator=(const GetBlockByHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockByHashAck& operator=(GetBlockByHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockByHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockByHashAck* internal_default_instance() {
    return reinterpret_cast<const GetBlockByHashAck*>(
               &_GetBlockByHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetBlockByHashAck& a, GetBlockByHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockByHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockByHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockByHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockByHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockByHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockByHashAck& from) {
    GetBlockByHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockByHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockByHashAck";
  }
  protected:
  explicit GetBlockByHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kAddrFieldNumber = 1,
    kMsgIdFieldNumber = 3,
  };
  // repeated .HashType blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::HashType* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >*
      mutable_blocks();
  private:
  const ::HashType& _internal_blocks(int index) const;
  ::HashType* _internal_add_blocks();
  public:
  const ::HashType& blocks(int index) const;
  ::HashType* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >&
      blocks() const;

  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:GetBlockByHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType > blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncNodeHashReq) */ {
 public:
  inline SyncNodeHashReq() : SyncNodeHashReq(nullptr) {}
  ~SyncNodeHashReq() override;
  explicit PROTOBUF_CONSTEXPR SyncNodeHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNodeHashReq(const SyncNodeHashReq& from);
  SyncNodeHashReq(SyncNodeHashReq&& from) noexcept
    : SyncNodeHashReq() {
    *this = ::std::move(from);
  }

  inline SyncNodeHashReq& operator=(const SyncNodeHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeHashReq& operator=(SyncNodeHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNodeHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNodeHashReq* internal_default_instance() {
    return reinterpret_cast<const SyncNodeHashReq*>(
               &_SyncNodeHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SyncNodeHashReq& a, SyncNodeHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNodeHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNodeHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNodeHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNodeHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncNodeHashReq& from) {
    SyncNodeHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncNodeHashReq";
  }
  protected:
  explicit SyncNodeHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncNodeHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncNodeHashAck) */ {
 public:
  inline SyncNodeHashAck() : SyncNodeHashAck(nullptr) {}
  ~SyncNodeHashAck() override;
  explicit PROTOBUF_CONSTEXPR SyncNodeHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNodeHashAck(const SyncNodeHashAck& from);
  SyncNodeHashAck(SyncNodeHashAck&& from) noexcept
    : SyncNodeHashAck() {
    *this = ::std::move(from);
  }

  inline SyncNodeHashAck& operator=(const SyncNodeHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeHashAck& operator=(SyncNodeHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNodeHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNodeHashAck* internal_default_instance() {
    return reinterpret_cast<const SyncNodeHashAck*>(
               &_SyncNodeHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SyncNodeHashAck& a, SyncNodeHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNodeHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNodeHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNodeHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNodeHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncNodeHashAck& from) {
    SyncNodeHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncNodeHashAck";
  }
  protected:
  explicit SyncNodeHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kHashFieldNumber = 3,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string hash = 3;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:SyncNodeHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class GetCheckSumHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetCheckSumHashReq) */ {
 public:
  inline GetCheckSumHashReq() : GetCheckSumHashReq(nullptr) {}
  ~GetCheckSumHashReq() override;
  explicit PROTOBUF_CONSTEXPR GetCheckSumHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCheckSumHashReq(const GetCheckSumHashReq& from);
  GetCheckSumHashReq(GetCheckSumHashReq&& from) noexcept
    : GetCheckSumHashReq() {
    *this = ::std::move(from);
  }

  inline GetCheckSumHashReq& operator=(const GetCheckSumHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCheckSumHashReq& operator=(GetCheckSumHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCheckSumHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCheckSumHashReq* internal_default_instance() {
    return reinterpret_cast<const GetCheckSumHashReq*>(
               &_GetCheckSumHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetCheckSumHashReq& a, GetCheckSumHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCheckSumHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCheckSumHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCheckSumHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCheckSumHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCheckSumHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCheckSumHashReq& from) {
    GetCheckSumHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCheckSumHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetCheckSumHashReq";
  }
  protected:
  explicit GetCheckSumHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 2,
    kSelfNodeIdFieldNumber = 3,
    kHeightFieldNumber = 1,
  };
  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string self_node_id = 3;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetCheckSumHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// -------------------------------------------------------------------

class GetCheckSumHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetCheckSumHashAck) */ {
 public:
  inline GetCheckSumHashAck() : GetCheckSumHashAck(nullptr) {}
  ~GetCheckSumHashAck() override;
  explicit PROTOBUF_CONSTEXPR GetCheckSumHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCheckSumHashAck(const GetCheckSumHashAck& from);
  GetCheckSumHashAck(GetCheckSumHashAck&& from) noexcept
    : GetCheckSumHashAck() {
    *this = ::std::move(from);
  }

  inline GetCheckSumHashAck& operator=(const GetCheckSumHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCheckSumHashAck& operator=(GetCheckSumHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCheckSumHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCheckSumHashAck* internal_default_instance() {
    return reinterpret_cast<const GetCheckSumHashAck*>(
               &_GetCheckSumHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetCheckSumHashAck& a, GetCheckSumHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCheckSumHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCheckSumHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCheckSumHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCheckSumHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCheckSumHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCheckSumHashAck& from) {
    GetCheckSumHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCheckSumHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetCheckSumHashAck";
  }
  protected:
  explicit GetCheckSumHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kSelfNodeIdFieldNumber = 5,
    kHeightFieldNumber = 1,
    kSuccessFieldNumber = 4,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string msg_id = 3;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string self_node_id = 5;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // uint64 height = 1;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GetCheckSumHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    uint64_t height_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FastSyncGetHashReq

// string self_node_id = 1;
inline void FastSyncGetHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetHashReq.self_node_id)
}
inline std::string* FastSyncGetHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetHashReq.self_node_id)
  return _s;
}
inline const std::string& FastSyncGetHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void FastSyncGetHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void FastSyncGetHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetHashReq.self_node_id)
}

// string msg_id = 2;
inline void FastSyncGetHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetHashReq.msg_id)
}
inline std::string* FastSyncGetHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetHashReq.msg_id)
  return _s;
}
inline const std::string& FastSyncGetHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void FastSyncGetHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void FastSyncGetHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetHashReq.msg_id)
}

// uint64 start_height = 3;
inline void FastSyncGetHashReq::clear_start_height() {
  _impl_.start_height_ = uint64_t{0u};
}
inline uint64_t FastSyncGetHashReq::_internal_start_height() const {
  return _impl_.start_height_;
}
inline uint64_t FastSyncGetHashReq::start_height() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashReq.start_height)
  return _internal_start_height();
}
inline void FastSyncGetHashReq::_internal_set_start_height(uint64_t value) {
  
  _impl_.start_height_ = value;
}
inline void FastSyncGetHashReq::set_start_height(uint64_t value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:FastSyncGetHashReq.start_height)
}

// uint64 end_height = 4;
inline void FastSyncGetHashReq::clear_end_height() {
  _impl_.end_height_ = uint64_t{0u};
}
inline uint64_t FastSyncGetHashReq::_internal_end_height() const {
  return _impl_.end_height_;
}
inline uint64_t FastSyncGetHashReq::end_height() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashReq.end_height)
  return _internal_end_height();
}
inline void FastSyncGetHashReq::_internal_set_end_height(uint64_t value) {
  
  _impl_.end_height_ = value;
}
inline void FastSyncGetHashReq::set_end_height(uint64_t value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:FastSyncGetHashReq.end_height)
}

// -------------------------------------------------------------------

// FastSyncBlockHashs

// uint64 height = 1;
inline void FastSyncBlockHashs::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t FastSyncBlockHashs::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t FastSyncBlockHashs::height() const {
  // @@protoc_insertion_point(field_get:FastSyncBlockHashs.height)
  return _internal_height();
}
inline void FastSyncBlockHashs::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void FastSyncBlockHashs::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:FastSyncBlockHashs.height)
}

// repeated string hashs = 2;
inline int FastSyncBlockHashs::_internal_hashs_size() const {
  return _impl_.hashs_.size();
}
inline int FastSyncBlockHashs::hashs_size() const {
  return _internal_hashs_size();
}
inline void FastSyncBlockHashs::clear_hashs() {
  _impl_.hashs_.Clear();
}
inline std::string* FastSyncBlockHashs::add_hashs() {
  std::string* _s = _internal_add_hashs();
  // @@protoc_insertion_point(field_add_mutable:FastSyncBlockHashs.hashs)
  return _s;
}
inline const std::string& FastSyncBlockHashs::_internal_hashs(int index) const {
  return _impl_.hashs_.Get(index);
}
inline const std::string& FastSyncBlockHashs::hashs(int index) const {
  // @@protoc_insertion_point(field_get:FastSyncBlockHashs.hashs)
  return _internal_hashs(index);
}
inline std::string* FastSyncBlockHashs::mutable_hashs(int index) {
  // @@protoc_insertion_point(field_mutable:FastSyncBlockHashs.hashs)
  return _impl_.hashs_.Mutable(index);
}
inline void FastSyncBlockHashs::set_hashs(int index, const std::string& value) {
  _impl_.hashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:FastSyncBlockHashs.hashs)
}
inline void FastSyncBlockHashs::set_hashs(int index, std::string&& value) {
  _impl_.hashs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:FastSyncBlockHashs.hashs)
}
inline void FastSyncBlockHashs::set_hashs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FastSyncBlockHashs.hashs)
}
inline void FastSyncBlockHashs::set_hashs(int index, const char* value, size_t size) {
  _impl_.hashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FastSyncBlockHashs.hashs)
}
inline std::string* FastSyncBlockHashs::_internal_add_hashs() {
  return _impl_.hashs_.Add();
}
inline void FastSyncBlockHashs::add_hashs(const std::string& value) {
  _impl_.hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FastSyncBlockHashs.hashs)
}
inline void FastSyncBlockHashs::add_hashs(std::string&& value) {
  _impl_.hashs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FastSyncBlockHashs.hashs)
}
inline void FastSyncBlockHashs::add_hashs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FastSyncBlockHashs.hashs)
}
inline void FastSyncBlockHashs::add_hashs(const char* value, size_t size) {
  _impl_.hashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FastSyncBlockHashs.hashs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FastSyncBlockHashs::hashs() const {
  // @@protoc_insertion_point(field_list:FastSyncBlockHashs.hashs)
  return _impl_.hashs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FastSyncBlockHashs::mutable_hashs() {
  // @@protoc_insertion_point(field_mutable_list:FastSyncBlockHashs.hashs)
  return &_impl_.hashs_;
}

// -------------------------------------------------------------------

// FastSyncGetHashAck

// string self_node_id = 1;
inline void FastSyncGetHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetHashAck.self_node_id)
}
inline std::string* FastSyncGetHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetHashAck.self_node_id)
  return _s;
}
inline const std::string& FastSyncGetHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void FastSyncGetHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void FastSyncGetHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetHashAck.self_node_id)
}

// string msg_id = 2;
inline void FastSyncGetHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetHashAck.msg_id)
}
inline std::string* FastSyncGetHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetHashAck.msg_id)
  return _s;
}
inline const std::string& FastSyncGetHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void FastSyncGetHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void FastSyncGetHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetHashAck.msg_id)
}

// uint64 node_block_height = 3;
inline void FastSyncGetHashAck::clear_node_block_height() {
  _impl_.node_block_height_ = uint64_t{0u};
}
inline uint64_t FastSyncGetHashAck::_internal_node_block_height() const {
  return _impl_.node_block_height_;
}
inline uint64_t FastSyncGetHashAck::node_block_height() const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashAck.node_block_height)
  return _internal_node_block_height();
}
inline void FastSyncGetHashAck::_internal_set_node_block_height(uint64_t value) {
  
  _impl_.node_block_height_ = value;
}
inline void FastSyncGetHashAck::set_node_block_height(uint64_t value) {
  _internal_set_node_block_height(value);
  // @@protoc_insertion_point(field_set:FastSyncGetHashAck.node_block_height)
}

// repeated .FastSyncBlockHashs hashs = 4;
inline int FastSyncGetHashAck::_internal_hashs_size() const {
  return _impl_.hashs_.size();
}
inline int FastSyncGetHashAck::hashs_size() const {
  return _internal_hashs_size();
}
inline void FastSyncGetHashAck::clear_hashs() {
  _impl_.hashs_.Clear();
}
inline ::FastSyncBlockHashs* FastSyncGetHashAck::mutable_hashs(int index) {
  // @@protoc_insertion_point(field_mutable:FastSyncGetHashAck.hashs)
  return _impl_.hashs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >*
FastSyncGetHashAck::mutable_hashs() {
  // @@protoc_insertion_point(field_mutable_list:FastSyncGetHashAck.hashs)
  return &_impl_.hashs_;
}
inline const ::FastSyncBlockHashs& FastSyncGetHashAck::_internal_hashs(int index) const {
  return _impl_.hashs_.Get(index);
}
inline const ::FastSyncBlockHashs& FastSyncGetHashAck::hashs(int index) const {
  // @@protoc_insertion_point(field_get:FastSyncGetHashAck.hashs)
  return _internal_hashs(index);
}
inline ::FastSyncBlockHashs* FastSyncGetHashAck::_internal_add_hashs() {
  return _impl_.hashs_.Add();
}
inline ::FastSyncBlockHashs* FastSyncGetHashAck::add_hashs() {
  ::FastSyncBlockHashs* _add = _internal_add_hashs();
  // @@protoc_insertion_point(field_add:FastSyncGetHashAck.hashs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >&
FastSyncGetHashAck::hashs() const {
  // @@protoc_insertion_point(field_list:FastSyncGetHashAck.hashs)
  return _impl_.hashs_;
}

// -------------------------------------------------------------------

// FastSyncGetBlockReq

// string self_node_id = 1;
inline void FastSyncGetBlockReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetBlockReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetBlockReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetBlockReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetBlockReq.self_node_id)
}
inline std::string* FastSyncGetBlockReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetBlockReq.self_node_id)
  return _s;
}
inline const std::string& FastSyncGetBlockReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void FastSyncGetBlockReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetBlockReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetBlockReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetBlockReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void FastSyncGetBlockReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetBlockReq.self_node_id)
}

// string msg_id = 2;
inline void FastSyncGetBlockReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetBlockReq::msg_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetBlockReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetBlockReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetBlockReq.msg_id)
}
inline std::string* FastSyncGetBlockReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetBlockReq.msg_id)
  return _s;
}
inline const std::string& FastSyncGetBlockReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void FastSyncGetBlockReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetBlockReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetBlockReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetBlockReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void FastSyncGetBlockReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetBlockReq.msg_id)
}

// repeated .FastSyncBlockHashs hashs = 3;
inline int FastSyncGetBlockReq::_internal_hashs_size() const {
  return _impl_.hashs_.size();
}
inline int FastSyncGetBlockReq::hashs_size() const {
  return _internal_hashs_size();
}
inline void FastSyncGetBlockReq::clear_hashs() {
  _impl_.hashs_.Clear();
}
inline ::FastSyncBlockHashs* FastSyncGetBlockReq::mutable_hashs(int index) {
  // @@protoc_insertion_point(field_mutable:FastSyncGetBlockReq.hashs)
  return _impl_.hashs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >*
FastSyncGetBlockReq::mutable_hashs() {
  // @@protoc_insertion_point(field_mutable_list:FastSyncGetBlockReq.hashs)
  return &_impl_.hashs_;
}
inline const ::FastSyncBlockHashs& FastSyncGetBlockReq::_internal_hashs(int index) const {
  return _impl_.hashs_.Get(index);
}
inline const ::FastSyncBlockHashs& FastSyncGetBlockReq::hashs(int index) const {
  // @@protoc_insertion_point(field_get:FastSyncGetBlockReq.hashs)
  return _internal_hashs(index);
}
inline ::FastSyncBlockHashs* FastSyncGetBlockReq::_internal_add_hashs() {
  return _impl_.hashs_.Add();
}
inline ::FastSyncBlockHashs* FastSyncGetBlockReq::add_hashs() {
  ::FastSyncBlockHashs* _add = _internal_add_hashs();
  // @@protoc_insertion_point(field_add:FastSyncGetBlockReq.hashs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlockHashs >&
FastSyncGetBlockReq::hashs() const {
  // @@protoc_insertion_point(field_list:FastSyncGetBlockReq.hashs)
  return _impl_.hashs_;
}

// -------------------------------------------------------------------

// FastSyncBlock

// uint64 height = 1;
inline void FastSyncBlock::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t FastSyncBlock::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t FastSyncBlock::height() const {
  // @@protoc_insertion_point(field_get:FastSyncBlock.height)
  return _internal_height();
}
inline void FastSyncBlock::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void FastSyncBlock::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:FastSyncBlock.height)
}

// repeated bytes blocks = 2;
inline int FastSyncBlock::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int FastSyncBlock::blocks_size() const {
  return _internal_blocks_size();
}
inline void FastSyncBlock::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline std::string* FastSyncBlock::add_blocks() {
  std::string* _s = _internal_add_blocks();
  // @@protoc_insertion_point(field_add_mutable:FastSyncBlock.blocks)
  return _s;
}
inline const std::string& FastSyncBlock::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const std::string& FastSyncBlock::blocks(int index) const {
  // @@protoc_insertion_point(field_get:FastSyncBlock.blocks)
  return _internal_blocks(index);
}
inline std::string* FastSyncBlock::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:FastSyncBlock.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline void FastSyncBlock::set_blocks(int index, const std::string& value) {
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:FastSyncBlock.blocks)
}
inline void FastSyncBlock::set_blocks(int index, std::string&& value) {
  _impl_.blocks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:FastSyncBlock.blocks)
}
inline void FastSyncBlock::set_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FastSyncBlock.blocks)
}
inline void FastSyncBlock::set_blocks(int index, const void* value, size_t size) {
  _impl_.blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FastSyncBlock.blocks)
}
inline std::string* FastSyncBlock::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline void FastSyncBlock::add_blocks(const std::string& value) {
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FastSyncBlock.blocks)
}
inline void FastSyncBlock::add_blocks(std::string&& value) {
  _impl_.blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FastSyncBlock.blocks)
}
inline void FastSyncBlock::add_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FastSyncBlock.blocks)
}
inline void FastSyncBlock::add_blocks(const void* value, size_t size) {
  _impl_.blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FastSyncBlock.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FastSyncBlock::blocks() const {
  // @@protoc_insertion_point(field_list:FastSyncBlock.blocks)
  return _impl_.blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FastSyncBlock::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:FastSyncBlock.blocks)
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// FastSyncGetBlockAck

// string msg_id = 1;
inline void FastSyncGetBlockAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& FastSyncGetBlockAck::msg_id() const {
  // @@protoc_insertion_point(field_get:FastSyncGetBlockAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastSyncGetBlockAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FastSyncGetBlockAck.msg_id)
}
inline std::string* FastSyncGetBlockAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:FastSyncGetBlockAck.msg_id)
  return _s;
}
inline const std::string& FastSyncGetBlockAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void FastSyncGetBlockAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FastSyncGetBlockAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FastSyncGetBlockAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:FastSyncGetBlockAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void FastSyncGetBlockAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FastSyncGetBlockAck.msg_id)
}

// repeated .FastSyncBlock blocks = 2;
inline int FastSyncGetBlockAck::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int FastSyncGetBlockAck::blocks_size() const {
  return _internal_blocks_size();
}
inline void FastSyncGetBlockAck::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline ::FastSyncBlock* FastSyncGetBlockAck::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:FastSyncGetBlockAck.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlock >*
FastSyncGetBlockAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:FastSyncGetBlockAck.blocks)
  return &_impl_.blocks_;
}
inline const ::FastSyncBlock& FastSyncGetBlockAck::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::FastSyncBlock& FastSyncGetBlockAck::blocks(int index) const {
  // @@protoc_insertion_point(field_get:FastSyncGetBlockAck.blocks)
  return _internal_blocks(index);
}
inline ::FastSyncBlock* FastSyncGetBlockAck::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::FastSyncBlock* FastSyncGetBlockAck::add_blocks() {
  ::FastSyncBlock* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:FastSyncGetBlockAck.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FastSyncBlock >&
FastSyncGetBlockAck::blocks() const {
  // @@protoc_insertion_point(field_list:FastSyncGetBlockAck.blocks)
  return _impl_.blocks_;
}

// -------------------------------------------------------------------

// SyncGetSumHashReq

// string self_node_id = 1;
inline void SyncGetSumHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncGetSumHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetSumHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetSumHashReq.self_node_id)
}
inline std::string* SyncGetSumHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncGetSumHashReq.self_node_id)
  return _s;
}
inline const std::string& SyncGetSumHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncGetSumHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetSumHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetSumHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncGetSumHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncGetSumHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetSumHashReq.self_node_id)
}

// string msg_id = 2;
inline void SyncGetSumHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncGetSumHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetSumHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetSumHashReq.msg_id)
}
inline std::string* SyncGetSumHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncGetSumHashReq.msg_id)
  return _s;
}
inline const std::string& SyncGetSumHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncGetSumHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetSumHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetSumHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncGetSumHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncGetSumHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetSumHashReq.msg_id)
}

// uint64 start_height = 3;
inline void SyncGetSumHashReq::clear_start_height() {
  _impl_.start_height_ = uint64_t{0u};
}
inline uint64_t SyncGetSumHashReq::_internal_start_height() const {
  return _impl_.start_height_;
}
inline uint64_t SyncGetSumHashReq::start_height() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashReq.start_height)
  return _internal_start_height();
}
inline void SyncGetSumHashReq::_internal_set_start_height(uint64_t value) {
  
  _impl_.start_height_ = value;
}
inline void SyncGetSumHashReq::set_start_height(uint64_t value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:SyncGetSumHashReq.start_height)
}

// uint64 end_height = 4;
inline void SyncGetSumHashReq::clear_end_height() {
  _impl_.end_height_ = uint64_t{0u};
}
inline uint64_t SyncGetSumHashReq::_internal_end_height() const {
  return _impl_.end_height_;
}
inline uint64_t SyncGetSumHashReq::end_height() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashReq.end_height)
  return _internal_end_height();
}
inline void SyncGetSumHashReq::_internal_set_end_height(uint64_t value) {
  
  _impl_.end_height_ = value;
}
inline void SyncGetSumHashReq::set_end_height(uint64_t value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:SyncGetSumHashReq.end_height)
}

// -------------------------------------------------------------------

// SyncSumHash

// uint64 start_height = 1;
inline void SyncSumHash::clear_start_height() {
  _impl_.start_height_ = uint64_t{0u};
}
inline uint64_t SyncSumHash::_internal_start_height() const {
  return _impl_.start_height_;
}
inline uint64_t SyncSumHash::start_height() const {
  // @@protoc_insertion_point(field_get:SyncSumHash.start_height)
  return _internal_start_height();
}
inline void SyncSumHash::_internal_set_start_height(uint64_t value) {
  
  _impl_.start_height_ = value;
}
inline void SyncSumHash::set_start_height(uint64_t value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:SyncSumHash.start_height)
}

// uint64 end_height = 2;
inline void SyncSumHash::clear_end_height() {
  _impl_.end_height_ = uint64_t{0u};
}
inline uint64_t SyncSumHash::_internal_end_height() const {
  return _impl_.end_height_;
}
inline uint64_t SyncSumHash::end_height() const {
  // @@protoc_insertion_point(field_get:SyncSumHash.end_height)
  return _internal_end_height();
}
inline void SyncSumHash::_internal_set_end_height(uint64_t value) {
  
  _impl_.end_height_ = value;
}
inline void SyncSumHash::set_end_height(uint64_t value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:SyncSumHash.end_height)
}

// string hash = 3;
inline void SyncSumHash::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& SyncSumHash::hash() const {
  // @@protoc_insertion_point(field_get:SyncSumHash.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncSumHash::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncSumHash.hash)
}
inline std::string* SyncSumHash::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:SyncSumHash.hash)
  return _s;
}
inline const std::string& SyncSumHash::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void SyncSumHash::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncSumHash::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncSumHash::release_hash() {
  // @@protoc_insertion_point(field_release:SyncSumHash.hash)
  return _impl_.hash_.Release();
}
inline void SyncSumHash::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncSumHash.hash)
}

// -------------------------------------------------------------------

// SyncGetSumHashAck

// string self_node_id = 1;
inline void SyncGetSumHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncGetSumHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetSumHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetSumHashAck.self_node_id)
}
inline std::string* SyncGetSumHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncGetSumHashAck.self_node_id)
  return _s;
}
inline const std::string& SyncGetSumHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncGetSumHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetSumHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetSumHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncGetSumHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncGetSumHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetSumHashAck.self_node_id)
}

// string msg_id = 2;
inline void SyncGetSumHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncGetSumHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetSumHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetSumHashAck.msg_id)
}
inline std::string* SyncGetSumHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncGetSumHashAck.msg_id)
  return _s;
}
inline const std::string& SyncGetSumHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncGetSumHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetSumHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetSumHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncGetSumHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncGetSumHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetSumHashAck.msg_id)
}

// uint64 node_block_height = 3;
inline void SyncGetSumHashAck::clear_node_block_height() {
  _impl_.node_block_height_ = uint64_t{0u};
}
inline uint64_t SyncGetSumHashAck::_internal_node_block_height() const {
  return _impl_.node_block_height_;
}
inline uint64_t SyncGetSumHashAck::node_block_height() const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashAck.node_block_height)
  return _internal_node_block_height();
}
inline void SyncGetSumHashAck::_internal_set_node_block_height(uint64_t value) {
  
  _impl_.node_block_height_ = value;
}
inline void SyncGetSumHashAck::set_node_block_height(uint64_t value) {
  _internal_set_node_block_height(value);
  // @@protoc_insertion_point(field_set:SyncGetSumHashAck.node_block_height)
}

// repeated .SyncSumHash sync_sum_hashes = 4;
inline int SyncGetSumHashAck::_internal_sync_sum_hashes_size() const {
  return _impl_.sync_sum_hashes_.size();
}
inline int SyncGetSumHashAck::sync_sum_hashes_size() const {
  return _internal_sync_sum_hashes_size();
}
inline void SyncGetSumHashAck::clear_sync_sum_hashes() {
  _impl_.sync_sum_hashes_.Clear();
}
inline ::SyncSumHash* SyncGetSumHashAck::mutable_sync_sum_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:SyncGetSumHashAck.sync_sum_hashes)
  return _impl_.sync_sum_hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncSumHash >*
SyncGetSumHashAck::mutable_sync_sum_hashes() {
  // @@protoc_insertion_point(field_mutable_list:SyncGetSumHashAck.sync_sum_hashes)
  return &_impl_.sync_sum_hashes_;
}
inline const ::SyncSumHash& SyncGetSumHashAck::_internal_sync_sum_hashes(int index) const {
  return _impl_.sync_sum_hashes_.Get(index);
}
inline const ::SyncSumHash& SyncGetSumHashAck::sync_sum_hashes(int index) const {
  // @@protoc_insertion_point(field_get:SyncGetSumHashAck.sync_sum_hashes)
  return _internal_sync_sum_hashes(index);
}
inline ::SyncSumHash* SyncGetSumHashAck::_internal_add_sync_sum_hashes() {
  return _impl_.sync_sum_hashes_.Add();
}
inline ::SyncSumHash* SyncGetSumHashAck::add_sync_sum_hashes() {
  ::SyncSumHash* _add = _internal_add_sync_sum_hashes();
  // @@protoc_insertion_point(field_add:SyncGetSumHashAck.sync_sum_hashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncSumHash >&
SyncGetSumHashAck::sync_sum_hashes() const {
  // @@protoc_insertion_point(field_list:SyncGetSumHashAck.sync_sum_hashes)
  return _impl_.sync_sum_hashes_;
}

// -------------------------------------------------------------------

// SyncGetHeightHashReq

// string self_node_id = 1;
inline void SyncGetHeightHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncGetHeightHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetHeightHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetHeightHashReq.self_node_id)
}
inline std::string* SyncGetHeightHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncGetHeightHashReq.self_node_id)
  return _s;
}
inline const std::string& SyncGetHeightHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncGetHeightHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncGetHeightHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncGetHeightHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetHeightHashReq.self_node_id)
}

// string msg_id = 2;
inline void SyncGetHeightHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncGetHeightHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetHeightHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetHeightHashReq.msg_id)
}
inline std::string* SyncGetHeightHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncGetHeightHashReq.msg_id)
  return _s;
}
inline const std::string& SyncGetHeightHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncGetHeightHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncGetHeightHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncGetHeightHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetHeightHashReq.msg_id)
}

// uint64 start_height = 3;
inline void SyncGetHeightHashReq::clear_start_height() {
  _impl_.start_height_ = uint64_t{0u};
}
inline uint64_t SyncGetHeightHashReq::_internal_start_height() const {
  return _impl_.start_height_;
}
inline uint64_t SyncGetHeightHashReq::start_height() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashReq.start_height)
  return _internal_start_height();
}
inline void SyncGetHeightHashReq::_internal_set_start_height(uint64_t value) {
  
  _impl_.start_height_ = value;
}
inline void SyncGetHeightHashReq::set_start_height(uint64_t value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:SyncGetHeightHashReq.start_height)
}

// uint64 end_height = 4;
inline void SyncGetHeightHashReq::clear_end_height() {
  _impl_.end_height_ = uint64_t{0u};
}
inline uint64_t SyncGetHeightHashReq::_internal_end_height() const {
  return _impl_.end_height_;
}
inline uint64_t SyncGetHeightHashReq::end_height() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashReq.end_height)
  return _internal_end_height();
}
inline void SyncGetHeightHashReq::_internal_set_end_height(uint64_t value) {
  
  _impl_.end_height_ = value;
}
inline void SyncGetHeightHashReq::set_end_height(uint64_t value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:SyncGetHeightHashReq.end_height)
}

// -------------------------------------------------------------------

// SyncGetHeightHashAck

// int32 code = 1;
inline void SyncGetHeightHashAck::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SyncGetHeightHashAck::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SyncGetHeightHashAck::code() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashAck.code)
  return _internal_code();
}
inline void SyncGetHeightHashAck::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SyncGetHeightHashAck::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SyncGetHeightHashAck.code)
}

// string self_node_id = 2;
inline void SyncGetHeightHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncGetHeightHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetHeightHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetHeightHashAck.self_node_id)
}
inline std::string* SyncGetHeightHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncGetHeightHashAck.self_node_id)
  return _s;
}
inline const std::string& SyncGetHeightHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncGetHeightHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncGetHeightHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncGetHeightHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetHeightHashAck.self_node_id)
}

// string msg_id = 3;
inline void SyncGetHeightHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncGetHeightHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetHeightHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetHeightHashAck.msg_id)
}
inline std::string* SyncGetHeightHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncGetHeightHashAck.msg_id)
  return _s;
}
inline const std::string& SyncGetHeightHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncGetHeightHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetHeightHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncGetHeightHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncGetHeightHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetHeightHashAck.msg_id)
}

// repeated string block_hashes = 4;
inline int SyncGetHeightHashAck::_internal_block_hashes_size() const {
  return _impl_.block_hashes_.size();
}
inline int SyncGetHeightHashAck::block_hashes_size() const {
  return _internal_block_hashes_size();
}
inline void SyncGetHeightHashAck::clear_block_hashes() {
  _impl_.block_hashes_.Clear();
}
inline std::string* SyncGetHeightHashAck::add_block_hashes() {
  std::string* _s = _internal_add_block_hashes();
  // @@protoc_insertion_point(field_add_mutable:SyncGetHeightHashAck.block_hashes)
  return _s;
}
inline const std::string& SyncGetHeightHashAck::_internal_block_hashes(int index) const {
  return _impl_.block_hashes_.Get(index);
}
inline const std::string& SyncGetHeightHashAck::block_hashes(int index) const {
  // @@protoc_insertion_point(field_get:SyncGetHeightHashAck.block_hashes)
  return _internal_block_hashes(index);
}
inline std::string* SyncGetHeightHashAck::mutable_block_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:SyncGetHeightHashAck.block_hashes)
  return _impl_.block_hashes_.Mutable(index);
}
inline void SyncGetHeightHashAck::set_block_hashes(int index, const std::string& value) {
  _impl_.block_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SyncGetHeightHashAck.block_hashes)
}
inline void SyncGetHeightHashAck::set_block_hashes(int index, std::string&& value) {
  _impl_.block_hashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SyncGetHeightHashAck.block_hashes)
}
inline void SyncGetHeightHashAck::set_block_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.block_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncGetHeightHashAck.block_hashes)
}
inline void SyncGetHeightHashAck::set_block_hashes(int index, const char* value, size_t size) {
  _impl_.block_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncGetHeightHashAck.block_hashes)
}
inline std::string* SyncGetHeightHashAck::_internal_add_block_hashes() {
  return _impl_.block_hashes_.Add();
}
inline void SyncGetHeightHashAck::add_block_hashes(const std::string& value) {
  _impl_.block_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncGetHeightHashAck.block_hashes)
}
inline void SyncGetHeightHashAck::add_block_hashes(std::string&& value) {
  _impl_.block_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncGetHeightHashAck.block_hashes)
}
inline void SyncGetHeightHashAck::add_block_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.block_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncGetHeightHashAck.block_hashes)
}
inline void SyncGetHeightHashAck::add_block_hashes(const char* value, size_t size) {
  _impl_.block_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncGetHeightHashAck.block_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncGetHeightHashAck::block_hashes() const {
  // @@protoc_insertion_point(field_list:SyncGetHeightHashAck.block_hashes)
  return _impl_.block_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncGetHeightHashAck::mutable_block_hashes() {
  // @@protoc_insertion_point(field_mutable_list:SyncGetHeightHashAck.block_hashes)
  return &_impl_.block_hashes_;
}

// -------------------------------------------------------------------

// SyncGetBlockReq

// string self_node_id = 1;
inline void SyncGetBlockReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncGetBlockReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncGetBlockReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetBlockReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetBlockReq.self_node_id)
}
inline std::string* SyncGetBlockReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncGetBlockReq.self_node_id)
  return _s;
}
inline const std::string& SyncGetBlockReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncGetBlockReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetBlockReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetBlockReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncGetBlockReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncGetBlockReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetBlockReq.self_node_id)
}

// string msg_id = 2;
inline void SyncGetBlockReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncGetBlockReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncGetBlockReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetBlockReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetBlockReq.msg_id)
}
inline std::string* SyncGetBlockReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncGetBlockReq.msg_id)
  return _s;
}
inline const std::string& SyncGetBlockReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncGetBlockReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetBlockReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetBlockReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncGetBlockReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncGetBlockReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetBlockReq.msg_id)
}

// repeated string block_hashes = 3;
inline int SyncGetBlockReq::_internal_block_hashes_size() const {
  return _impl_.block_hashes_.size();
}
inline int SyncGetBlockReq::block_hashes_size() const {
  return _internal_block_hashes_size();
}
inline void SyncGetBlockReq::clear_block_hashes() {
  _impl_.block_hashes_.Clear();
}
inline std::string* SyncGetBlockReq::add_block_hashes() {
  std::string* _s = _internal_add_block_hashes();
  // @@protoc_insertion_point(field_add_mutable:SyncGetBlockReq.block_hashes)
  return _s;
}
inline const std::string& SyncGetBlockReq::_internal_block_hashes(int index) const {
  return _impl_.block_hashes_.Get(index);
}
inline const std::string& SyncGetBlockReq::block_hashes(int index) const {
  // @@protoc_insertion_point(field_get:SyncGetBlockReq.block_hashes)
  return _internal_block_hashes(index);
}
inline std::string* SyncGetBlockReq::mutable_block_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:SyncGetBlockReq.block_hashes)
  return _impl_.block_hashes_.Mutable(index);
}
inline void SyncGetBlockReq::set_block_hashes(int index, const std::string& value) {
  _impl_.block_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SyncGetBlockReq.block_hashes)
}
inline void SyncGetBlockReq::set_block_hashes(int index, std::string&& value) {
  _impl_.block_hashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SyncGetBlockReq.block_hashes)
}
inline void SyncGetBlockReq::set_block_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.block_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncGetBlockReq.block_hashes)
}
inline void SyncGetBlockReq::set_block_hashes(int index, const char* value, size_t size) {
  _impl_.block_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncGetBlockReq.block_hashes)
}
inline std::string* SyncGetBlockReq::_internal_add_block_hashes() {
  return _impl_.block_hashes_.Add();
}
inline void SyncGetBlockReq::add_block_hashes(const std::string& value) {
  _impl_.block_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncGetBlockReq.block_hashes)
}
inline void SyncGetBlockReq::add_block_hashes(std::string&& value) {
  _impl_.block_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncGetBlockReq.block_hashes)
}
inline void SyncGetBlockReq::add_block_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.block_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncGetBlockReq.block_hashes)
}
inline void SyncGetBlockReq::add_block_hashes(const char* value, size_t size) {
  _impl_.block_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncGetBlockReq.block_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncGetBlockReq::block_hashes() const {
  // @@protoc_insertion_point(field_list:SyncGetBlockReq.block_hashes)
  return _impl_.block_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncGetBlockReq::mutable_block_hashes() {
  // @@protoc_insertion_point(field_mutable_list:SyncGetBlockReq.block_hashes)
  return &_impl_.block_hashes_;
}

// -------------------------------------------------------------------

// SyncGetBlockAck

// string msg_id = 1;
inline void SyncGetBlockAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncGetBlockAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncGetBlockAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncGetBlockAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncGetBlockAck.msg_id)
}
inline std::string* SyncGetBlockAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncGetBlockAck.msg_id)
  return _s;
}
inline const std::string& SyncGetBlockAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncGetBlockAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncGetBlockAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncGetBlockAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncGetBlockAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncGetBlockAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncGetBlockAck.msg_id)
}

// repeated bytes blocks = 2;
inline int SyncGetBlockAck::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int SyncGetBlockAck::blocks_size() const {
  return _internal_blocks_size();
}
inline void SyncGetBlockAck::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline std::string* SyncGetBlockAck::add_blocks() {
  std::string* _s = _internal_add_blocks();
  // @@protoc_insertion_point(field_add_mutable:SyncGetBlockAck.blocks)
  return _s;
}
inline const std::string& SyncGetBlockAck::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const std::string& SyncGetBlockAck::blocks(int index) const {
  // @@protoc_insertion_point(field_get:SyncGetBlockAck.blocks)
  return _internal_blocks(index);
}
inline std::string* SyncGetBlockAck::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:SyncGetBlockAck.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline void SyncGetBlockAck::set_blocks(int index, const std::string& value) {
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SyncGetBlockAck.blocks)
}
inline void SyncGetBlockAck::set_blocks(int index, std::string&& value) {
  _impl_.blocks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SyncGetBlockAck.blocks)
}
inline void SyncGetBlockAck::set_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncGetBlockAck.blocks)
}
inline void SyncGetBlockAck::set_blocks(int index, const void* value, size_t size) {
  _impl_.blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncGetBlockAck.blocks)
}
inline std::string* SyncGetBlockAck::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline void SyncGetBlockAck::add_blocks(const std::string& value) {
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncGetBlockAck.blocks)
}
inline void SyncGetBlockAck::add_blocks(std::string&& value) {
  _impl_.blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncGetBlockAck.blocks)
}
inline void SyncGetBlockAck::add_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncGetBlockAck.blocks)
}
inline void SyncGetBlockAck::add_blocks(const void* value, size_t size) {
  _impl_.blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncGetBlockAck.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncGetBlockAck::blocks() const {
  // @@protoc_insertion_point(field_list:SyncGetBlockAck.blocks)
  return _impl_.blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncGetBlockAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:SyncGetBlockAck.blocks)
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// SyncFromZeroSumHash

// uint64 height = 1;
inline void SyncFromZeroSumHash::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t SyncFromZeroSumHash::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t SyncFromZeroSumHash::height() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroSumHash.height)
  return _internal_height();
}
inline void SyncFromZeroSumHash::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void SyncFromZeroSumHash::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SyncFromZeroSumHash.height)
}

// string hash = 2;
inline void SyncFromZeroSumHash::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& SyncFromZeroSumHash::hash() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroSumHash.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroSumHash::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroSumHash.hash)
}
inline std::string* SyncFromZeroSumHash::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroSumHash.hash)
  return _s;
}
inline const std::string& SyncFromZeroSumHash::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void SyncFromZeroSumHash::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroSumHash::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroSumHash::release_hash() {
  // @@protoc_insertion_point(field_release:SyncFromZeroSumHash.hash)
  return _impl_.hash_.Release();
}
inline void SyncFromZeroSumHash::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroSumHash.hash)
}

// -------------------------------------------------------------------

// SyncFromZeroGetSumHashReq

// string self_node_id = 1;
inline void SyncFromZeroGetSumHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetSumHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetSumHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetSumHashReq.self_node_id)
}
inline std::string* SyncFromZeroGetSumHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetSumHashReq.self_node_id)
  return _s;
}
inline const std::string& SyncFromZeroGetSumHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncFromZeroGetSumHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetSumHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncFromZeroGetSumHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetSumHashReq.self_node_id)
}

// string msg_id = 2;
inline void SyncFromZeroGetSumHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetSumHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetSumHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetSumHashReq.msg_id)
}
inline std::string* SyncFromZeroGetSumHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetSumHashReq.msg_id)
  return _s;
}
inline const std::string& SyncFromZeroGetSumHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncFromZeroGetSumHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetSumHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncFromZeroGetSumHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetSumHashReq.msg_id)
}

// repeated uint64 heights = 3;
inline int SyncFromZeroGetSumHashReq::_internal_heights_size() const {
  return _impl_.heights_.size();
}
inline int SyncFromZeroGetSumHashReq::heights_size() const {
  return _internal_heights_size();
}
inline void SyncFromZeroGetSumHashReq::clear_heights() {
  _impl_.heights_.Clear();
}
inline uint64_t SyncFromZeroGetSumHashReq::_internal_heights(int index) const {
  return _impl_.heights_.Get(index);
}
inline uint64_t SyncFromZeroGetSumHashReq::heights(int index) const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashReq.heights)
  return _internal_heights(index);
}
inline void SyncFromZeroGetSumHashReq::set_heights(int index, uint64_t value) {
  _impl_.heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:SyncFromZeroGetSumHashReq.heights)
}
inline void SyncFromZeroGetSumHashReq::_internal_add_heights(uint64_t value) {
  _impl_.heights_.Add(value);
}
inline void SyncFromZeroGetSumHashReq::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:SyncFromZeroGetSumHashReq.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SyncFromZeroGetSumHashReq::_internal_heights() const {
  return _impl_.heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SyncFromZeroGetSumHashReq::heights() const {
  // @@protoc_insertion_point(field_list:SyncFromZeroGetSumHashReq.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SyncFromZeroGetSumHashReq::_internal_mutable_heights() {
  return &_impl_.heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SyncFromZeroGetSumHashReq::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:SyncFromZeroGetSumHashReq.heights)
  return _internal_mutable_heights();
}

// -------------------------------------------------------------------

// SyncFromZeroGetSumHashAck

// int32 code = 1;
inline void SyncFromZeroGetSumHashAck::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SyncFromZeroGetSumHashAck::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SyncFromZeroGetSumHashAck::code() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashAck.code)
  return _internal_code();
}
inline void SyncFromZeroGetSumHashAck::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SyncFromZeroGetSumHashAck::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SyncFromZeroGetSumHashAck.code)
}

// string self_node_id = 2;
inline void SyncFromZeroGetSumHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetSumHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetSumHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetSumHashAck.self_node_id)
}
inline std::string* SyncFromZeroGetSumHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetSumHashAck.self_node_id)
  return _s;
}
inline const std::string& SyncFromZeroGetSumHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncFromZeroGetSumHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetSumHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncFromZeroGetSumHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetSumHashAck.self_node_id)
}

// string msg_id = 3;
inline void SyncFromZeroGetSumHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetSumHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetSumHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetSumHashAck.msg_id)
}
inline std::string* SyncFromZeroGetSumHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetSumHashAck.msg_id)
  return _s;
}
inline const std::string& SyncFromZeroGetSumHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncFromZeroGetSumHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetSumHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetSumHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncFromZeroGetSumHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetSumHashAck.msg_id)
}

// repeated .SyncFromZeroSumHash sum_hashes = 4;
inline int SyncFromZeroGetSumHashAck::_internal_sum_hashes_size() const {
  return _impl_.sum_hashes_.size();
}
inline int SyncFromZeroGetSumHashAck::sum_hashes_size() const {
  return _internal_sum_hashes_size();
}
inline void SyncFromZeroGetSumHashAck::clear_sum_hashes() {
  _impl_.sum_hashes_.Clear();
}
inline ::SyncFromZeroSumHash* SyncFromZeroGetSumHashAck::mutable_sum_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetSumHashAck.sum_hashes)
  return _impl_.sum_hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncFromZeroSumHash >*
SyncFromZeroGetSumHashAck::mutable_sum_hashes() {
  // @@protoc_insertion_point(field_mutable_list:SyncFromZeroGetSumHashAck.sum_hashes)
  return &_impl_.sum_hashes_;
}
inline const ::SyncFromZeroSumHash& SyncFromZeroGetSumHashAck::_internal_sum_hashes(int index) const {
  return _impl_.sum_hashes_.Get(index);
}
inline const ::SyncFromZeroSumHash& SyncFromZeroGetSumHashAck::sum_hashes(int index) const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetSumHashAck.sum_hashes)
  return _internal_sum_hashes(index);
}
inline ::SyncFromZeroSumHash* SyncFromZeroGetSumHashAck::_internal_add_sum_hashes() {
  return _impl_.sum_hashes_.Add();
}
inline ::SyncFromZeroSumHash* SyncFromZeroGetSumHashAck::add_sum_hashes() {
  ::SyncFromZeroSumHash* _add = _internal_add_sum_hashes();
  // @@protoc_insertion_point(field_add:SyncFromZeroGetSumHashAck.sum_hashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncFromZeroSumHash >&
SyncFromZeroGetSumHashAck::sum_hashes() const {
  // @@protoc_insertion_point(field_list:SyncFromZeroGetSumHashAck.sum_hashes)
  return _impl_.sum_hashes_;
}

// -------------------------------------------------------------------

// SyncFromZeroGetBlockReq

// string self_node_id = 1;
inline void SyncFromZeroGetBlockReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetBlockReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetBlockReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockReq.self_node_id)
}
inline std::string* SyncFromZeroGetBlockReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetBlockReq.self_node_id)
  return _s;
}
inline const std::string& SyncFromZeroGetBlockReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncFromZeroGetBlockReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetBlockReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncFromZeroGetBlockReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetBlockReq.self_node_id)
}

// string msg_id = 2;
inline void SyncFromZeroGetBlockReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetBlockReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetBlockReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockReq.msg_id)
}
inline std::string* SyncFromZeroGetBlockReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetBlockReq.msg_id)
  return _s;
}
inline const std::string& SyncFromZeroGetBlockReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncFromZeroGetBlockReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetBlockReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncFromZeroGetBlockReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetBlockReq.msg_id)
}

// uint64 height = 3;
inline void SyncFromZeroGetBlockReq::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t SyncFromZeroGetBlockReq::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t SyncFromZeroGetBlockReq::height() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockReq.height)
  return _internal_height();
}
inline void SyncFromZeroGetBlockReq::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void SyncFromZeroGetBlockReq::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockReq.height)
}

// -------------------------------------------------------------------

// SyncFromZeroGetBlockAck

// string self_node_id = 1;
inline void SyncFromZeroGetBlockAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetBlockAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetBlockAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockAck.self_node_id)
}
inline std::string* SyncFromZeroGetBlockAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetBlockAck.self_node_id)
  return _s;
}
inline const std::string& SyncFromZeroGetBlockAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncFromZeroGetBlockAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetBlockAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncFromZeroGetBlockAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetBlockAck.self_node_id)
}

// string msg_id = 2;
inline void SyncFromZeroGetBlockAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncFromZeroGetBlockAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncFromZeroGetBlockAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockAck.msg_id)
}
inline std::string* SyncFromZeroGetBlockAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetBlockAck.msg_id)
  return _s;
}
inline const std::string& SyncFromZeroGetBlockAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncFromZeroGetBlockAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncFromZeroGetBlockAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncFromZeroGetBlockAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncFromZeroGetBlockAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncFromZeroGetBlockAck.msg_id)
}

// uint64 height = 3;
inline void SyncFromZeroGetBlockAck::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t SyncFromZeroGetBlockAck::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t SyncFromZeroGetBlockAck::height() const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockAck.height)
  return _internal_height();
}
inline void SyncFromZeroGetBlockAck::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void SyncFromZeroGetBlockAck::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockAck.height)
}

// repeated bytes blocks = 4;
inline int SyncFromZeroGetBlockAck::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int SyncFromZeroGetBlockAck::blocks_size() const {
  return _internal_blocks_size();
}
inline void SyncFromZeroGetBlockAck::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline std::string* SyncFromZeroGetBlockAck::add_blocks() {
  std::string* _s = _internal_add_blocks();
  // @@protoc_insertion_point(field_add_mutable:SyncFromZeroGetBlockAck.blocks)
  return _s;
}
inline const std::string& SyncFromZeroGetBlockAck::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const std::string& SyncFromZeroGetBlockAck::blocks(int index) const {
  // @@protoc_insertion_point(field_get:SyncFromZeroGetBlockAck.blocks)
  return _internal_blocks(index);
}
inline std::string* SyncFromZeroGetBlockAck::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:SyncFromZeroGetBlockAck.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline void SyncFromZeroGetBlockAck::set_blocks(int index, const std::string& value) {
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockAck.blocks)
}
inline void SyncFromZeroGetBlockAck::set_blocks(int index, std::string&& value) {
  _impl_.blocks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SyncFromZeroGetBlockAck.blocks)
}
inline void SyncFromZeroGetBlockAck::set_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncFromZeroGetBlockAck.blocks)
}
inline void SyncFromZeroGetBlockAck::set_blocks(int index, const void* value, size_t size) {
  _impl_.blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncFromZeroGetBlockAck.blocks)
}
inline std::string* SyncFromZeroGetBlockAck::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline void SyncFromZeroGetBlockAck::add_blocks(const std::string& value) {
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncFromZeroGetBlockAck.blocks)
}
inline void SyncFromZeroGetBlockAck::add_blocks(std::string&& value) {
  _impl_.blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncFromZeroGetBlockAck.blocks)
}
inline void SyncFromZeroGetBlockAck::add_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncFromZeroGetBlockAck.blocks)
}
inline void SyncFromZeroGetBlockAck::add_blocks(const void* value, size_t size) {
  _impl_.blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncFromZeroGetBlockAck.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncFromZeroGetBlockAck::blocks() const {
  // @@protoc_insertion_point(field_list:SyncFromZeroGetBlockAck.blocks)
  return _impl_.blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncFromZeroGetBlockAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:SyncFromZeroGetBlockAck.blocks)
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// GetBlockByUtxoReq

// string addr = 1;
inline void GetBlockByUtxoReq::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoReq::addr() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoReq.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoReq::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoReq.addr)
}
inline std::string* GetBlockByUtxoReq::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoReq.addr)
  return _s;
}
inline const std::string& GetBlockByUtxoReq::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void GetBlockByUtxoReq::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoReq::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoReq::release_addr() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoReq.addr)
  return _impl_.addr_.Release();
}
inline void GetBlockByUtxoReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoReq.addr)
}

// string utxo = 2;
inline void GetBlockByUtxoReq::clear_utxo() {
  _impl_.utxo_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoReq::utxo() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoReq.utxo)
  return _internal_utxo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoReq::set_utxo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.utxo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoReq.utxo)
}
inline std::string* GetBlockByUtxoReq::mutable_utxo() {
  std::string* _s = _internal_mutable_utxo();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoReq.utxo)
  return _s;
}
inline const std::string& GetBlockByUtxoReq::_internal_utxo() const {
  return _impl_.utxo_.Get();
}
inline void GetBlockByUtxoReq::_internal_set_utxo(const std::string& value) {
  
  _impl_.utxo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoReq::_internal_mutable_utxo() {
  
  return _impl_.utxo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoReq::release_utxo() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoReq.utxo)
  return _impl_.utxo_.Release();
}
inline void GetBlockByUtxoReq::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  _impl_.utxo_.SetAllocated(utxo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.utxo_.IsDefault()) {
    _impl_.utxo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoReq.utxo)
}

// string msg_id = 3;
inline void GetBlockByUtxoReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoReq::msg_id() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoReq.msg_id)
}
inline std::string* GetBlockByUtxoReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoReq.msg_id)
  return _s;
}
inline const std::string& GetBlockByUtxoReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void GetBlockByUtxoReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void GetBlockByUtxoReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoReq.msg_id)
}

// -------------------------------------------------------------------

// GetBlockByUtxoAck

// string addr = 1;
inline void GetBlockByUtxoAck::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoAck::addr() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoAck.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoAck::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoAck.addr)
}
inline std::string* GetBlockByUtxoAck::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoAck.addr)
  return _s;
}
inline const std::string& GetBlockByUtxoAck::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void GetBlockByUtxoAck::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::release_addr() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoAck.addr)
  return _impl_.addr_.Release();
}
inline void GetBlockByUtxoAck::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoAck.addr)
}

// string utxo = 2;
inline void GetBlockByUtxoAck::clear_utxo() {
  _impl_.utxo_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoAck::utxo() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoAck.utxo)
  return _internal_utxo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoAck::set_utxo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.utxo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoAck.utxo)
}
inline std::string* GetBlockByUtxoAck::mutable_utxo() {
  std::string* _s = _internal_mutable_utxo();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoAck.utxo)
  return _s;
}
inline const std::string& GetBlockByUtxoAck::_internal_utxo() const {
  return _impl_.utxo_.Get();
}
inline void GetBlockByUtxoAck::_internal_set_utxo(const std::string& value) {
  
  _impl_.utxo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::_internal_mutable_utxo() {
  
  return _impl_.utxo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::release_utxo() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoAck.utxo)
  return _impl_.utxo_.Release();
}
inline void GetBlockByUtxoAck::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  _impl_.utxo_.SetAllocated(utxo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.utxo_.IsDefault()) {
    _impl_.utxo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoAck.utxo)
}

// string msg_id = 3;
inline void GetBlockByUtxoAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoAck::msg_id() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoAck.msg_id)
}
inline std::string* GetBlockByUtxoAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoAck.msg_id)
  return _s;
}
inline const std::string& GetBlockByUtxoAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void GetBlockByUtxoAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void GetBlockByUtxoAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoAck.msg_id)
}

// bytes block_raw = 4;
inline void GetBlockByUtxoAck::clear_block_raw() {
  _impl_.block_raw_.ClearToEmpty();
}
inline const std::string& GetBlockByUtxoAck::block_raw() const {
  // @@protoc_insertion_point(field_get:GetBlockByUtxoAck.block_raw)
  return _internal_block_raw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByUtxoAck::set_block_raw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_raw_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByUtxoAck.block_raw)
}
inline std::string* GetBlockByUtxoAck::mutable_block_raw() {
  std::string* _s = _internal_mutable_block_raw();
  // @@protoc_insertion_point(field_mutable:GetBlockByUtxoAck.block_raw)
  return _s;
}
inline const std::string& GetBlockByUtxoAck::_internal_block_raw() const {
  return _impl_.block_raw_.Get();
}
inline void GetBlockByUtxoAck::_internal_set_block_raw(const std::string& value) {
  
  _impl_.block_raw_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::_internal_mutable_block_raw() {
  
  return _impl_.block_raw_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByUtxoAck::release_block_raw() {
  // @@protoc_insertion_point(field_release:GetBlockByUtxoAck.block_raw)
  return _impl_.block_raw_.Release();
}
inline void GetBlockByUtxoAck::set_allocated_block_raw(std::string* block_raw) {
  if (block_raw != nullptr) {
    
  } else {
    
  }
  _impl_.block_raw_.SetAllocated(block_raw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_raw_.IsDefault()) {
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByUtxoAck.block_raw)
}

// -------------------------------------------------------------------

// HashType

// string hash = 1;
inline void HashType::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& HashType::hash() const {
  // @@protoc_insertion_point(field_get:HashType.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashType::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HashType.hash)
}
inline std::string* HashType::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:HashType.hash)
  return _s;
}
inline const std::string& HashType::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void HashType::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* HashType::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* HashType::release_hash() {
  // @@protoc_insertion_point(field_release:HashType.hash)
  return _impl_.hash_.Release();
}
inline void HashType::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HashType.hash)
}

// bool tx_or_block = 2;
inline void HashType::clear_tx_or_block() {
  _impl_.tx_or_block_ = false;
}
inline bool HashType::_internal_tx_or_block() const {
  return _impl_.tx_or_block_;
}
inline bool HashType::tx_or_block() const {
  // @@protoc_insertion_point(field_get:HashType.tx_or_block)
  return _internal_tx_or_block();
}
inline void HashType::_internal_set_tx_or_block(bool value) {
  
  _impl_.tx_or_block_ = value;
}
inline void HashType::set_tx_or_block(bool value) {
  _internal_set_tx_or_block(value);
  // @@protoc_insertion_point(field_set:HashType.tx_or_block)
}

// bytes block_raw = 3;
inline void HashType::clear_block_raw() {
  _impl_.block_raw_.ClearToEmpty();
}
inline const std::string& HashType::block_raw() const {
  // @@protoc_insertion_point(field_get:HashType.block_raw)
  return _internal_block_raw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashType::set_block_raw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_raw_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HashType.block_raw)
}
inline std::string* HashType::mutable_block_raw() {
  std::string* _s = _internal_mutable_block_raw();
  // @@protoc_insertion_point(field_mutable:HashType.block_raw)
  return _s;
}
inline const std::string& HashType::_internal_block_raw() const {
  return _impl_.block_raw_.Get();
}
inline void HashType::_internal_set_block_raw(const std::string& value) {
  
  _impl_.block_raw_.Set(value, GetArenaForAllocation());
}
inline std::string* HashType::_internal_mutable_block_raw() {
  
  return _impl_.block_raw_.Mutable(GetArenaForAllocation());
}
inline std::string* HashType::release_block_raw() {
  // @@protoc_insertion_point(field_release:HashType.block_raw)
  return _impl_.block_raw_.Release();
}
inline void HashType::set_allocated_block_raw(std::string* block_raw) {
  if (block_raw != nullptr) {
    
  } else {
    
  }
  _impl_.block_raw_.SetAllocated(block_raw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_raw_.IsDefault()) {
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HashType.block_raw)
}

// -------------------------------------------------------------------

// GetBlockByHashReq

// string addr = 1;
inline void GetBlockByHashReq::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& GetBlockByHashReq::addr() const {
  // @@protoc_insertion_point(field_get:GetBlockByHashReq.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByHashReq::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByHashReq.addr)
}
inline std::string* GetBlockByHashReq::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:GetBlockByHashReq.addr)
  return _s;
}
inline const std::string& GetBlockByHashReq::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void GetBlockByHashReq::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByHashReq::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByHashReq::release_addr() {
  // @@protoc_insertion_point(field_release:GetBlockByHashReq.addr)
  return _impl_.addr_.Release();
}
inline void GetBlockByHashReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByHashReq.addr)
}

// repeated .HashType missingHashs = 2;
inline int GetBlockByHashReq::_internal_missinghashs_size() const {
  return _impl_.missinghashs_.size();
}
inline int GetBlockByHashReq::missinghashs_size() const {
  return _internal_missinghashs_size();
}
inline void GetBlockByHashReq::clear_missinghashs() {
  _impl_.missinghashs_.Clear();
}
inline ::HashType* GetBlockByHashReq::mutable_missinghashs(int index) {
  // @@protoc_insertion_point(field_mutable:GetBlockByHashReq.missingHashs)
  return _impl_.missinghashs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >*
GetBlockByHashReq::mutable_missinghashs() {
  // @@protoc_insertion_point(field_mutable_list:GetBlockByHashReq.missingHashs)
  return &_impl_.missinghashs_;
}
inline const ::HashType& GetBlockByHashReq::_internal_missinghashs(int index) const {
  return _impl_.missinghashs_.Get(index);
}
inline const ::HashType& GetBlockByHashReq::missinghashs(int index) const {
  // @@protoc_insertion_point(field_get:GetBlockByHashReq.missingHashs)
  return _internal_missinghashs(index);
}
inline ::HashType* GetBlockByHashReq::_internal_add_missinghashs() {
  return _impl_.missinghashs_.Add();
}
inline ::HashType* GetBlockByHashReq::add_missinghashs() {
  ::HashType* _add = _internal_add_missinghashs();
  // @@protoc_insertion_point(field_add:GetBlockByHashReq.missingHashs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >&
GetBlockByHashReq::missinghashs() const {
  // @@protoc_insertion_point(field_list:GetBlockByHashReq.missingHashs)
  return _impl_.missinghashs_;
}

// string msg_id = 3;
inline void GetBlockByHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& GetBlockByHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:GetBlockByHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByHashReq.msg_id)
}
inline std::string* GetBlockByHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:GetBlockByHashReq.msg_id)
  return _s;
}
inline const std::string& GetBlockByHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void GetBlockByHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:GetBlockByHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void GetBlockByHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByHashReq.msg_id)
}

// -------------------------------------------------------------------

// GetBlockByHashAck

// string addr = 1;
inline void GetBlockByHashAck::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& GetBlockByHashAck::addr() const {
  // @@protoc_insertion_point(field_get:GetBlockByHashAck.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByHashAck::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByHashAck.addr)
}
inline std::string* GetBlockByHashAck::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:GetBlockByHashAck.addr)
  return _s;
}
inline const std::string& GetBlockByHashAck::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void GetBlockByHashAck::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByHashAck::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByHashAck::release_addr() {
  // @@protoc_insertion_point(field_release:GetBlockByHashAck.addr)
  return _impl_.addr_.Release();
}
inline void GetBlockByHashAck::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByHashAck.addr)
}

// repeated .HashType blocks = 2;
inline int GetBlockByHashAck::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int GetBlockByHashAck::blocks_size() const {
  return _internal_blocks_size();
}
inline void GetBlockByHashAck::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline ::HashType* GetBlockByHashAck::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:GetBlockByHashAck.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >*
GetBlockByHashAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:GetBlockByHashAck.blocks)
  return &_impl_.blocks_;
}
inline const ::HashType& GetBlockByHashAck::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::HashType& GetBlockByHashAck::blocks(int index) const {
  // @@protoc_insertion_point(field_get:GetBlockByHashAck.blocks)
  return _internal_blocks(index);
}
inline ::HashType* GetBlockByHashAck::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::HashType* GetBlockByHashAck::add_blocks() {
  ::HashType* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:GetBlockByHashAck.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashType >&
GetBlockByHashAck::blocks() const {
  // @@protoc_insertion_point(field_list:GetBlockByHashAck.blocks)
  return _impl_.blocks_;
}

// string msg_id = 3;
inline void GetBlockByHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& GetBlockByHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:GetBlockByHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockByHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetBlockByHashAck.msg_id)
}
inline std::string* GetBlockByHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:GetBlockByHashAck.msg_id)
  return _s;
}
inline const std::string& GetBlockByHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void GetBlockByHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockByHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBlockByHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:GetBlockByHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void GetBlockByHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetBlockByHashAck.msg_id)
}

// -------------------------------------------------------------------

// SyncNodeHashReq

// string self_node_id = 1;
inline void SyncNodeHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncNodeHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncNodeHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncNodeHashReq.self_node_id)
}
inline std::string* SyncNodeHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncNodeHashReq.self_node_id)
  return _s;
}
inline const std::string& SyncNodeHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncNodeHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncNodeHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncNodeHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncNodeHashReq.self_node_id)
}

// string msg_id = 2;
inline void SyncNodeHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncNodeHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncNodeHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncNodeHashReq.msg_id)
}
inline std::string* SyncNodeHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncNodeHashReq.msg_id)
  return _s;
}
inline const std::string& SyncNodeHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncNodeHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncNodeHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncNodeHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncNodeHashReq.msg_id)
}

// -------------------------------------------------------------------

// SyncNodeHashAck

// string self_node_id = 1;
inline void SyncNodeHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SyncNodeHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:SyncNodeHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncNodeHashAck.self_node_id)
}
inline std::string* SyncNodeHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SyncNodeHashAck.self_node_id)
  return _s;
}
inline const std::string& SyncNodeHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SyncNodeHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SyncNodeHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SyncNodeHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncNodeHashAck.self_node_id)
}

// string msg_id = 2;
inline void SyncNodeHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SyncNodeHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SyncNodeHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncNodeHashAck.msg_id)
}
inline std::string* SyncNodeHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SyncNodeHashAck.msg_id)
  return _s;
}
inline const std::string& SyncNodeHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SyncNodeHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SyncNodeHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SyncNodeHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncNodeHashAck.msg_id)
}

// string hash = 3;
inline void SyncNodeHashAck::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& SyncNodeHashAck::hash() const {
  // @@protoc_insertion_point(field_get:SyncNodeHashAck.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeHashAck::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncNodeHashAck.hash)
}
inline std::string* SyncNodeHashAck::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:SyncNodeHashAck.hash)
  return _s;
}
inline const std::string& SyncNodeHashAck::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void SyncNodeHashAck::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeHashAck::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeHashAck::release_hash() {
  // @@protoc_insertion_point(field_release:SyncNodeHashAck.hash)
  return _impl_.hash_.Release();
}
inline void SyncNodeHashAck::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncNodeHashAck.hash)
}

// -------------------------------------------------------------------

// GetCheckSumHashReq

// uint64 height = 1;
inline void GetCheckSumHashReq::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t GetCheckSumHashReq::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t GetCheckSumHashReq::height() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashReq.height)
  return _internal_height();
}
inline void GetCheckSumHashReq::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void GetCheckSumHashReq::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetCheckSumHashReq.height)
}

// string msg_id = 2;
inline void GetCheckSumHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& GetCheckSumHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCheckSumHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetCheckSumHashReq.msg_id)
}
inline std::string* GetCheckSumHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:GetCheckSumHashReq.msg_id)
  return _s;
}
inline const std::string& GetCheckSumHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void GetCheckSumHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCheckSumHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCheckSumHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:GetCheckSumHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void GetCheckSumHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetCheckSumHashReq.msg_id)
}

// string self_node_id = 3;
inline void GetCheckSumHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& GetCheckSumHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCheckSumHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetCheckSumHashReq.self_node_id)
}
inline std::string* GetCheckSumHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:GetCheckSumHashReq.self_node_id)
  return _s;
}
inline const std::string& GetCheckSumHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void GetCheckSumHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCheckSumHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCheckSumHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:GetCheckSumHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void GetCheckSumHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetCheckSumHashReq.self_node_id)
}

// -------------------------------------------------------------------

// GetCheckSumHashAck

// uint64 height = 1;
inline void GetCheckSumHashAck::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t GetCheckSumHashAck::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t GetCheckSumHashAck::height() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashAck.height)
  return _internal_height();
}
inline void GetCheckSumHashAck::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void GetCheckSumHashAck::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetCheckSumHashAck.height)
}

// string hash = 2;
inline void GetCheckSumHashAck::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& GetCheckSumHashAck::hash() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashAck.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCheckSumHashAck::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetCheckSumHashAck.hash)
}
inline std::string* GetCheckSumHashAck::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:GetCheckSumHashAck.hash)
  return _s;
}
inline const std::string& GetCheckSumHashAck::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void GetCheckSumHashAck::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCheckSumHashAck::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCheckSumHashAck::release_hash() {
  // @@protoc_insertion_point(field_release:GetCheckSumHashAck.hash)
  return _impl_.hash_.Release();
}
inline void GetCheckSumHashAck::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetCheckSumHashAck.hash)
}

// string msg_id = 3;
inline void GetCheckSumHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& GetCheckSumHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCheckSumHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetCheckSumHashAck.msg_id)
}
inline std::string* GetCheckSumHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:GetCheckSumHashAck.msg_id)
  return _s;
}
inline const std::string& GetCheckSumHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void GetCheckSumHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCheckSumHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCheckSumHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:GetCheckSumHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void GetCheckSumHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetCheckSumHashAck.msg_id)
}

// bool success = 4;
inline void GetCheckSumHashAck::clear_success() {
  _impl_.success_ = false;
}
inline bool GetCheckSumHashAck::_internal_success() const {
  return _impl_.success_;
}
inline bool GetCheckSumHashAck::success() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashAck.success)
  return _internal_success();
}
inline void GetCheckSumHashAck::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetCheckSumHashAck::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GetCheckSumHashAck.success)
}

// string self_node_id = 5;
inline void GetCheckSumHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& GetCheckSumHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:GetCheckSumHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCheckSumHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetCheckSumHashAck.self_node_id)
}
inline std::string* GetCheckSumHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:GetCheckSumHashAck.self_node_id)
  return _s;
}
inline const std::string& GetCheckSumHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void GetCheckSumHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCheckSumHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCheckSumHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:GetCheckSumHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void GetCheckSumHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetCheckSumHashAck.self_node_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_5fblock_2eproto
