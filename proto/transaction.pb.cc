// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#include "transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CTxPrevOutput::CTxPrevOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.n_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTxPrevOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTxPrevOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTxPrevOutputDefaultTypeInternal() {}
  union {
    CTxPrevOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTxPrevOutputDefaultTypeInternal _CTxPrevOutput_default_instance_;
PROTOBUF_CONSTEXPR CTxInput::CTxInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prevout_)*/{}
  , /*decltype(_impl_.contractaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vinsign_)*/nullptr
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTxInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTxInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTxInputDefaultTypeInternal() {}
  union {
    CTxInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTxInputDefaultTypeInternal _CTxInput_default_instance_;
PROTOBUF_CONSTEXPR CTxOutput::CTxOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTxOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTxOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTxOutputDefaultTypeInternal() {}
  union {
    CTxOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTxOutputDefaultTypeInternal _CTxOutput_default_instance_;
PROTOBUF_CONSTEXPR CTxUtxo::CTxUtxo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_)*/{}
  , /*decltype(_impl_.vin_)*/{}
  , /*decltype(_impl_.vout_)*/{}
  , /*decltype(_impl_.multisign_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTxUtxoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTxUtxoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTxUtxoDefaultTypeInternal() {}
  union {
    CTxUtxo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTxUtxoDefaultTypeInternal _CTxUtxo_default_instance_;
PROTOBUF_CONSTEXPR CTransaction::CTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.verifysign_)*/{}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reserve0_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reserve1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utxo_)*/nullptr
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.n_)*/0u
  , /*decltype(_impl_.consensus_)*/0u
  , /*decltype(_impl_.txtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTransactionDefaultTypeInternal() {}
  union {
    CTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTransactionDefaultTypeInternal _CTransaction_default_instance_;
static ::_pb::Metadata file_level_metadata_transaction_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transaction_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transaction_2eproto = nullptr;

const uint32_t TableStruct_transaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxPrevOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTxPrevOutput, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::CTxPrevOutput, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTxInput, _impl_.prevout_),
  PROTOBUF_FIELD_OFFSET(::CTxInput, _impl_.vinsign_),
  PROTOBUF_FIELD_OFFSET(::CTxInput, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::CTxInput, _impl_.contractaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTxOutput, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CTxOutput, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxUtxo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTxUtxo, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::CTxUtxo, _impl_.vin_),
  PROTOBUF_FIELD_OFFSET(::CTxUtxo, _impl_.vout_),
  PROTOBUF_FIELD_OFFSET(::CTxUtxo, _impl_.multisign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.n_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.utxo_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.consensus_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.txtype_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.verifysign_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.reserve0_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, _impl_.reserve1_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CTxPrevOutput)},
  { 8, -1, -1, sizeof(::CTxInput)},
  { 18, -1, -1, sizeof(::CTxOutput)},
  { 26, -1, -1, sizeof(::CTxUtxo)},
  { 36, -1, -1, sizeof(::CTransaction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CTxPrevOutput_default_instance_._instance,
  &::_CTxInput_default_instance_._instance,
  &::_CTxOutput_default_instance_._instance,
  &::_CTxUtxo_default_instance_._instance,
  &::_CTransaction_default_instance_._instance,
};

const char descriptor_table_protodef_transaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021transaction.proto\032\nsign.proto\"(\n\rCTxPr"
  "evOutput\022\014\n\004hash\030\001 \001(\t\022\t\n\001n\030\002 \001(\r\"l\n\010CTx"
  "Input\022\037\n\007prevOut\030\001 \003(\0132\016.CTxPrevOutput\022\027"
  "\n\007vinSign\030\002 \001(\0132\006.CSign\022\020\n\010sequence\030\003 \001("
  "\r\022\024\n\014contractAddr\030\004 \001(\t\"(\n\tCTxOutput\022\r\n\005"
  "value\030\001 \001(\003\022\014\n\004addr\030\002 \001(\t\"e\n\007CTxUtxo\022\r\n\005"
  "owner\030\001 \003(\t\022\026\n\003vin\030\002 \003(\0132\t.CTxInput\022\030\n\004v"
  "out\030\003 \003(\0132\n.CTxOutput\022\031\n\tmultiSign\030\004 \003(\013"
  "2\006.CSign\"\375\001\n\014CTransaction\022\017\n\007version\030\001 \001"
  "(\r\022\014\n\004time\030\002 \001(\004\022\t\n\001n\030\003 \001(\r\022\020\n\010identity\030"
  "\004 \001(\t\022\014\n\004hash\030\005 \001(\t\022\026\n\004utxo\030\006 \001(\0132\010.CTxU"
  "txo\022\014\n\004type\030\007 \001(\t\022\021\n\tconsensus\030\010 \001(\r\022\016\n\006"
  "txType\030\t \001(\r\022\014\n\004data\030\n \001(\t\022\014\n\004info\030\013 \001(\t"
  "\022\032\n\nverifySign\030\014 \003(\0132\006.CSign\022\020\n\010reserve0"
  "\030\r \001(\t\022\020\n\010reserve1\030\016 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transaction_2eproto_deps[1] = {
  &::descriptor_table_sign_2eproto,
};
static ::_pbi::once_flag descriptor_table_transaction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transaction_2eproto = {
    false, false, 592, descriptor_table_protodef_transaction_2eproto,
    "transaction.proto",
    &descriptor_table_transaction_2eproto_once, descriptor_table_transaction_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_transaction_2eproto::offsets,
    file_level_metadata_transaction_2eproto, file_level_enum_descriptors_transaction_2eproto,
    file_level_service_descriptors_transaction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transaction_2eproto_getter() {
  return &descriptor_table_transaction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transaction_2eproto(&descriptor_table_transaction_2eproto);

// ===================================================================

class CTxPrevOutput::_Internal {
 public:
};

CTxPrevOutput::CTxPrevOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CTxPrevOutput)
}
CTxPrevOutput::CTxPrevOutput(const CTxPrevOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTxPrevOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.n_ = from._impl_.n_;
  // @@protoc_insertion_point(copy_constructor:CTxPrevOutput)
}

inline void CTxPrevOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.n_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CTxPrevOutput::~CTxPrevOutput() {
  // @@protoc_insertion_point(destructor:CTxPrevOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTxPrevOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void CTxPrevOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTxPrevOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxPrevOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.n_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTxPrevOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTxPrevOutput.hash"));
        } else
          goto handle_unusual;
        continue;
      // uint32 n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTxPrevOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxPrevOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTxPrevOutput.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint32 n = 2;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxPrevOutput)
  return target;
}

size_t CTxPrevOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxPrevOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint32 n = 2;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTxPrevOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTxPrevOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTxPrevOutput::GetClassData() const { return &_class_data_; }


void CTxPrevOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTxPrevOutput*>(&to_msg);
  auto& from = static_cast<const CTxPrevOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CTxPrevOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTxPrevOutput::CopyFrom(const CTxPrevOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxPrevOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxPrevOutput::IsInitialized() const {
  return true;
}

void CTxPrevOutput::InternalSwap(CTxPrevOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  swap(_impl_.n_, other->_impl_.n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxPrevOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_2eproto_getter, &descriptor_table_transaction_2eproto_once,
      file_level_metadata_transaction_2eproto[0]);
}

// ===================================================================

class CTxInput::_Internal {
 public:
  static const ::CSign& vinsign(const CTxInput* msg);
};

const ::CSign&
CTxInput::_Internal::vinsign(const CTxInput* msg) {
  return *msg->_impl_.vinsign_;
}
void CTxInput::clear_vinsign() {
  if (GetArenaForAllocation() == nullptr && _impl_.vinsign_ != nullptr) {
    delete _impl_.vinsign_;
  }
  _impl_.vinsign_ = nullptr;
}
CTxInput::CTxInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CTxInput)
}
CTxInput::CTxInput(const CTxInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTxInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prevout_){from._impl_.prevout_}
    , decltype(_impl_.contractaddr_){}
    , decltype(_impl_.vinsign_){nullptr}
    , decltype(_impl_.sequence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contractaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contractaddr().empty()) {
    _this->_impl_.contractaddr_.Set(from._internal_contractaddr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vinsign()) {
    _this->_impl_.vinsign_ = new ::CSign(*from._impl_.vinsign_);
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:CTxInput)
}

inline void CTxInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prevout_){arena}
    , decltype(_impl_.contractaddr_){}
    , decltype(_impl_.vinsign_){nullptr}
    , decltype(_impl_.sequence_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contractaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CTxInput::~CTxInput() {
  // @@protoc_insertion_point(destructor:CTxInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTxInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prevout_.~RepeatedPtrField();
  _impl_.contractaddr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vinsign_;
}

void CTxInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prevout_.Clear();
  _impl_.contractaddr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vinsign_ != nullptr) {
    delete _impl_.vinsign_;
  }
  _impl_.vinsign_ = nullptr;
  _impl_.sequence_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTxInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CTxPrevOutput prevOut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prevout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .CSign vinSign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vinsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contractAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contractaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTxInput.contractAddr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTxInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CTxPrevOutput prevOut = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prevout_size()); i < n; i++) {
    const auto& repfield = this->_internal_prevout(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .CSign vinSign = 2;
  if (this->_internal_has_vinsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vinsign(this),
        _Internal::vinsign(this).GetCachedSize(), target, stream);
  }

  // uint32 sequence = 3;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence(), target);
  }

  // string contractAddr = 4;
  if (!this->_internal_contractaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractaddr().data(), static_cast<int>(this->_internal_contractaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTxInput.contractAddr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_contractaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxInput)
  return target;
}

size_t CTxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CTxPrevOutput prevOut = 1;
  total_size += 1UL * this->_internal_prevout_size();
  for (const auto& msg : this->_impl_.prevout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contractAddr = 4;
  if (!this->_internal_contractaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractaddr());
  }

  // .CSign vinSign = 2;
  if (this->_internal_has_vinsign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vinsign_);
  }

  // uint32 sequence = 3;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTxInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTxInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTxInput::GetClassData() const { return &_class_data_; }


void CTxInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTxInput*>(&to_msg);
  auto& from = static_cast<const CTxInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CTxInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prevout_.MergeFrom(from._impl_.prevout_);
  if (!from._internal_contractaddr().empty()) {
    _this->_internal_set_contractaddr(from._internal_contractaddr());
  }
  if (from._internal_has_vinsign()) {
    _this->_internal_mutable_vinsign()->::CSign::MergeFrom(
        from._internal_vinsign());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTxInput::CopyFrom(const CTxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxInput::IsInitialized() const {
  return true;
}

void CTxInput::InternalSwap(CTxInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prevout_.InternalSwap(&other->_impl_.prevout_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contractaddr_, lhs_arena,
      &other->_impl_.contractaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTxInput, _impl_.sequence_)
      + sizeof(CTxInput::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(CTxInput, _impl_.vinsign_)>(
          reinterpret_cast<char*>(&_impl_.vinsign_),
          reinterpret_cast<char*>(&other->_impl_.vinsign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_2eproto_getter, &descriptor_table_transaction_2eproto_once,
      file_level_metadata_transaction_2eproto[1]);
}

// ===================================================================

class CTxOutput::_Internal {
 public:
};

CTxOutput::CTxOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CTxOutput)
}
CTxOutput::CTxOutput(const CTxOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTxOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:CTxOutput)
}

inline void CTxOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CTxOutput::~CTxOutput() {
  // @@protoc_insertion_point(destructor:CTxOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTxOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void CTxOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _impl_.value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTxOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTxOutput.addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTxOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTxOutput.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxOutput)
  return target;
}

size_t CTxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTxOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTxOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTxOutput::GetClassData() const { return &_class_data_; }


void CTxOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTxOutput*>(&to_msg);
  auto& from = static_cast<const CTxOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CTxOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTxOutput::CopyFrom(const CTxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxOutput::IsInitialized() const {
  return true;
}

void CTxOutput::InternalSwap(CTxOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_2eproto_getter, &descriptor_table_transaction_2eproto_once,
      file_level_metadata_transaction_2eproto[2]);
}

// ===================================================================

class CTxUtxo::_Internal {
 public:
};

void CTxUtxo::clear_multisign() {
  _impl_.multisign_.Clear();
}
CTxUtxo::CTxUtxo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CTxUtxo)
}
CTxUtxo::CTxUtxo(const CTxUtxo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTxUtxo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_){from._impl_.owner_}
    , decltype(_impl_.vin_){from._impl_.vin_}
    , decltype(_impl_.vout_){from._impl_.vout_}
    , decltype(_impl_.multisign_){from._impl_.multisign_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CTxUtxo)
}

inline void CTxUtxo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_){arena}
    , decltype(_impl_.vin_){arena}
    , decltype(_impl_.vout_){arena}
    , decltype(_impl_.multisign_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CTxUtxo::~CTxUtxo() {
  // @@protoc_insertion_point(destructor:CTxUtxo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTxUtxo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_.~RepeatedPtrField();
  _impl_.vin_.~RepeatedPtrField();
  _impl_.vout_.~RepeatedPtrField();
  _impl_.multisign_.~RepeatedPtrField();
}

void CTxUtxo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTxUtxo::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxUtxo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_.Clear();
  _impl_.vin_.Clear();
  _impl_.vout_.Clear();
  _impl_.multisign_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTxUtxo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_owner();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "CTxUtxo.owner"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CTxInput vin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CTxOutput vout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSign multiSign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multisign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTxUtxo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxUtxo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string owner = 1;
  for (int i = 0, n = this->_internal_owner_size(); i < n; i++) {
    const auto& s = this->_internal_owner(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTxUtxo.owner");
    target = stream->WriteString(1, s, target);
  }

  // repeated .CTxInput vin = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vin_size()); i < n; i++) {
    const auto& repfield = this->_internal_vin(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CTxOutput vout = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vout_size()); i < n; i++) {
    const auto& repfield = this->_internal_vout(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CSign multiSign = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_multisign_size()); i < n; i++) {
    const auto& repfield = this->_internal_multisign(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxUtxo)
  return target;
}

size_t CTxUtxo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxUtxo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string owner = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.owner_.size());
  for (int i = 0, n = _impl_.owner_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.owner_.Get(i));
  }

  // repeated .CTxInput vin = 2;
  total_size += 1UL * this->_internal_vin_size();
  for (const auto& msg : this->_impl_.vin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CTxOutput vout = 3;
  total_size += 1UL * this->_internal_vout_size();
  for (const auto& msg : this->_impl_.vout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSign multiSign = 4;
  total_size += 1UL * this->_internal_multisign_size();
  for (const auto& msg : this->_impl_.multisign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTxUtxo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTxUtxo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTxUtxo::GetClassData() const { return &_class_data_; }


void CTxUtxo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTxUtxo*>(&to_msg);
  auto& from = static_cast<const CTxUtxo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CTxUtxo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.owner_.MergeFrom(from._impl_.owner_);
  _this->_impl_.vin_.MergeFrom(from._impl_.vin_);
  _this->_impl_.vout_.MergeFrom(from._impl_.vout_);
  _this->_impl_.multisign_.MergeFrom(from._impl_.multisign_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTxUtxo::CopyFrom(const CTxUtxo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxUtxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxUtxo::IsInitialized() const {
  return true;
}

void CTxUtxo::InternalSwap(CTxUtxo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.owner_.InternalSwap(&other->_impl_.owner_);
  _impl_.vin_.InternalSwap(&other->_impl_.vin_);
  _impl_.vout_.InternalSwap(&other->_impl_.vout_);
  _impl_.multisign_.InternalSwap(&other->_impl_.multisign_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxUtxo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_2eproto_getter, &descriptor_table_transaction_2eproto_once,
      file_level_metadata_transaction_2eproto[3]);
}

// ===================================================================

class CTransaction::_Internal {
 public:
  static const ::CTxUtxo& utxo(const CTransaction* msg);
};

const ::CTxUtxo&
CTransaction::_Internal::utxo(const CTransaction* msg) {
  return *msg->_impl_.utxo_;
}
void CTransaction::clear_verifysign() {
  _impl_.verifysign_.Clear();
}
CTransaction::CTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CTransaction)
}
CTransaction::CTransaction(const CTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.verifysign_){from._impl_.verifysign_}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.reserve0_){}
    , decltype(_impl_.reserve1_){}
    , decltype(_impl_.utxo_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.n_){}
    , decltype(_impl_.consensus_){}
    , decltype(_impl_.txtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reserve0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve0().empty()) {
    _this->_impl_.reserve0_.Set(from._internal_reserve0(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reserve1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve1().empty()) {
    _this->_impl_.reserve1_.Set(from._internal_reserve1(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_utxo()) {
    _this->_impl_.utxo_ = new ::CTxUtxo(*from._impl_.utxo_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.txtype_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.txtype_));
  // @@protoc_insertion_point(copy_constructor:CTransaction)
}

inline void CTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.verifysign_){arena}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.reserve0_){}
    , decltype(_impl_.reserve1_){}
    , decltype(_impl_.utxo_){nullptr}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.n_){0u}
    , decltype(_impl_.consensus_){0u}
    , decltype(_impl_.txtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reserve0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reserve1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CTransaction::~CTransaction() {
  // @@protoc_insertion_point(destructor:CTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.verifysign_.~RepeatedPtrField();
  _impl_.identity_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.type_.Destroy();
  _impl_.data_.Destroy();
  _impl_.info_.Destroy();
  _impl_.reserve0_.Destroy();
  _impl_.reserve1_.Destroy();
  if (this != internal_default_instance()) delete _impl_.utxo_;
}

void CTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.verifysign_.Clear();
  _impl_.identity_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.reserve0_.ClearToEmpty();
  _impl_.reserve1_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.utxo_ != nullptr) {
    delete _impl_.utxo_;
  }
  _impl_.utxo_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.txtype_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.txtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.identity"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.hash"));
        } else
          goto handle_unusual;
        continue;
      // .CTxUtxo utxo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.type"));
        } else
          goto handle_unusual;
        continue;
      // uint32 consensus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.consensus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 txType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.txtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.data"));
        } else
          goto handle_unusual;
        continue;
      // string info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.info"));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSign verifySign = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_verifysign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string reserve0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_reserve0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.reserve0"));
        } else
          goto handle_unusual;
        continue;
      // string reserve1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_reserve1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CTransaction.reserve1"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  // uint32 n = 3;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_n(), target);
  }

  // string identity = 4;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_identity(), target);
  }

  // string hash = 5;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.hash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hash(), target);
  }

  // .CTxUtxo utxo = 6;
  if (this->_internal_has_utxo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::utxo(this),
        _Internal::utxo(this).GetCachedSize(), target, stream);
  }

  // string type = 7;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_type(), target);
  }

  // uint32 consensus = 8;
  if (this->_internal_consensus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_consensus(), target);
  }

  // uint32 txType = 9;
  if (this->_internal_txtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_txtype(), target);
  }

  // string data = 10;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.data");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_data(), target);
  }

  // string info = 11;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.info");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_info(), target);
  }

  // repeated .CSign verifySign = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_verifysign_size()); i < n; i++) {
    const auto& repfield = this->_internal_verifysign(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string reserve0 = 13;
  if (!this->_internal_reserve0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve0().data(), static_cast<int>(this->_internal_reserve0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.reserve0");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_reserve0(), target);
  }

  // string reserve1 = 14;
  if (!this->_internal_reserve1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve1().data(), static_cast<int>(this->_internal_reserve1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.reserve1");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_reserve1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTransaction)
  return target;
}

size_t CTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSign verifySign = 12;
  total_size += 1UL * this->_internal_verifysign_size();
  for (const auto& msg : this->_impl_.verifysign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string identity = 4;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string hash = 5;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string type = 7;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string data = 10;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string info = 11;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string reserve0 = 13;
  if (!this->_internal_reserve0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve0());
  }

  // string reserve1 = 14;
  if (!this->_internal_reserve1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve1());
  }

  // .CTxUtxo utxo = 6;
  if (this->_internal_has_utxo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.utxo_);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint32 n = 3;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_n());
  }

  // uint32 consensus = 8;
  if (this->_internal_consensus() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_consensus());
  }

  // uint32 txType = 9;
  if (this->_internal_txtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_txtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTransaction::GetClassData() const { return &_class_data_; }


void CTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTransaction*>(&to_msg);
  auto& from = static_cast<const CTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.verifysign_.MergeFrom(from._impl_.verifysign_);
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_reserve0().empty()) {
    _this->_internal_set_reserve0(from._internal_reserve0());
  }
  if (!from._internal_reserve1().empty()) {
    _this->_internal_set_reserve1(from._internal_reserve1());
  }
  if (from._internal_has_utxo()) {
    _this->_internal_mutable_utxo()->::CTxUtxo::MergeFrom(
        from._internal_utxo());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  if (from._internal_consensus() != 0) {
    _this->_internal_set_consensus(from._internal_consensus());
  }
  if (from._internal_txtype() != 0) {
    _this->_internal_set_txtype(from._internal_txtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTransaction::CopyFrom(const CTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTransaction::IsInitialized() const {
  return true;
}

void CTransaction::InternalSwap(CTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.verifysign_.InternalSwap(&other->_impl_.verifysign_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserve0_, lhs_arena,
      &other->_impl_.reserve0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserve1_, lhs_arena,
      &other->_impl_.reserve1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTransaction, _impl_.txtype_)
      + sizeof(CTransaction::_impl_.txtype_)
      - PROTOBUF_FIELD_OFFSET(CTransaction, _impl_.utxo_)>(
          reinterpret_cast<char*>(&_impl_.utxo_),
          reinterpret_cast<char*>(&other->_impl_.utxo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_2eproto_getter, &descriptor_table_transaction_2eproto_once,
      file_level_metadata_transaction_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CTxPrevOutput*
Arena::CreateMaybeMessage< ::CTxPrevOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTxPrevOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::CTxInput*
Arena::CreateMaybeMessage< ::CTxInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTxInput >(arena);
}
template<> PROTOBUF_NOINLINE ::CTxOutput*
Arena::CreateMaybeMessage< ::CTxOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTxOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::CTxUtxo*
Arena::CreateMaybeMessage< ::CTxUtxo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTxUtxo >(arena);
}
template<> PROTOBUF_NOINLINE ::CTransaction*
Arena::CreateMaybeMessage< ::CTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTransaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
