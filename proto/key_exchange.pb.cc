// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#include "key_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR KeyExchangeRequest::KeyExchangeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyExchangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyExchangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyExchangeRequestDefaultTypeInternal() {}
  union {
    KeyExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
PROTOBUF_CONSTEXPR KeyExchangeResponse::KeyExchangeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyExchangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyExchangeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyExchangeResponseDefaultTypeInternal() {}
  union {
    KeyExchangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyExchangeResponseDefaultTypeInternal _KeyExchangeResponse_default_instance_;
PROTOBUF_CONSTEXPR KeyInfo::KeyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.salt_32bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ec_public_key_65bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyInfoDefaultTypeInternal() {}
  union {
    KeyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyInfoDefaultTypeInternal _KeyInfo_default_instance_;
PROTOBUF_CONSTEXPR Token::Token(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.salt_3bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hmac_3bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
PROTOBUF_CONSTEXPR Ciphertext::Ciphertext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aes_iv_12bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ciphertext_nbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aes_tag_16bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/nullptr
  , /*decltype(_impl_.cipher_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CiphertextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CiphertextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CiphertextDefaultTypeInternal() {}
  union {
    Ciphertext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CiphertextDefaultTypeInternal _Ciphertext_default_instance_;
static ::_pb::Metadata file_level_metadata_key_5fexchange_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_key_5fexchange_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_key_5fexchange_2eproto = nullptr;

const uint32_t TableStruct_key_5fexchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeyExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KeyExchangeRequest, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::KeyExchangeRequest, _impl_.key_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeyExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KeyExchangeResponse, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::KeyExchangeResponse, _impl_.key_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KeyInfo, _impl_.salt_32bytes_),
  PROTOBUF_FIELD_OFFSET(::KeyInfo, _impl_.ec_public_key_65bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Token, _impl_.salt_3bytes_),
  PROTOBUF_FIELD_OFFSET(::Token, _impl_.hmac_3bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Ciphertext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ciphertext, _impl_.cipher_version_),
  PROTOBUF_FIELD_OFFSET(::Ciphertext, _impl_.aes_iv_12bytes_),
  PROTOBUF_FIELD_OFFSET(::Ciphertext, _impl_.ciphertext_nbytes_),
  PROTOBUF_FIELD_OFFSET(::Ciphertext, _impl_.aes_tag_16bytes_),
  PROTOBUF_FIELD_OFFSET(::Ciphertext, _impl_.token_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::KeyExchangeRequest)},
  { 8, -1, -1, sizeof(::KeyExchangeResponse)},
  { 16, -1, -1, sizeof(::KeyInfo)},
  { 24, -1, -1, sizeof(::Token)},
  { 32, -1, -1, sizeof(::Ciphertext)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_KeyExchangeRequest_default_instance_._instance,
  &::_KeyExchangeResponse_default_instance_._instance,
  &::_KeyInfo_default_instance_._instance,
  &::_Token_default_instance_._instance,
  &::_Ciphertext_default_instance_._instance,
};

const char descriptor_table_protodef_key_5fexchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022key_exchange.proto\"@\n\022KeyExchangeReque"
  "st\022\016\n\006msg_id\030\001 \001(\t\022\032\n\010key_info\030\002 \001(\0132\010.K"
  "eyInfo\"A\n\023KeyExchangeResponse\022\016\n\006msg_id\030"
  "\001 \001(\t\022\032\n\010key_info\030\002 \001(\0132\010.KeyInfo\">\n\007Key"
  "Info\022\024\n\014salt_32bytes\030\001 \001(\014\022\035\n\025ec_public_"
  "key_65bytes\030\002 \001(\014\"1\n\005Token\022\023\n\013salt_3byte"
  "s\030\001 \001(\014\022\023\n\013hmac_3bytes\030\002 \001(\014\"\207\001\n\nCiphert"
  "ext\022\026\n\016cipher_version\030\001 \001(\005\022\026\n\016aes_iv_12"
  "bytes\030\002 \001(\014\022\031\n\021ciphertext_nbytes\030\003 \001(\014\022\027"
  "\n\017aes_tag_16bytes\030\004 \001(\014\022\025\n\005token\030\005 \001(\0132\006"
  ".Tokenb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_key_5fexchange_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_key_5fexchange_2eproto = {
    false, false, 414, descriptor_table_protodef_key_5fexchange_2eproto,
    "key_exchange.proto",
    &descriptor_table_key_5fexchange_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_key_5fexchange_2eproto::offsets,
    file_level_metadata_key_5fexchange_2eproto, file_level_enum_descriptors_key_5fexchange_2eproto,
    file_level_service_descriptors_key_5fexchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_key_5fexchange_2eproto_getter() {
  return &descriptor_table_key_5fexchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_key_5fexchange_2eproto(&descriptor_table_key_5fexchange_2eproto);

// ===================================================================

class KeyExchangeRequest::_Internal {
 public:
  static const ::KeyInfo& key_info(const KeyExchangeRequest* msg);
};

const ::KeyInfo&
KeyExchangeRequest::_Internal::key_info(const KeyExchangeRequest* msg) {
  return *msg->_impl_.key_info_;
}
KeyExchangeRequest::KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KeyExchangeRequest)
}
KeyExchangeRequest::KeyExchangeRequest(const KeyExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyExchangeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.key_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key_info()) {
    _this->_impl_.key_info_ = new ::KeyInfo(*from._impl_.key_info_);
  }
  // @@protoc_insertion_point(copy_constructor:KeyExchangeRequest)
}

inline void KeyExchangeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.key_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeRequest::~KeyExchangeRequest() {
  // @@protoc_insertion_point(destructor:KeyExchangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_info_;
}

void KeyExchangeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.key_info_ != nullptr) {
    delete _impl_.key_info_;
  }
  _impl_.key_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KeyExchangeRequest.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // .KeyInfo key_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_id = 1;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KeyExchangeRequest.msg_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg_id(), target);
  }

  // .KeyInfo key_info = 2;
  if (this->_internal_has_key_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key_info(this),
        _Internal::key_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyExchangeRequest)
  return target;
}

size_t KeyExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_id = 1;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // .KeyInfo key_info = 2;
  if (this->_internal_has_key_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeRequest::GetClassData() const { return &_class_data_; }


void KeyExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyExchangeRequest*>(&to_msg);
  auto& from = static_cast<const KeyExchangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KeyExchangeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_has_key_info()) {
    _this->_internal_mutable_key_info()->::KeyInfo::MergeFrom(
        from._internal_key_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeRequest::CopyFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeRequest::IsInitialized() const {
  return true;
}

void KeyExchangeRequest::InternalSwap(KeyExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  swap(_impl_.key_info_, other->_impl_.key_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_key_5fexchange_2eproto_getter, &descriptor_table_key_5fexchange_2eproto_once,
      file_level_metadata_key_5fexchange_2eproto[0]);
}

// ===================================================================

class KeyExchangeResponse::_Internal {
 public:
  static const ::KeyInfo& key_info(const KeyExchangeResponse* msg);
};

const ::KeyInfo&
KeyExchangeResponse::_Internal::key_info(const KeyExchangeResponse* msg) {
  return *msg->_impl_.key_info_;
}
KeyExchangeResponse::KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KeyExchangeResponse)
}
KeyExchangeResponse::KeyExchangeResponse(const KeyExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyExchangeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.key_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key_info()) {
    _this->_impl_.key_info_ = new ::KeyInfo(*from._impl_.key_info_);
  }
  // @@protoc_insertion_point(copy_constructor:KeyExchangeResponse)
}

inline void KeyExchangeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.key_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeResponse::~KeyExchangeResponse() {
  // @@protoc_insertion_point(destructor:KeyExchangeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_info_;
}

void KeyExchangeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.key_info_ != nullptr) {
    delete _impl_.key_info_;
  }
  _impl_.key_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KeyExchangeResponse.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // .KeyInfo key_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_id = 1;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KeyExchangeResponse.msg_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg_id(), target);
  }

  // .KeyInfo key_info = 2;
  if (this->_internal_has_key_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key_info(this),
        _Internal::key_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyExchangeResponse)
  return target;
}

size_t KeyExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyExchangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_id = 1;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // .KeyInfo key_info = 2;
  if (this->_internal_has_key_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyExchangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeResponse::GetClassData() const { return &_class_data_; }


void KeyExchangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyExchangeResponse*>(&to_msg);
  auto& from = static_cast<const KeyExchangeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KeyExchangeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_has_key_info()) {
    _this->_internal_mutable_key_info()->::KeyInfo::MergeFrom(
        from._internal_key_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeResponse::CopyFrom(const KeyExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeResponse::IsInitialized() const {
  return true;
}

void KeyExchangeResponse::InternalSwap(KeyExchangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  swap(_impl_.key_info_, other->_impl_.key_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_key_5fexchange_2eproto_getter, &descriptor_table_key_5fexchange_2eproto_once,
      file_level_metadata_key_5fexchange_2eproto[1]);
}

// ===================================================================

class KeyInfo::_Internal {
 public:
};

KeyInfo::KeyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KeyInfo)
}
KeyInfo::KeyInfo(const KeyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_32bytes_){}
    , decltype(_impl_.ec_public_key_65bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.salt_32bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_32bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt_32bytes().empty()) {
    _this->_impl_.salt_32bytes_.Set(from._internal_salt_32bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ec_public_key_65bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec_public_key_65bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ec_public_key_65bytes().empty()) {
    _this->_impl_.ec_public_key_65bytes_.Set(from._internal_ec_public_key_65bytes(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KeyInfo)
}

inline void KeyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_32bytes_){}
    , decltype(_impl_.ec_public_key_65bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.salt_32bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_32bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ec_public_key_65bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec_public_key_65bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyInfo::~KeyInfo() {
  // @@protoc_insertion_point(destructor:KeyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.salt_32bytes_.Destroy();
  _impl_.ec_public_key_65bytes_.Destroy();
}

void KeyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.salt_32bytes_.ClearToEmpty();
  _impl_.ec_public_key_65bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes salt_32bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt_32bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ec_public_key_65bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ec_public_key_65bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes salt_32bytes = 1;
  if (!this->_internal_salt_32bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_salt_32bytes(), target);
  }

  // bytes ec_public_key_65bytes = 2;
  if (!this->_internal_ec_public_key_65bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ec_public_key_65bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyInfo)
  return target;
}

size_t KeyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes salt_32bytes = 1;
  if (!this->_internal_salt_32bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt_32bytes());
  }

  // bytes ec_public_key_65bytes = 2;
  if (!this->_internal_ec_public_key_65bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ec_public_key_65bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyInfo::GetClassData() const { return &_class_data_; }


void KeyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyInfo*>(&to_msg);
  auto& from = static_cast<const KeyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KeyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_salt_32bytes().empty()) {
    _this->_internal_set_salt_32bytes(from._internal_salt_32bytes());
  }
  if (!from._internal_ec_public_key_65bytes().empty()) {
    _this->_internal_set_ec_public_key_65bytes(from._internal_ec_public_key_65bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyInfo::CopyFrom(const KeyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyInfo::IsInitialized() const {
  return true;
}

void KeyInfo::InternalSwap(KeyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_32bytes_, lhs_arena,
      &other->_impl_.salt_32bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ec_public_key_65bytes_, lhs_arena,
      &other->_impl_.ec_public_key_65bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_key_5fexchange_2eproto_getter, &descriptor_table_key_5fexchange_2eproto_once,
      file_level_metadata_key_5fexchange_2eproto[2]);
}

// ===================================================================

class Token::_Internal {
 public:
};

Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Token* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_3bytes_){}
    , decltype(_impl_.hmac_3bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.salt_3bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_3bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt_3bytes().empty()) {
    _this->_impl_.salt_3bytes_.Set(from._internal_salt_3bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hmac_3bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmac_3bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hmac_3bytes().empty()) {
    _this->_impl_.hmac_3bytes_.Set(from._internal_hmac_3bytes(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Token)
}

inline void Token::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_3bytes_){}
    , decltype(_impl_.hmac_3bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.salt_3bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_3bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hmac_3bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmac_3bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.salt_3bytes_.Destroy();
  _impl_.hmac_3bytes_.Destroy();
}

void Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.salt_3bytes_.ClearToEmpty();
  _impl_.hmac_3bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes salt_3bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt_3bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hmac_3bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hmac_3bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes salt_3bytes = 1;
  if (!this->_internal_salt_3bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_salt_3bytes(), target);
  }

  // bytes hmac_3bytes = 2;
  if (!this->_internal_hmac_3bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hmac_3bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes salt_3bytes = 1;
  if (!this->_internal_salt_3bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt_3bytes());
  }

  // bytes hmac_3bytes = 2;
  if (!this->_internal_hmac_3bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hmac_3bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }


void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Token*>(&to_msg);
  auto& from = static_cast<const Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Token)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_salt_3bytes().empty()) {
    _this->_internal_set_salt_3bytes(from._internal_salt_3bytes());
  }
  if (!from._internal_hmac_3bytes().empty()) {
    _this->_internal_set_hmac_3bytes(from._internal_hmac_3bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_3bytes_, lhs_arena,
      &other->_impl_.salt_3bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hmac_3bytes_, lhs_arena,
      &other->_impl_.hmac_3bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_key_5fexchange_2eproto_getter, &descriptor_table_key_5fexchange_2eproto_once,
      file_level_metadata_key_5fexchange_2eproto[3]);
}

// ===================================================================

class Ciphertext::_Internal {
 public:
  static const ::Token& token(const Ciphertext* msg);
};

const ::Token&
Ciphertext::_Internal::token(const Ciphertext* msg) {
  return *msg->_impl_.token_;
}
Ciphertext::Ciphertext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ciphertext)
}
Ciphertext::Ciphertext(const Ciphertext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ciphertext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aes_iv_12bytes_){}
    , decltype(_impl_.ciphertext_nbytes_){}
    , decltype(_impl_.aes_tag_16bytes_){}
    , decltype(_impl_.token_){nullptr}
    , decltype(_impl_.cipher_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.aes_iv_12bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aes_iv_12bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aes_iv_12bytes().empty()) {
    _this->_impl_.aes_iv_12bytes_.Set(from._internal_aes_iv_12bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ciphertext_nbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ciphertext_nbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ciphertext_nbytes().empty()) {
    _this->_impl_.ciphertext_nbytes_.Set(from._internal_ciphertext_nbytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aes_tag_16bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aes_tag_16bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aes_tag_16bytes().empty()) {
    _this->_impl_.aes_tag_16bytes_.Set(from._internal_aes_tag_16bytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_token()) {
    _this->_impl_.token_ = new ::Token(*from._impl_.token_);
  }
  _this->_impl_.cipher_version_ = from._impl_.cipher_version_;
  // @@protoc_insertion_point(copy_constructor:Ciphertext)
}

inline void Ciphertext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aes_iv_12bytes_){}
    , decltype(_impl_.ciphertext_nbytes_){}
    , decltype(_impl_.aes_tag_16bytes_){}
    , decltype(_impl_.token_){nullptr}
    , decltype(_impl_.cipher_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aes_iv_12bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aes_iv_12bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ciphertext_nbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ciphertext_nbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aes_tag_16bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aes_tag_16bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ciphertext::~Ciphertext() {
  // @@protoc_insertion_point(destructor:Ciphertext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ciphertext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aes_iv_12bytes_.Destroy();
  _impl_.ciphertext_nbytes_.Destroy();
  _impl_.aes_tag_16bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.token_;
}

void Ciphertext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ciphertext::Clear() {
// @@protoc_insertion_point(message_clear_start:Ciphertext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aes_iv_12bytes_.ClearToEmpty();
  _impl_.ciphertext_nbytes_.ClearToEmpty();
  _impl_.aes_tag_16bytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.token_ != nullptr) {
    delete _impl_.token_;
  }
  _impl_.token_ = nullptr;
  _impl_.cipher_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ciphertext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cipher_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cipher_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes aes_iv_12bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_aes_iv_12bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ciphertext_nbytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ciphertext_nbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes aes_tag_16bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_aes_tag_16bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Token token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ciphertext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ciphertext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cipher_version = 1;
  if (this->_internal_cipher_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cipher_version(), target);
  }

  // bytes aes_iv_12bytes = 2;
  if (!this->_internal_aes_iv_12bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_aes_iv_12bytes(), target);
  }

  // bytes ciphertext_nbytes = 3;
  if (!this->_internal_ciphertext_nbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ciphertext_nbytes(), target);
  }

  // bytes aes_tag_16bytes = 4;
  if (!this->_internal_aes_tag_16bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_aes_tag_16bytes(), target);
  }

  // .Token token = 5;
  if (this->_internal_has_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ciphertext)
  return target;
}

size_t Ciphertext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ciphertext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes aes_iv_12bytes = 2;
  if (!this->_internal_aes_iv_12bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aes_iv_12bytes());
  }

  // bytes ciphertext_nbytes = 3;
  if (!this->_internal_ciphertext_nbytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ciphertext_nbytes());
  }

  // bytes aes_tag_16bytes = 4;
  if (!this->_internal_aes_tag_16bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aes_tag_16bytes());
  }

  // .Token token = 5;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_);
  }

  // int32 cipher_version = 1;
  if (this->_internal_cipher_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cipher_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ciphertext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ciphertext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ciphertext::GetClassData() const { return &_class_data_; }


void Ciphertext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ciphertext*>(&to_msg);
  auto& from = static_cast<const Ciphertext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ciphertext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aes_iv_12bytes().empty()) {
    _this->_internal_set_aes_iv_12bytes(from._internal_aes_iv_12bytes());
  }
  if (!from._internal_ciphertext_nbytes().empty()) {
    _this->_internal_set_ciphertext_nbytes(from._internal_ciphertext_nbytes());
  }
  if (!from._internal_aes_tag_16bytes().empty()) {
    _this->_internal_set_aes_tag_16bytes(from._internal_aes_tag_16bytes());
  }
  if (from._internal_has_token()) {
    _this->_internal_mutable_token()->::Token::MergeFrom(
        from._internal_token());
  }
  if (from._internal_cipher_version() != 0) {
    _this->_internal_set_cipher_version(from._internal_cipher_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ciphertext::CopyFrom(const Ciphertext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ciphertext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ciphertext::IsInitialized() const {
  return true;
}

void Ciphertext::InternalSwap(Ciphertext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aes_iv_12bytes_, lhs_arena,
      &other->_impl_.aes_iv_12bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ciphertext_nbytes_, lhs_arena,
      &other->_impl_.ciphertext_nbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aes_tag_16bytes_, lhs_arena,
      &other->_impl_.aes_tag_16bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ciphertext, _impl_.cipher_version_)
      + sizeof(Ciphertext::_impl_.cipher_version_)
      - PROTOBUF_FIELD_OFFSET(Ciphertext, _impl_.token_)>(
          reinterpret_cast<char*>(&_impl_.token_),
          reinterpret_cast<char*>(&other->_impl_.token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ciphertext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_key_5fexchange_2eproto_getter, &descriptor_table_key_5fexchange_2eproto_once,
      file_level_metadata_key_5fexchange_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KeyExchangeRequest*
Arena::CreateMaybeMessage< ::KeyExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeyExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::KeyExchangeResponse*
Arena::CreateMaybeMessage< ::KeyExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeyExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::KeyInfo*
Arena::CreateMaybeMessage< ::KeyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Token*
Arena::CreateMaybeMessage< ::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::Ciphertext*
Arena::CreateMaybeMessage< ::Ciphertext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ciphertext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
