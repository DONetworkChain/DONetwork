// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#include "sdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GetSDKReq::GetSDKReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.toaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSDKReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSDKReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSDKReqDefaultTypeInternal() {}
  union {
    GetSDKReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSDKReqDefaultTypeInternal _GetSDKReq_default_instance_;
PROTOBUF_CONSTEXPR SDKUtxo::SDKUtxo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.n_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKUtxoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKUtxoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKUtxoDefaultTypeInternal() {}
  union {
    SDKUtxo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKUtxoDefaultTypeInternal _SDKUtxo_default_instance_;
PROTOBUF_CONSTEXPR SDKBonusamout::SDKBonusamout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invest_amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKBonusamoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKBonusamoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKBonusamoutDefaultTypeInternal() {}
  union {
    SDKBonusamout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKBonusamoutDefaultTypeInternal _SDKBonusamout_default_instance_;
PROTOBUF_CONSTEXPR SDKBonusTx::SDKBonusTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utxo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKBonusTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKBonusTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKBonusTxDefaultTypeInternal() {}
  union {
    SDKBonusTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKBonusTxDefaultTypeInternal _SDKBonusTx_default_instance_;
PROTOBUF_CONSTEXPR SDKPledgeTx::SDKPledgeTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utxo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKPledgeTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKPledgeTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKPledgeTxDefaultTypeInternal() {}
  union {
    SDKPledgeTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKPledgeTxDefaultTypeInternal _SDKPledgeTx_default_instance_;
PROTOBUF_CONSTEXPR Claimtx::Claimtx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utxo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClaimtxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClaimtxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClaimtxDefaultTypeInternal() {}
  union {
    Claimtx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClaimtxDefaultTypeInternal _Claimtx_default_instance_;
PROTOBUF_CONSTEXPR AbnormalAddrCnt::AbnormalAddrCnt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbnormalAddrCntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbnormalAddrCntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbnormalAddrCntDefaultTypeInternal() {}
  union {
    AbnormalAddrCnt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbnormalAddrCntDefaultTypeInternal _AbnormalAddrCnt_default_instance_;
PROTOBUF_CONSTEXPR SDKClaimBonusTx::SDKClaimBonusTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utxo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKClaimBonusTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKClaimBonusTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKClaimBonusTxDefaultTypeInternal() {}
  union {
    SDKClaimBonusTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKClaimBonusTxDefaultTypeInternal _SDKClaimBonusTx_default_instance_;
PROTOBUF_CONSTEXPR SDKNodeInfo::SDKNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base58addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_base58addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listen_ip_)*/0u
  , /*decltype(_impl_.listen_port_)*/0u
  , /*decltype(_impl_.public_ip_)*/0u
  , /*decltype(_impl_.public_port_)*/0u
  , /*decltype(_impl_.time_stamp_)*/uint64_t{0u}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKNodeInfoDefaultTypeInternal() {}
  union {
    SDKNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKNodeInfoDefaultTypeInternal _SDKNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR GetSDKAck::GetSDKAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.utxos_)*/{}
  , /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.bonusamount_)*/{}
  , /*decltype(_impl_.pledgetx_)*/{}
  , /*decltype(_impl_.pledgeaddr_)*/{}
  , /*decltype(_impl_.pledgeutxo_)*/{}
  , /*decltype(_impl_.bonusaddr_)*/{}
  , /*decltype(_impl_.investedaddr_)*/{}
  , /*decltype(_impl_.bonustx_)*/{}
  , /*decltype(_impl_.bonusaddrinvestutxos_)*/{}
  , /*decltype(_impl_.claimtx_)*/{}
  , /*decltype(_impl_.abnormaladdr_cnt_)*/{}
  , /*decltype(_impl_.nodeinfo_)*/{}
  , /*decltype(_impl_.claimbonustx_)*/{}
  , /*decltype(_impl_.claiminvestedaddr_)*/{}
  , /*decltype(_impl_.claimbonusaddrinvestutxos_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_.m2_)*/uint64_t{0u}
  , /*decltype(_impl_.totalinvest_)*/uint64_t{0u}
  , /*decltype(_impl_.totalawardamount_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/uint64_t{0u}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSDKAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSDKAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSDKAckDefaultTypeInternal() {}
  union {
    GetSDKAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSDKAckDefaultTypeInternal _GetSDKAck_default_instance_;
PROTOBUF_CONSTEXPR SDKContractDeployReq::SDKContractDeployReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deploy_amount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pubstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ncontracttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKContractDeployReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKContractDeployReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKContractDeployReqDefaultTypeInternal() {}
  union {
    SDKContractDeployReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKContractDeployReqDefaultTypeInternal _SDKContractDeployReq_default_instance_;
PROTOBUF_CONSTEXPR SDKContractDeployAck::SDKContractDeployAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vrfinfo_)*/nullptr
  , /*decltype(_impl_.top_)*/uint64_t{0u}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.isneedagent_flag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKContractDeployAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKContractDeployAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKContractDeployAckDefaultTypeInternal() {}
  union {
    SDKContractDeployAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKContractDeployAckDefaultTypeInternal _SDKContractDeployAck_default_instance_;
PROTOBUF_CONSTEXPR SDKContractCallReq::SDKContractCallReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.toaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deploy_strtxhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKContractCallReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKContractCallReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKContractCallReqDefaultTypeInternal() {}
  union {
    SDKContractCallReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKContractCallReqDefaultTypeInternal _SDKContractCallReq_default_instance_;
PROTOBUF_CONSTEXPR SDKContractCallAck::SDKContractCallAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vrfinfo_)*/nullptr
  , /*decltype(_impl_.top_)*/uint64_t{0u}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.isneedagent_flag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKContractCallAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKContractCallAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKContractCallAckDefaultTypeInternal() {}
  union {
    SDKContractCallAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKContractCallAckDefaultTypeInternal _SDKContractCallAck_default_instance_;
static ::_pb::Metadata file_level_metadata_sdk_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sdk_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2eproto = nullptr;

const uint32_t TableStruct_sdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSDKReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSDKReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::GetSDKReq, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::GetSDKReq, _impl_.toaddr_),
  PROTOBUF_FIELD_OFFSET(::GetSDKReq, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::GetSDKReq, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKUtxo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKUtxo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::SDKUtxo, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::SDKUtxo, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::SDKUtxo, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKBonusamout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKBonusamout, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::SDKBonusamout, _impl_.invest_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKBonusTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKBonusTx, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::SDKBonusTx, _impl_.utxo_),
  PROTOBUF_FIELD_OFFSET(::SDKBonusTx, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKPledgeTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKPledgeTx, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::SDKPledgeTx, _impl_.utxo_),
  PROTOBUF_FIELD_OFFSET(::SDKPledgeTx, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Claimtx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Claimtx, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::Claimtx, _impl_.utxo_),
  PROTOBUF_FIELD_OFFSET(::Claimtx, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AbnormalAddrCnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AbnormalAddrCnt, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::AbnormalAddrCnt, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKClaimBonusTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKClaimBonusTx, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::SDKClaimBonusTx, _impl_.utxo_),
  PROTOBUF_FIELD_OFFSET(::SDKClaimBonusTx, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.pub_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.base58addr_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.public_base58addr_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.listen_ip_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.listen_port_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.public_ip_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.public_port_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::SDKNodeInfo, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.utxos_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.blocks_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.bonusamount_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.pledgetx_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.pledgeaddr_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.pledgeutxo_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.bonusaddr_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.investedaddr_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.bonustx_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.bonusaddrinvestutxos_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.claimtx_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.abnormaladdr_cnt_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.m2_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.totalinvest_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.totalawardamount_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.nodeinfo_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.claimbonustx_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.claiminvestedaddr_),
  PROTOBUF_FIELD_OFFSET(::GetSDKAck, _impl_.claimbonusaddrinvestutxos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployReq, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployReq, _impl_.deploy_amount_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployReq, _impl_.ncontracttype_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployReq, _impl_.pubstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.isneedagent_flag_),
  PROTOBUF_FIELD_OFFSET(::SDKContractDeployAck, _impl_.vrfinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKContractCallReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKContractCallReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallReq, _impl_.fromaddr_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallReq, _impl_.toaddr_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallReq, _impl_.deploy_strtxhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.isneedagent_flag_),
  PROTOBUF_FIELD_OFFSET(::SDKContractCallAck, _impl_.vrfinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GetSDKReq)},
  { 11, -1, -1, sizeof(::SDKUtxo)},
  { 21, -1, -1, sizeof(::SDKBonusamout)},
  { 29, -1, -1, sizeof(::SDKBonusTx)},
  { 38, -1, -1, sizeof(::SDKPledgeTx)},
  { 47, -1, -1, sizeof(::Claimtx)},
  { 56, -1, -1, sizeof(::AbnormalAddrCnt)},
  { 64, -1, -1, sizeof(::SDKClaimBonusTx)},
  { 73, -1, -1, sizeof(::SDKNodeInfo)},
  { 93, -1, -1, sizeof(::GetSDKAck)},
  { 123, -1, -1, sizeof(::SDKContractDeployReq)},
  { 134, -1, -1, sizeof(::SDKContractDeployAck)},
  { 147, -1, -1, sizeof(::SDKContractCallReq)},
  { 157, -1, -1, sizeof(::SDKContractCallAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_GetSDKReq_default_instance_._instance,
  &::_SDKUtxo_default_instance_._instance,
  &::_SDKBonusamout_default_instance_._instance,
  &::_SDKBonusTx_default_instance_._instance,
  &::_SDKPledgeTx_default_instance_._instance,
  &::_Claimtx_default_instance_._instance,
  &::_AbnormalAddrCnt_default_instance_._instance,
  &::_SDKClaimBonusTx_default_instance_._instance,
  &::_SDKNodeInfo_default_instance_._instance,
  &::_GetSDKAck_default_instance_._instance,
  &::_SDKContractDeployReq_default_instance_._instance,
  &::_SDKContractDeployAck_default_instance_._instance,
  &::_SDKContractCallReq_default_instance_._instance,
  &::_SDKContractCallAck_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsdk.proto\032\021ca_protomsg.proto\"Y\n\tGetSDK"
  "Req\022\017\n\007version\030\001 \001(\t\022\017\n\007address\030\002 \003(\t\022\016\n"
  "\006toaddr\030\003 \001(\t\022\014\n\004time\030\004 \001(\004\022\014\n\004type\030\005 \001("
  "\004\"B\n\007SDKUtxo\022\017\n\007address\030\001 \001(\t\022\014\n\004hash\030\002 "
  "\001(\t\022\r\n\005value\030\003 \001(\004\022\t\n\001n\030\004 \001(\r\"7\n\rSDKBonu"
  "samout\022\017\n\007address\030\001 \001(\t\022\025\n\rinvest_amount"
  "\030\002 \001(\004\"7\n\nSDKBonusTx\022\017\n\007address\030\001 \001(\t\022\014\n"
  "\004utxo\030\002 \001(\t\022\n\n\002tx\030\003 \001(\014\"8\n\013SDKPledgeTx\022\017"
  "\n\007address\030\001 \001(\t\022\014\n\004utxo\030\002 \001(\014\022\n\n\002tx\030\003 \001("
  "\014\"4\n\007Claimtx\022\017\n\007address\030\001 \001(\t\022\014\n\004utxo\030\002 "
  "\001(\t\022\n\n\002tx\030\003 \001(\014\"1\n\017AbnormalAddrCnt\022\017\n\007ad"
  "dress\030\001 \001(\t\022\r\n\005count\030\002 \001(\004\"<\n\017SDKClaimBo"
  "nusTx\022\017\n\007address\030\001 \001(\t\022\014\n\004utxo\030\002 \001(\t\022\n\n\002"
  "tx\030\003 \001(\014\"\212\002\n\013SDKNodeInfo\022\013\n\003pub\030\001 \001(\014\022\014\n"
  "\004sign\030\002 \001(\014\022\020\n\010identity\030\003 \001(\014\022\022\n\nbase58a"
  "ddr\030\004 \001(\t\022\031\n\021public_base58addr\030\005 \001(\t\022\014\n\004"
  "name\030\006 \001(\t\022\014\n\004logo\030\007 \001(\t\022\021\n\tlisten_ip\030\010 "
  "\001(\r\022\023\n\013listen_port\030\t \001(\r\022\021\n\tpublic_ip\030\n "
  "\001(\r\022\023\n\013public_port\030\013 \001(\r\022\016\n\006height\030\014 \001(\r"
  "\022\022\n\ntime_stamp\030\r \001(\004\022\017\n\007version\030\016 \001(\t\"\334\004"
  "\n\tGetSDKAck\022\017\n\007version\030\001 \001(\t\022\014\n\004code\030\002 \001"
  "(\005\022\017\n\007message\030\003 \001(\t\022\016\n\006height\030\004 \001(\004\022\027\n\005u"
  "txos\030\005 \003(\0132\010.SDKUtxo\022\016\n\006blocks\030\006 \003(\014\022#\n\013"
  "bonusamount\030\010 \003(\0132\016.SDKBonusamout\022\036\n\010ple"
  "dgetx\030\t \003(\0132\014.SDKPledgeTx\022\022\n\npledgeaddr\030"
  "\n \003(\t\022\022\n\npledgeutxo\030\013 \003(\t\022\021\n\tBonusAddr\030\014"
  " \003(\t\022\024\n\014InvestedAddr\030\r \003(\t\022\034\n\007BonusTx\030\016 "
  "\003(\0132\013.SDKBonusTx\022\034\n\024BonusAddrInvestUtxos"
  "\030\017 \003(\t\022\031\n\007claimtx\030\020 \003(\0132\010.Claimtx\022*\n\020abn"
  "ormaladdr_cnt\030\021 \003(\0132\020.AbnormalAddrCnt\022\n\n"
  "\002M2\030\022 \001(\004\022\023\n\013Totalinvest\030\023 \001(\004\022\030\n\020TotalA"
  "wardAmount\030\024 \001(\004\022\036\n\010nodeinfo\030\026 \003(\0132\014.SDK"
  "NodeInfo\022\014\n\004type\030\027 \001(\004\022&\n\014ClaimBonusTx\030\030"
  " \003(\0132\020.SDKClaimBonusTx\022\031\n\021ClaimInvestedA"
  "ddr\030\032 \003(\t\022!\n\031ClaimBonusAddrInvestUtxos\030\033"
  " \003(\t\"v\n\024SDKContractDeployReq\022\017\n\007version\030"
  "\001 \001(\t\022\017\n\007address\030\002 \001(\t\022\025\n\rdeploy_amount\030"
  "\003 \001(\t\022\025\n\rnContractType\030\004 \001(\005\022\016\n\006pubStr\030\005"
  " \001(\t\"\237\001\n\024SDKContractDeployAck\022\017\n\007version"
  "\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\022\n\n"
  "\002tx\030\004 \001(\014\022\013\n\003top\030\005 \001(\004\022\'\n\020isNeedAgent_fl"
  "ag\030\010 \001(\0162\r.vrfAgentType\022\025\n\007vrfInfo\030\t \001(\013"
  "2\004.Vrf\"a\n\022SDKContractCallReq\022\017\n\007version\030"
  "\001 \001(\t\022\020\n\010fromaddr\030\002 \001(\t\022\016\n\006toaddr\030\003 \001(\t\022"
  "\030\n\020deploy_strTxHash\030\004 \001(\t\"\235\001\n\022SDKContrac"
  "tCallAck\022\017\n\007version\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\022"
  "\017\n\007message\030\003 \001(\t\022\n\n\002tx\030\004 \001(\014\022\013\n\003top\030\005 \001("
  "\004\022\'\n\020isNeedAgent_flag\030\010 \001(\0162\r.vrfAgentTy"
  "pe\022\025\n\007vrfInfo\030\t \001(\0132\004.Vrf*o\n\014vrfAgentTyp"
  "e\022\030\n\024vrfAgentType_defalut\020\000\022\024\n\020vrfAgentT"
  "ype_vrf\020\001\022\026\n\022vrfAgentType_local\020\002\022\027\n\023vrf"
  "AgentType_unknow\020\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2eproto_deps[1] = {
  &::descriptor_table_ca_5fprotomsg_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2eproto = {
    false, false, 2066, descriptor_table_protodef_sdk_2eproto,
    "sdk.proto",
    &descriptor_table_sdk_2eproto_once, descriptor_table_sdk_2eproto_deps, 1, 14,
    schemas, file_default_instances, TableStruct_sdk_2eproto::offsets,
    file_level_metadata_sdk_2eproto, file_level_enum_descriptors_sdk_2eproto,
    file_level_service_descriptors_sdk_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2eproto_getter() {
  return &descriptor_table_sdk_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2eproto(&descriptor_table_sdk_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* vrfAgentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdk_2eproto);
  return file_level_enum_descriptors_sdk_2eproto[0];
}
bool vrfAgentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetSDKReq::_Internal {
 public:
};

GetSDKReq::GetSDKReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetSDKReq)
}
GetSDKReq::GetSDKReq(const GetSDKReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSDKReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){from._impl_.address_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.toaddr_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.toaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_toaddr().empty()) {
    _this->_impl_.toaddr_.Set(from._internal_toaddr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:GetSDKReq)
}

inline void GetSDKReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.toaddr_){}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.type_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.toaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSDKReq::~GetSDKReq() {
  // @@protoc_insertion_point(destructor:GetSDKReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSDKReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.toaddr_.Destroy();
}

void GetSDKReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSDKReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSDKReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.toaddr_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSDKReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetSDKReq.version"));
        } else
          goto handle_unusual;
        continue;
      // repeated string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKReq.address"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string toaddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_toaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetSDKReq.toaddr"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSDKReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSDKReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated string address = 2;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKReq.address");
    target = stream->WriteString(2, s, target);
  }

  // string toaddr = 3;
  if (!this->_internal_toaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toaddr().data(), static_cast<int>(this->_internal_toaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKReq.toaddr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_toaddr(), target);
  }

  // uint64 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time(), target);
  }

  // uint64 type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSDKReq)
  return target;
}

size_t GetSDKReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSDKReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.address_.size());
  for (int i = 0, n = _impl_.address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.address_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string toaddr = 3;
  if (!this->_internal_toaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toaddr());
  }

  // uint64 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  // uint64 type = 5;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSDKReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSDKReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSDKReq::GetClassData() const { return &_class_data_; }


void GetSDKReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSDKReq*>(&to_msg);
  auto& from = static_cast<const GetSDKReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetSDKReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_toaddr().empty()) {
    _this->_internal_set_toaddr(from._internal_toaddr());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSDKReq::CopyFrom(const GetSDKReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSDKReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSDKReq::IsInitialized() const {
  return true;
}

void GetSDKReq::InternalSwap(GetSDKReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toaddr_, lhs_arena,
      &other->_impl_.toaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSDKReq, _impl_.type_)
      + sizeof(GetSDKReq::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetSDKReq, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSDKReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[0]);
}

// ===================================================================

class SDKUtxo::_Internal {
 public:
};

SDKUtxo::SDKUtxo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKUtxo)
}
SDKUtxo::SDKUtxo(const SDKUtxo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKUtxo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.n_));
  // @@protoc_insertion_point(copy_constructor:SDKUtxo)
}

inline void SDKUtxo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.n_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKUtxo::~SDKUtxo() {
  // @@protoc_insertion_point(destructor:SDKUtxo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKUtxo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.hash_.Destroy();
}

void SDKUtxo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKUtxo::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKUtxo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKUtxo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKUtxo.address"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKUtxo.hash"));
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 n = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKUtxo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKUtxo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKUtxo.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKUtxo.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // uint64 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  // uint32 n = 4;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKUtxo)
  return target;
}

size_t SDKUtxo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKUtxo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint64 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  // uint32 n = 4;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKUtxo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKUtxo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKUtxo::GetClassData() const { return &_class_data_; }


void SDKUtxo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKUtxo*>(&to_msg);
  auto& from = static_cast<const SDKUtxo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKUtxo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKUtxo::CopyFrom(const SDKUtxo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKUtxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKUtxo::IsInitialized() const {
  return true;
}

void SDKUtxo::InternalSwap(SDKUtxo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKUtxo, _impl_.n_)
      + sizeof(SDKUtxo::_impl_.n_)
      - PROTOBUF_FIELD_OFFSET(SDKUtxo, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKUtxo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[1]);
}

// ===================================================================

class SDKBonusamout::_Internal {
 public:
};

SDKBonusamout::SDKBonusamout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKBonusamout)
}
SDKBonusamout::SDKBonusamout(const SDKBonusamout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKBonusamout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.invest_amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.invest_amount_ = from._impl_.invest_amount_;
  // @@protoc_insertion_point(copy_constructor:SDKBonusamout)
}

inline void SDKBonusamout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.invest_amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKBonusamout::~SDKBonusamout() {
  // @@protoc_insertion_point(destructor:SDKBonusamout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKBonusamout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void SDKBonusamout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKBonusamout::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKBonusamout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.invest_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKBonusamout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKBonusamout.address"));
        } else
          goto handle_unusual;
        continue;
      // uint64 invest_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.invest_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKBonusamout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKBonusamout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKBonusamout.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 invest_amount = 2;
  if (this->_internal_invest_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_invest_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKBonusamout)
  return target;
}

size_t SDKBonusamout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKBonusamout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 invest_amount = 2;
  if (this->_internal_invest_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_invest_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKBonusamout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKBonusamout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKBonusamout::GetClassData() const { return &_class_data_; }


void SDKBonusamout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKBonusamout*>(&to_msg);
  auto& from = static_cast<const SDKBonusamout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKBonusamout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_invest_amount() != 0) {
    _this->_internal_set_invest_amount(from._internal_invest_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKBonusamout::CopyFrom(const SDKBonusamout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKBonusamout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKBonusamout::IsInitialized() const {
  return true;
}

void SDKBonusamout::InternalSwap(SDKBonusamout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.invest_amount_, other->_impl_.invest_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKBonusamout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[2]);
}

// ===================================================================

class SDKBonusTx::_Internal {
 public:
};

SDKBonusTx::SDKBonusTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKBonusTx)
}
SDKBonusTx::SDKBonusTx(const SDKBonusTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKBonusTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_utxo().empty()) {
    _this->_impl_.utxo_.Set(from._internal_utxo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SDKBonusTx)
}

inline void SDKBonusTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKBonusTx::~SDKBonusTx() {
  // @@protoc_insertion_point(destructor:SDKBonusTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKBonusTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.utxo_.Destroy();
  _impl_.tx_.Destroy();
}

void SDKBonusTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKBonusTx::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKBonusTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.utxo_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKBonusTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKBonusTx.address"));
        } else
          goto handle_unusual;
        continue;
      // string utxo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_utxo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKBonusTx.utxo"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKBonusTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKBonusTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKBonusTx.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string utxo = 2;
  if (!this->_internal_utxo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utxo().data(), static_cast<int>(this->_internal_utxo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKBonusTx.utxo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utxo(), target);
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKBonusTx)
  return target;
}

size_t SDKBonusTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKBonusTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string utxo = 2;
  if (!this->_internal_utxo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utxo());
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKBonusTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKBonusTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKBonusTx::GetClassData() const { return &_class_data_; }


void SDKBonusTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKBonusTx*>(&to_msg);
  auto& from = static_cast<const SDKBonusTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKBonusTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_utxo().empty()) {
    _this->_internal_set_utxo(from._internal_utxo());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKBonusTx::CopyFrom(const SDKBonusTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKBonusTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKBonusTx::IsInitialized() const {
  return true;
}

void SDKBonusTx::InternalSwap(SDKBonusTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utxo_, lhs_arena,
      &other->_impl_.utxo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKBonusTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[3]);
}

// ===================================================================

class SDKPledgeTx::_Internal {
 public:
};

SDKPledgeTx::SDKPledgeTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKPledgeTx)
}
SDKPledgeTx::SDKPledgeTx(const SDKPledgeTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKPledgeTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_utxo().empty()) {
    _this->_impl_.utxo_.Set(from._internal_utxo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SDKPledgeTx)
}

inline void SDKPledgeTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKPledgeTx::~SDKPledgeTx() {
  // @@protoc_insertion_point(destructor:SDKPledgeTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKPledgeTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.utxo_.Destroy();
  _impl_.tx_.Destroy();
}

void SDKPledgeTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKPledgeTx::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKPledgeTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.utxo_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKPledgeTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKPledgeTx.address"));
        } else
          goto handle_unusual;
        continue;
      // bytes utxo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_utxo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKPledgeTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKPledgeTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKPledgeTx.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bytes utxo = 2;
  if (!this->_internal_utxo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_utxo(), target);
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKPledgeTx)
  return target;
}

size_t SDKPledgeTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKPledgeTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes utxo = 2;
  if (!this->_internal_utxo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_utxo());
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKPledgeTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKPledgeTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKPledgeTx::GetClassData() const { return &_class_data_; }


void SDKPledgeTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKPledgeTx*>(&to_msg);
  auto& from = static_cast<const SDKPledgeTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKPledgeTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_utxo().empty()) {
    _this->_internal_set_utxo(from._internal_utxo());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKPledgeTx::CopyFrom(const SDKPledgeTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKPledgeTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKPledgeTx::IsInitialized() const {
  return true;
}

void SDKPledgeTx::InternalSwap(SDKPledgeTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utxo_, lhs_arena,
      &other->_impl_.utxo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKPledgeTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[4]);
}

// ===================================================================

class Claimtx::_Internal {
 public:
};

Claimtx::Claimtx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Claimtx)
}
Claimtx::Claimtx(const Claimtx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Claimtx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_utxo().empty()) {
    _this->_impl_.utxo_.Set(from._internal_utxo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Claimtx)
}

inline void Claimtx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Claimtx::~Claimtx() {
  // @@protoc_insertion_point(destructor:Claimtx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Claimtx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.utxo_.Destroy();
  _impl_.tx_.Destroy();
}

void Claimtx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Claimtx::Clear() {
// @@protoc_insertion_point(message_clear_start:Claimtx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.utxo_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Claimtx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Claimtx.address"));
        } else
          goto handle_unusual;
        continue;
      // string utxo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_utxo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Claimtx.utxo"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Claimtx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Claimtx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Claimtx.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string utxo = 2;
  if (!this->_internal_utxo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utxo().data(), static_cast<int>(this->_internal_utxo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Claimtx.utxo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utxo(), target);
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Claimtx)
  return target;
}

size_t Claimtx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Claimtx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string utxo = 2;
  if (!this->_internal_utxo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utxo());
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Claimtx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Claimtx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Claimtx::GetClassData() const { return &_class_data_; }


void Claimtx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Claimtx*>(&to_msg);
  auto& from = static_cast<const Claimtx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Claimtx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_utxo().empty()) {
    _this->_internal_set_utxo(from._internal_utxo());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Claimtx::CopyFrom(const Claimtx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Claimtx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Claimtx::IsInitialized() const {
  return true;
}

void Claimtx::InternalSwap(Claimtx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utxo_, lhs_arena,
      &other->_impl_.utxo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Claimtx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[5]);
}

// ===================================================================

class AbnormalAddrCnt::_Internal {
 public:
};

AbnormalAddrCnt::AbnormalAddrCnt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AbnormalAddrCnt)
}
AbnormalAddrCnt::AbnormalAddrCnt(const AbnormalAddrCnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbnormalAddrCnt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:AbnormalAddrCnt)
}

inline void AbnormalAddrCnt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AbnormalAddrCnt::~AbnormalAddrCnt() {
  // @@protoc_insertion_point(destructor:AbnormalAddrCnt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbnormalAddrCnt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void AbnormalAddrCnt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbnormalAddrCnt::Clear() {
// @@protoc_insertion_point(message_clear_start:AbnormalAddrCnt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbnormalAddrCnt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AbnormalAddrCnt.address"));
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbnormalAddrCnt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AbnormalAddrCnt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AbnormalAddrCnt.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AbnormalAddrCnt)
  return target;
}

size_t AbnormalAddrCnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AbnormalAddrCnt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbnormalAddrCnt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbnormalAddrCnt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbnormalAddrCnt::GetClassData() const { return &_class_data_; }


void AbnormalAddrCnt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbnormalAddrCnt*>(&to_msg);
  auto& from = static_cast<const AbnormalAddrCnt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AbnormalAddrCnt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbnormalAddrCnt::CopyFrom(const AbnormalAddrCnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AbnormalAddrCnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbnormalAddrCnt::IsInitialized() const {
  return true;
}

void AbnormalAddrCnt::InternalSwap(AbnormalAddrCnt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbnormalAddrCnt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[6]);
}

// ===================================================================

class SDKClaimBonusTx::_Internal {
 public:
};

SDKClaimBonusTx::SDKClaimBonusTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKClaimBonusTx)
}
SDKClaimBonusTx::SDKClaimBonusTx(const SDKClaimBonusTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKClaimBonusTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_utxo().empty()) {
    _this->_impl_.utxo_.Set(from._internal_utxo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SDKClaimBonusTx)
}

inline void SDKClaimBonusTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.utxo_){}
    , decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utxo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utxo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKClaimBonusTx::~SDKClaimBonusTx() {
  // @@protoc_insertion_point(destructor:SDKClaimBonusTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKClaimBonusTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.utxo_.Destroy();
  _impl_.tx_.Destroy();
}

void SDKClaimBonusTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKClaimBonusTx::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKClaimBonusTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.utxo_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKClaimBonusTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKClaimBonusTx.address"));
        } else
          goto handle_unusual;
        continue;
      // string utxo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_utxo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKClaimBonusTx.utxo"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKClaimBonusTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKClaimBonusTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKClaimBonusTx.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string utxo = 2;
  if (!this->_internal_utxo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utxo().data(), static_cast<int>(this->_internal_utxo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKClaimBonusTx.utxo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utxo(), target);
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKClaimBonusTx)
  return target;
}

size_t SDKClaimBonusTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKClaimBonusTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string utxo = 2;
  if (!this->_internal_utxo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utxo());
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKClaimBonusTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKClaimBonusTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKClaimBonusTx::GetClassData() const { return &_class_data_; }


void SDKClaimBonusTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKClaimBonusTx*>(&to_msg);
  auto& from = static_cast<const SDKClaimBonusTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKClaimBonusTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_utxo().empty()) {
    _this->_internal_set_utxo(from._internal_utxo());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKClaimBonusTx::CopyFrom(const SDKClaimBonusTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKClaimBonusTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKClaimBonusTx::IsInitialized() const {
  return true;
}

void SDKClaimBonusTx::InternalSwap(SDKClaimBonusTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utxo_, lhs_arena,
      &other->_impl_.utxo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKClaimBonusTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[7]);
}

// ===================================================================

class SDKNodeInfo::_Internal {
 public:
};

SDKNodeInfo::SDKNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKNodeInfo)
}
SDKNodeInfo::SDKNodeInfo(const SDKNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.base58addr_){}
    , decltype(_impl_.public_base58addr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.listen_ip_){}
    , decltype(_impl_.listen_port_){}
    , decltype(_impl_.public_ip_){}
    , decltype(_impl_.public_port_){}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub().empty()) {
    _this->_impl_.pub_.Set(from._internal_pub(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base58addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base58addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base58addr().empty()) {
    _this->_impl_.base58addr_.Set(from._internal_base58addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_base58addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_base58addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_base58addr().empty()) {
    _this->_impl_.public_base58addr_.Set(from._internal_public_base58addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.listen_ip_, &from._impl_.listen_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.listen_ip_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:SDKNodeInfo)
}

inline void SDKNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.base58addr_){}
    , decltype(_impl_.public_base58addr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.listen_ip_){0u}
    , decltype(_impl_.listen_port_){0u}
    , decltype(_impl_.public_ip_){0u}
    , decltype(_impl_.public_port_){0u}
    , decltype(_impl_.time_stamp_){uint64_t{0u}}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base58addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base58addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_base58addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_base58addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKNodeInfo::~SDKNodeInfo() {
  // @@protoc_insertion_point(destructor:SDKNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pub_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.base58addr_.Destroy();
  _impl_.public_base58addr_.Destroy();
  _impl_.name_.Destroy();
  _impl_.logo_.Destroy();
  _impl_.version_.Destroy();
}

void SDKNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pub_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.base58addr_.ClearToEmpty();
  _impl_.public_base58addr_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  ::memset(&_impl_.listen_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.listen_ip_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string base58addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_base58addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKNodeInfo.base58addr"));
        } else
          goto handle_unusual;
        continue;
      // string public_base58addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_public_base58addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKNodeInfo.public_base58addr"));
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKNodeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKNodeInfo.logo"));
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.listen_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 public_ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 public_port = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time_stamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKNodeInfo.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub = 1;
  if (!this->_internal_pub().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pub(), target);
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sign(), target);
  }

  // bytes identity = 3;
  if (!this->_internal_identity().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_identity(), target);
  }

  // string base58addr = 4;
  if (!this->_internal_base58addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base58addr().data(), static_cast<int>(this->_internal_base58addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKNodeInfo.base58addr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_base58addr(), target);
  }

  // string public_base58addr = 5;
  if (!this->_internal_public_base58addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_base58addr().data(), static_cast<int>(this->_internal_public_base58addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKNodeInfo.public_base58addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_public_base58addr(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKNodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKNodeInfo.logo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logo(), target);
  }

  // uint32 listen_ip = 8;
  if (this->_internal_listen_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_listen_ip(), target);
  }

  // uint32 listen_port = 9;
  if (this->_internal_listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_listen_port(), target);
  }

  // uint32 public_ip = 10;
  if (this->_internal_public_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_public_ip(), target);
  }

  // uint32 public_port = 11;
  if (this->_internal_public_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_public_port(), target);
  }

  // uint32 height = 12;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_height(), target);
  }

  // uint64 time_stamp = 13;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_time_stamp(), target);
  }

  // string version = 14;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKNodeInfo.version");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKNodeInfo)
  return target;
}

size_t SDKNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pub = 1;
  if (!this->_internal_pub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes identity = 3;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_identity());
  }

  // string base58addr = 4;
  if (!this->_internal_base58addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base58addr());
  }

  // string public_base58addr = 5;
  if (!this->_internal_public_base58addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_base58addr());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // string version = 14;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint32 listen_ip = 8;
  if (this->_internal_listen_ip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_ip());
  }

  // uint32 listen_port = 9;
  if (this->_internal_listen_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_port());
  }

  // uint32 public_ip = 10;
  if (this->_internal_public_ip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_public_ip());
  }

  // uint32 public_port = 11;
  if (this->_internal_public_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_public_port());
  }

  // uint64 time_stamp = 13;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
  }

  // uint32 height = 12;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKNodeInfo::GetClassData() const { return &_class_data_; }


void SDKNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKNodeInfo*>(&to_msg);
  auto& from = static_cast<const SDKNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub().empty()) {
    _this->_internal_set_pub(from._internal_pub());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_base58addr().empty()) {
    _this->_internal_set_base58addr(from._internal_base58addr());
  }
  if (!from._internal_public_base58addr().empty()) {
    _this->_internal_set_public_base58addr(from._internal_public_base58addr());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_listen_ip() != 0) {
    _this->_internal_set_listen_ip(from._internal_listen_ip());
  }
  if (from._internal_listen_port() != 0) {
    _this->_internal_set_listen_port(from._internal_listen_port());
  }
  if (from._internal_public_ip() != 0) {
    _this->_internal_set_public_ip(from._internal_public_ip());
  }
  if (from._internal_public_port() != 0) {
    _this->_internal_set_public_port(from._internal_public_port());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKNodeInfo::CopyFrom(const SDKNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKNodeInfo::IsInitialized() const {
  return true;
}

void SDKNodeInfo::InternalSwap(SDKNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pub_, lhs_arena,
      &other->_impl_.pub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base58addr_, lhs_arena,
      &other->_impl_.base58addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_base58addr_, lhs_arena,
      &other->_impl_.public_base58addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_, lhs_arena,
      &other->_impl_.logo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKNodeInfo, _impl_.height_)
      + sizeof(SDKNodeInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SDKNodeInfo, _impl_.listen_ip_)>(
          reinterpret_cast<char*>(&_impl_.listen_ip_),
          reinterpret_cast<char*>(&other->_impl_.listen_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[8]);
}

// ===================================================================

class GetSDKAck::_Internal {
 public:
};

GetSDKAck::GetSDKAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetSDKAck)
}
GetSDKAck::GetSDKAck(const GetSDKAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSDKAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.utxos_){from._impl_.utxos_}
    , decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.bonusamount_){from._impl_.bonusamount_}
    , decltype(_impl_.pledgetx_){from._impl_.pledgetx_}
    , decltype(_impl_.pledgeaddr_){from._impl_.pledgeaddr_}
    , decltype(_impl_.pledgeutxo_){from._impl_.pledgeutxo_}
    , decltype(_impl_.bonusaddr_){from._impl_.bonusaddr_}
    , decltype(_impl_.investedaddr_){from._impl_.investedaddr_}
    , decltype(_impl_.bonustx_){from._impl_.bonustx_}
    , decltype(_impl_.bonusaddrinvestutxos_){from._impl_.bonusaddrinvestutxos_}
    , decltype(_impl_.claimtx_){from._impl_.claimtx_}
    , decltype(_impl_.abnormaladdr_cnt_){from._impl_.abnormaladdr_cnt_}
    , decltype(_impl_.nodeinfo_){from._impl_.nodeinfo_}
    , decltype(_impl_.claimbonustx_){from._impl_.claimbonustx_}
    , decltype(_impl_.claiminvestedaddr_){from._impl_.claiminvestedaddr_}
    , decltype(_impl_.claimbonusaddrinvestutxos_){from._impl_.claimbonusaddrinvestutxos_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.m2_){}
    , decltype(_impl_.totalinvest_){}
    , decltype(_impl_.totalawardamount_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:GetSDKAck)
}

inline void GetSDKAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.utxos_){arena}
    , decltype(_impl_.blocks_){arena}
    , decltype(_impl_.bonusamount_){arena}
    , decltype(_impl_.pledgetx_){arena}
    , decltype(_impl_.pledgeaddr_){arena}
    , decltype(_impl_.pledgeutxo_){arena}
    , decltype(_impl_.bonusaddr_){arena}
    , decltype(_impl_.investedaddr_){arena}
    , decltype(_impl_.bonustx_){arena}
    , decltype(_impl_.bonusaddrinvestutxos_){arena}
    , decltype(_impl_.claimtx_){arena}
    , decltype(_impl_.abnormaladdr_cnt_){arena}
    , decltype(_impl_.nodeinfo_){arena}
    , decltype(_impl_.claimbonustx_){arena}
    , decltype(_impl_.claiminvestedaddr_){arena}
    , decltype(_impl_.claimbonusaddrinvestutxos_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.height_){uint64_t{0u}}
    , decltype(_impl_.m2_){uint64_t{0u}}
    , decltype(_impl_.totalinvest_){uint64_t{0u}}
    , decltype(_impl_.totalawardamount_){uint64_t{0u}}
    , decltype(_impl_.type_){uint64_t{0u}}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSDKAck::~GetSDKAck() {
  // @@protoc_insertion_point(destructor:GetSDKAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSDKAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.utxos_.~RepeatedPtrField();
  _impl_.blocks_.~RepeatedPtrField();
  _impl_.bonusamount_.~RepeatedPtrField();
  _impl_.pledgetx_.~RepeatedPtrField();
  _impl_.pledgeaddr_.~RepeatedPtrField();
  _impl_.pledgeutxo_.~RepeatedPtrField();
  _impl_.bonusaddr_.~RepeatedPtrField();
  _impl_.investedaddr_.~RepeatedPtrField();
  _impl_.bonustx_.~RepeatedPtrField();
  _impl_.bonusaddrinvestutxos_.~RepeatedPtrField();
  _impl_.claimtx_.~RepeatedPtrField();
  _impl_.abnormaladdr_cnt_.~RepeatedPtrField();
  _impl_.nodeinfo_.~RepeatedPtrField();
  _impl_.claimbonustx_.~RepeatedPtrField();
  _impl_.claiminvestedaddr_.~RepeatedPtrField();
  _impl_.claimbonusaddrinvestutxos_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.message_.Destroy();
}

void GetSDKAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSDKAck::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSDKAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.utxos_.Clear();
  _impl_.blocks_.Clear();
  _impl_.bonusamount_.Clear();
  _impl_.pledgetx_.Clear();
  _impl_.pledgeaddr_.Clear();
  _impl_.pledgeutxo_.Clear();
  _impl_.bonusaddr_.Clear();
  _impl_.investedaddr_.Clear();
  _impl_.bonustx_.Clear();
  _impl_.bonusaddrinvestutxos_.Clear();
  _impl_.claimtx_.Clear();
  _impl_.abnormaladdr_cnt_.Clear();
  _impl_.nodeinfo_.Clear();
  _impl_.claimbonustx_.Clear();
  _impl_.claiminvestedaddr_.Clear();
  _impl_.claimbonusaddrinvestutxos_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSDKAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.message"));
        } else
          goto handle_unusual;
        continue;
      // uint64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SDKUtxo utxos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_utxos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes blocks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blocks();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SDKBonusamout bonusamount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonusamount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SDKPledgeTx pledgetx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pledgetx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string pledgeaddr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pledgeaddr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.pledgeaddr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string pledgeutxo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pledgeutxo();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.pledgeutxo"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string BonusAddr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bonusaddr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.BonusAddr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string InvestedAddr = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_investedaddr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.InvestedAddr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SDKBonusTx BonusTx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonustx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string BonusAddrInvestUtxos = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bonusaddrinvestutxos();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.BonusAddrInvestUtxos"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Claimtx claimtx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_claimtx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AbnormalAddrCnt abnormaladdr_cnt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abnormaladdr_cnt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 M2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.m2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 Totalinvest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.totalinvest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TotalAwardAmount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.totalawardamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SDKNodeInfo nodeinfo = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_nodeinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SDKClaimBonusTx ClaimBonusTx = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_claimbonustx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ClaimInvestedAddr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_claiminvestedaddr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.ClaimInvestedAddr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ClaimBonusAddrInvestUtxos = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_claimbonusaddrinvestutxos();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetSDKAck.ClaimBonusAddrInvestUtxos"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSDKAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSDKAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // uint64 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  // repeated .SDKUtxo utxos = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_utxos_size()); i < n; i++) {
    const auto& repfield = this->_internal_utxos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bytes blocks = 6;
  for (int i = 0, n = this->_internal_blocks_size(); i < n; i++) {
    const auto& s = this->_internal_blocks(i);
    target = stream->WriteBytes(6, s, target);
  }

  // repeated .SDKBonusamout bonusamount = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bonusamount_size()); i < n; i++) {
    const auto& repfield = this->_internal_bonusamount(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SDKPledgeTx pledgetx = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pledgetx_size()); i < n; i++) {
    const auto& repfield = this->_internal_pledgetx(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string pledgeaddr = 10;
  for (int i = 0, n = this->_internal_pledgeaddr_size(); i < n; i++) {
    const auto& s = this->_internal_pledgeaddr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.pledgeaddr");
    target = stream->WriteString(10, s, target);
  }

  // repeated string pledgeutxo = 11;
  for (int i = 0, n = this->_internal_pledgeutxo_size(); i < n; i++) {
    const auto& s = this->_internal_pledgeutxo(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.pledgeutxo");
    target = stream->WriteString(11, s, target);
  }

  // repeated string BonusAddr = 12;
  for (int i = 0, n = this->_internal_bonusaddr_size(); i < n; i++) {
    const auto& s = this->_internal_bonusaddr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.BonusAddr");
    target = stream->WriteString(12, s, target);
  }

  // repeated string InvestedAddr = 13;
  for (int i = 0, n = this->_internal_investedaddr_size(); i < n; i++) {
    const auto& s = this->_internal_investedaddr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.InvestedAddr");
    target = stream->WriteString(13, s, target);
  }

  // repeated .SDKBonusTx BonusTx = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bonustx_size()); i < n; i++) {
    const auto& repfield = this->_internal_bonustx(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string BonusAddrInvestUtxos = 15;
  for (int i = 0, n = this->_internal_bonusaddrinvestutxos_size(); i < n; i++) {
    const auto& s = this->_internal_bonusaddrinvestutxos(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.BonusAddrInvestUtxos");
    target = stream->WriteString(15, s, target);
  }

  // repeated .Claimtx claimtx = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_claimtx_size()); i < n; i++) {
    const auto& repfield = this->_internal_claimtx(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AbnormalAddrCnt abnormaladdr_cnt = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abnormaladdr_cnt_size()); i < n; i++) {
    const auto& repfield = this->_internal_abnormaladdr_cnt(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 M2 = 18;
  if (this->_internal_m2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_m2(), target);
  }

  // uint64 Totalinvest = 19;
  if (this->_internal_totalinvest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_totalinvest(), target);
  }

  // uint64 TotalAwardAmount = 20;
  if (this->_internal_totalawardamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_totalawardamount(), target);
  }

  // repeated .SDKNodeInfo nodeinfo = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodeinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodeinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 type = 23;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_type(), target);
  }

  // repeated .SDKClaimBonusTx ClaimBonusTx = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_claimbonustx_size()); i < n; i++) {
    const auto& repfield = this->_internal_claimbonustx(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string ClaimInvestedAddr = 26;
  for (int i = 0, n = this->_internal_claiminvestedaddr_size(); i < n; i++) {
    const auto& s = this->_internal_claiminvestedaddr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.ClaimInvestedAddr");
    target = stream->WriteString(26, s, target);
  }

  // repeated string ClaimBonusAddrInvestUtxos = 27;
  for (int i = 0, n = this->_internal_claimbonusaddrinvestutxos_size(); i < n; i++) {
    const auto& s = this->_internal_claimbonusaddrinvestutxos(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSDKAck.ClaimBonusAddrInvestUtxos");
    target = stream->WriteString(27, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSDKAck)
  return target;
}

size_t GetSDKAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSDKAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SDKUtxo utxos = 5;
  total_size += 1UL * this->_internal_utxos_size();
  for (const auto& msg : this->_impl_.utxos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes blocks = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blocks_.size());
  for (int i = 0, n = _impl_.blocks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.blocks_.Get(i));
  }

  // repeated .SDKBonusamout bonusamount = 8;
  total_size += 1UL * this->_internal_bonusamount_size();
  for (const auto& msg : this->_impl_.bonusamount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SDKPledgeTx pledgetx = 9;
  total_size += 1UL * this->_internal_pledgetx_size();
  for (const auto& msg : this->_impl_.pledgetx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string pledgeaddr = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pledgeaddr_.size());
  for (int i = 0, n = _impl_.pledgeaddr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pledgeaddr_.Get(i));
  }

  // repeated string pledgeutxo = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pledgeutxo_.size());
  for (int i = 0, n = _impl_.pledgeutxo_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pledgeutxo_.Get(i));
  }

  // repeated string BonusAddr = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bonusaddr_.size());
  for (int i = 0, n = _impl_.bonusaddr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bonusaddr_.Get(i));
  }

  // repeated string InvestedAddr = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.investedaddr_.size());
  for (int i = 0, n = _impl_.investedaddr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.investedaddr_.Get(i));
  }

  // repeated .SDKBonusTx BonusTx = 14;
  total_size += 1UL * this->_internal_bonustx_size();
  for (const auto& msg : this->_impl_.bonustx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string BonusAddrInvestUtxos = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bonusaddrinvestutxos_.size());
  for (int i = 0, n = _impl_.bonusaddrinvestutxos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bonusaddrinvestutxos_.Get(i));
  }

  // repeated .Claimtx claimtx = 16;
  total_size += 2UL * this->_internal_claimtx_size();
  for (const auto& msg : this->_impl_.claimtx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AbnormalAddrCnt abnormaladdr_cnt = 17;
  total_size += 2UL * this->_internal_abnormaladdr_cnt_size();
  for (const auto& msg : this->_impl_.abnormaladdr_cnt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SDKNodeInfo nodeinfo = 22;
  total_size += 2UL * this->_internal_nodeinfo_size();
  for (const auto& msg : this->_impl_.nodeinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SDKClaimBonusTx ClaimBonusTx = 24;
  total_size += 2UL * this->_internal_claimbonustx_size();
  for (const auto& msg : this->_impl_.claimbonustx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string ClaimInvestedAddr = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.claiminvestedaddr_.size());
  for (int i = 0, n = _impl_.claiminvestedaddr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.claiminvestedaddr_.Get(i));
  }

  // repeated string ClaimBonusAddrInvestUtxos = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.claimbonusaddrinvestutxos_.size());
  for (int i = 0, n = _impl_.claimbonusaddrinvestutxos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.claimbonusaddrinvestutxos_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint64 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint64 M2 = 18;
  if (this->_internal_m2() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_m2());
  }

  // uint64 Totalinvest = 19;
  if (this->_internal_totalinvest() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_totalinvest());
  }

  // uint64 TotalAwardAmount = 20;
  if (this->_internal_totalawardamount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_totalawardamount());
  }

  // uint64 type = 23;
  if (this->_internal_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_type());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSDKAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSDKAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSDKAck::GetClassData() const { return &_class_data_; }


void GetSDKAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSDKAck*>(&to_msg);
  auto& from = static_cast<const GetSDKAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetSDKAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.utxos_.MergeFrom(from._impl_.utxos_);
  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_impl_.bonusamount_.MergeFrom(from._impl_.bonusamount_);
  _this->_impl_.pledgetx_.MergeFrom(from._impl_.pledgetx_);
  _this->_impl_.pledgeaddr_.MergeFrom(from._impl_.pledgeaddr_);
  _this->_impl_.pledgeutxo_.MergeFrom(from._impl_.pledgeutxo_);
  _this->_impl_.bonusaddr_.MergeFrom(from._impl_.bonusaddr_);
  _this->_impl_.investedaddr_.MergeFrom(from._impl_.investedaddr_);
  _this->_impl_.bonustx_.MergeFrom(from._impl_.bonustx_);
  _this->_impl_.bonusaddrinvestutxos_.MergeFrom(from._impl_.bonusaddrinvestutxos_);
  _this->_impl_.claimtx_.MergeFrom(from._impl_.claimtx_);
  _this->_impl_.abnormaladdr_cnt_.MergeFrom(from._impl_.abnormaladdr_cnt_);
  _this->_impl_.nodeinfo_.MergeFrom(from._impl_.nodeinfo_);
  _this->_impl_.claimbonustx_.MergeFrom(from._impl_.claimbonustx_);
  _this->_impl_.claiminvestedaddr_.MergeFrom(from._impl_.claiminvestedaddr_);
  _this->_impl_.claimbonusaddrinvestutxos_.MergeFrom(from._impl_.claimbonusaddrinvestutxos_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_m2() != 0) {
    _this->_internal_set_m2(from._internal_m2());
  }
  if (from._internal_totalinvest() != 0) {
    _this->_internal_set_totalinvest(from._internal_totalinvest());
  }
  if (from._internal_totalawardamount() != 0) {
    _this->_internal_set_totalawardamount(from._internal_totalawardamount());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSDKAck::CopyFrom(const GetSDKAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSDKAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSDKAck::IsInitialized() const {
  return true;
}

void GetSDKAck::InternalSwap(GetSDKAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.utxos_.InternalSwap(&other->_impl_.utxos_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  _impl_.bonusamount_.InternalSwap(&other->_impl_.bonusamount_);
  _impl_.pledgetx_.InternalSwap(&other->_impl_.pledgetx_);
  _impl_.pledgeaddr_.InternalSwap(&other->_impl_.pledgeaddr_);
  _impl_.pledgeutxo_.InternalSwap(&other->_impl_.pledgeutxo_);
  _impl_.bonusaddr_.InternalSwap(&other->_impl_.bonusaddr_);
  _impl_.investedaddr_.InternalSwap(&other->_impl_.investedaddr_);
  _impl_.bonustx_.InternalSwap(&other->_impl_.bonustx_);
  _impl_.bonusaddrinvestutxos_.InternalSwap(&other->_impl_.bonusaddrinvestutxos_);
  _impl_.claimtx_.InternalSwap(&other->_impl_.claimtx_);
  _impl_.abnormaladdr_cnt_.InternalSwap(&other->_impl_.abnormaladdr_cnt_);
  _impl_.nodeinfo_.InternalSwap(&other->_impl_.nodeinfo_);
  _impl_.claimbonustx_.InternalSwap(&other->_impl_.claimbonustx_);
  _impl_.claiminvestedaddr_.InternalSwap(&other->_impl_.claiminvestedaddr_);
  _impl_.claimbonusaddrinvestutxos_.InternalSwap(&other->_impl_.claimbonusaddrinvestutxos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSDKAck, _impl_.code_)
      + sizeof(GetSDKAck::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(GetSDKAck, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSDKAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[9]);
}

// ===================================================================

class SDKContractDeployReq::_Internal {
 public:
};

SDKContractDeployReq::SDKContractDeployReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKContractDeployReq)
}
SDKContractDeployReq::SDKContractDeployReq(const SDKContractDeployReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKContractDeployReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.deploy_amount_){}
    , decltype(_impl_.pubstr_){}
    , decltype(_impl_.ncontracttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deploy_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploy_amount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deploy_amount().empty()) {
    _this->_impl_.deploy_amount_.Set(from._internal_deploy_amount(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pubstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pubstr().empty()) {
    _this->_impl_.pubstr_.Set(from._internal_pubstr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ncontracttype_ = from._impl_.ncontracttype_;
  // @@protoc_insertion_point(copy_constructor:SDKContractDeployReq)
}

inline void SDKContractDeployReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.deploy_amount_){}
    , decltype(_impl_.pubstr_){}
    , decltype(_impl_.ncontracttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deploy_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploy_amount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pubstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pubstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKContractDeployReq::~SDKContractDeployReq() {
  // @@protoc_insertion_point(destructor:SDKContractDeployReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKContractDeployReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.address_.Destroy();
  _impl_.deploy_amount_.Destroy();
  _impl_.pubstr_.Destroy();
}

void SDKContractDeployReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKContractDeployReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKContractDeployReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.deploy_amount_.ClearToEmpty();
  _impl_.pubstr_.ClearToEmpty();
  _impl_.ncontracttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKContractDeployReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractDeployReq.version"));
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractDeployReq.address"));
        } else
          goto handle_unusual;
        continue;
      // string deploy_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deploy_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractDeployReq.deploy_amount"));
        } else
          goto handle_unusual;
        continue;
      // int32 nContractType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ncontracttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pubStr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pubstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractDeployReq.pubStr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKContractDeployReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKContractDeployReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractDeployReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractDeployReq.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string deploy_amount = 3;
  if (!this->_internal_deploy_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deploy_amount().data(), static_cast<int>(this->_internal_deploy_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractDeployReq.deploy_amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deploy_amount(), target);
  }

  // int32 nContractType = 4;
  if (this->_internal_ncontracttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ncontracttype(), target);
  }

  // string pubStr = 5;
  if (!this->_internal_pubstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubstr().data(), static_cast<int>(this->_internal_pubstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractDeployReq.pubStr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pubstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKContractDeployReq)
  return target;
}

size_t SDKContractDeployReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKContractDeployReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string deploy_amount = 3;
  if (!this->_internal_deploy_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deploy_amount());
  }

  // string pubStr = 5;
  if (!this->_internal_pubstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubstr());
  }

  // int32 nContractType = 4;
  if (this->_internal_ncontracttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ncontracttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKContractDeployReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKContractDeployReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKContractDeployReq::GetClassData() const { return &_class_data_; }


void SDKContractDeployReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKContractDeployReq*>(&to_msg);
  auto& from = static_cast<const SDKContractDeployReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKContractDeployReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_deploy_amount().empty()) {
    _this->_internal_set_deploy_amount(from._internal_deploy_amount());
  }
  if (!from._internal_pubstr().empty()) {
    _this->_internal_set_pubstr(from._internal_pubstr());
  }
  if (from._internal_ncontracttype() != 0) {
    _this->_internal_set_ncontracttype(from._internal_ncontracttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKContractDeployReq::CopyFrom(const SDKContractDeployReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKContractDeployReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKContractDeployReq::IsInitialized() const {
  return true;
}

void SDKContractDeployReq::InternalSwap(SDKContractDeployReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deploy_amount_, lhs_arena,
      &other->_impl_.deploy_amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pubstr_, lhs_arena,
      &other->_impl_.pubstr_, rhs_arena
  );
  swap(_impl_.ncontracttype_, other->_impl_.ncontracttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKContractDeployReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[10]);
}

// ===================================================================

class SDKContractDeployAck::_Internal {
 public:
  static const ::Vrf& vrfinfo(const SDKContractDeployAck* msg);
};

const ::Vrf&
SDKContractDeployAck::_Internal::vrfinfo(const SDKContractDeployAck* msg) {
  return *msg->_impl_.vrfinfo_;
}
void SDKContractDeployAck::clear_vrfinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
}
SDKContractDeployAck::SDKContractDeployAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKContractDeployAck)
}
SDKContractDeployAck::SDKContractDeployAck(const SDKContractDeployAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKContractDeployAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.top_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.isneedagent_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_impl_.vrfinfo_ = new ::Vrf(*from._impl_.vrfinfo_);
  }
  ::memcpy(&_impl_.top_, &from._impl_.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isneedagent_flag_) -
    reinterpret_cast<char*>(&_impl_.top_)) + sizeof(_impl_.isneedagent_flag_));
  // @@protoc_insertion_point(copy_constructor:SDKContractDeployAck)
}

inline void SDKContractDeployAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.top_){uint64_t{0u}}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.isneedagent_flag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKContractDeployAck::~SDKContractDeployAck() {
  // @@protoc_insertion_point(destructor:SDKContractDeployAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKContractDeployAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.message_.Destroy();
  _impl_.tx_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vrfinfo_;
}

void SDKContractDeployAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKContractDeployAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKContractDeployAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
  ::memset(&_impl_.top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isneedagent_flag_) -
      reinterpret_cast<char*>(&_impl_.top_)) + sizeof(_impl_.isneedagent_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKContractDeployAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractDeployAck.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractDeployAck.message"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vrfAgentType isNeedAgent_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_isneedagent_flag(static_cast<::vrfAgentType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Vrf vrfInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKContractDeployAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKContractDeployAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractDeployAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractDeployAck.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tx(), target);
  }

  // uint64 top = 5;
  if (this->_internal_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_top(), target);
  }

  // .vrfAgentType isNeedAgent_flag = 8;
  if (this->_internal_isneedagent_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_isneedagent_flag(), target);
  }

  // .Vrf vrfInfo = 9;
  if (this->_internal_has_vrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::vrfinfo(this),
        _Internal::vrfinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKContractDeployAck)
  return target;
}

size_t SDKContractDeployAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKContractDeployAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .Vrf vrfInfo = 9;
  if (this->_internal_has_vrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfinfo_);
  }

  // uint64 top = 5;
  if (this->_internal_top() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_top());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // .vrfAgentType isNeedAgent_flag = 8;
  if (this->_internal_isneedagent_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_isneedagent_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKContractDeployAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKContractDeployAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKContractDeployAck::GetClassData() const { return &_class_data_; }


void SDKContractDeployAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKContractDeployAck*>(&to_msg);
  auto& from = static_cast<const SDKContractDeployAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKContractDeployAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_internal_mutable_vrfinfo()->::Vrf::MergeFrom(
        from._internal_vrfinfo());
  }
  if (from._internal_top() != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_isneedagent_flag() != 0) {
    _this->_internal_set_isneedagent_flag(from._internal_isneedagent_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKContractDeployAck::CopyFrom(const SDKContractDeployAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKContractDeployAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKContractDeployAck::IsInitialized() const {
  return true;
}

void SDKContractDeployAck::InternalSwap(SDKContractDeployAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKContractDeployAck, _impl_.isneedagent_flag_)
      + sizeof(SDKContractDeployAck::_impl_.isneedagent_flag_)
      - PROTOBUF_FIELD_OFFSET(SDKContractDeployAck, _impl_.vrfinfo_)>(
          reinterpret_cast<char*>(&_impl_.vrfinfo_),
          reinterpret_cast<char*>(&other->_impl_.vrfinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKContractDeployAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[11]);
}

// ===================================================================

class SDKContractCallReq::_Internal {
 public:
};

SDKContractCallReq::SDKContractCallReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKContractCallReq)
}
SDKContractCallReq::SDKContractCallReq(const SDKContractCallReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKContractCallReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.fromaddr_){}
    , decltype(_impl_.toaddr_){}
    , decltype(_impl_.deploy_strtxhash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fromaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fromaddr().empty()) {
    _this->_impl_.fromaddr_.Set(from._internal_fromaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.toaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_toaddr().empty()) {
    _this->_impl_.toaddr_.Set(from._internal_toaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deploy_strtxhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploy_strtxhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deploy_strtxhash().empty()) {
    _this->_impl_.deploy_strtxhash_.Set(from._internal_deploy_strtxhash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SDKContractCallReq)
}

inline void SDKContractCallReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.fromaddr_){}
    , decltype(_impl_.toaddr_){}
    , decltype(_impl_.deploy_strtxhash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fromaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.toaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deploy_strtxhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploy_strtxhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKContractCallReq::~SDKContractCallReq() {
  // @@protoc_insertion_point(destructor:SDKContractCallReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKContractCallReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.fromaddr_.Destroy();
  _impl_.toaddr_.Destroy();
  _impl_.deploy_strtxhash_.Destroy();
}

void SDKContractCallReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKContractCallReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKContractCallReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.fromaddr_.ClearToEmpty();
  _impl_.toaddr_.ClearToEmpty();
  _impl_.deploy_strtxhash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKContractCallReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractCallReq.version"));
        } else
          goto handle_unusual;
        continue;
      // string fromaddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fromaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractCallReq.fromaddr"));
        } else
          goto handle_unusual;
        continue;
      // string toaddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_toaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractCallReq.toaddr"));
        } else
          goto handle_unusual;
        continue;
      // string deploy_strTxHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deploy_strtxhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractCallReq.deploy_strTxHash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKContractCallReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKContractCallReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractCallReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string fromaddr = 2;
  if (!this->_internal_fromaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromaddr().data(), static_cast<int>(this->_internal_fromaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractCallReq.fromaddr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromaddr(), target);
  }

  // string toaddr = 3;
  if (!this->_internal_toaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toaddr().data(), static_cast<int>(this->_internal_toaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractCallReq.toaddr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_toaddr(), target);
  }

  // string deploy_strTxHash = 4;
  if (!this->_internal_deploy_strtxhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deploy_strtxhash().data(), static_cast<int>(this->_internal_deploy_strtxhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractCallReq.deploy_strTxHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deploy_strtxhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKContractCallReq)
  return target;
}

size_t SDKContractCallReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKContractCallReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string fromaddr = 2;
  if (!this->_internal_fromaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromaddr());
  }

  // string toaddr = 3;
  if (!this->_internal_toaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toaddr());
  }

  // string deploy_strTxHash = 4;
  if (!this->_internal_deploy_strtxhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deploy_strtxhash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKContractCallReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKContractCallReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKContractCallReq::GetClassData() const { return &_class_data_; }


void SDKContractCallReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKContractCallReq*>(&to_msg);
  auto& from = static_cast<const SDKContractCallReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKContractCallReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_fromaddr().empty()) {
    _this->_internal_set_fromaddr(from._internal_fromaddr());
  }
  if (!from._internal_toaddr().empty()) {
    _this->_internal_set_toaddr(from._internal_toaddr());
  }
  if (!from._internal_deploy_strtxhash().empty()) {
    _this->_internal_set_deploy_strtxhash(from._internal_deploy_strtxhash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKContractCallReq::CopyFrom(const SDKContractCallReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKContractCallReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKContractCallReq::IsInitialized() const {
  return true;
}

void SDKContractCallReq::InternalSwap(SDKContractCallReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fromaddr_, lhs_arena,
      &other->_impl_.fromaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toaddr_, lhs_arena,
      &other->_impl_.toaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deploy_strtxhash_, lhs_arena,
      &other->_impl_.deploy_strtxhash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKContractCallReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[12]);
}

// ===================================================================

class SDKContractCallAck::_Internal {
 public:
  static const ::Vrf& vrfinfo(const SDKContractCallAck* msg);
};

const ::Vrf&
SDKContractCallAck::_Internal::vrfinfo(const SDKContractCallAck* msg) {
  return *msg->_impl_.vrfinfo_;
}
void SDKContractCallAck::clear_vrfinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
}
SDKContractCallAck::SDKContractCallAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SDKContractCallAck)
}
SDKContractCallAck::SDKContractCallAck(const SDKContractCallAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SDKContractCallAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.top_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.isneedagent_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_impl_.vrfinfo_ = new ::Vrf(*from._impl_.vrfinfo_);
  }
  ::memcpy(&_impl_.top_, &from._impl_.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isneedagent_flag_) -
    reinterpret_cast<char*>(&_impl_.top_)) + sizeof(_impl_.isneedagent_flag_));
  // @@protoc_insertion_point(copy_constructor:SDKContractCallAck)
}

inline void SDKContractCallAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.top_){uint64_t{0u}}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.isneedagent_flag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SDKContractCallAck::~SDKContractCallAck() {
  // @@protoc_insertion_point(destructor:SDKContractCallAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKContractCallAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.message_.Destroy();
  _impl_.tx_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vrfinfo_;
}

void SDKContractCallAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKContractCallAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SDKContractCallAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
  ::memset(&_impl_.top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isneedagent_flag_) -
      reinterpret_cast<char*>(&_impl_.top_)) + sizeof(_impl_.isneedagent_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDKContractCallAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractCallAck.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SDKContractCallAck.message"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vrfAgentType isNeedAgent_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_isneedagent_flag(static_cast<::vrfAgentType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Vrf vrfInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDKContractCallAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SDKContractCallAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractCallAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SDKContractCallAck.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tx(), target);
  }

  // uint64 top = 5;
  if (this->_internal_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_top(), target);
  }

  // .vrfAgentType isNeedAgent_flag = 8;
  if (this->_internal_isneedagent_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_isneedagent_flag(), target);
  }

  // .Vrf vrfInfo = 9;
  if (this->_internal_has_vrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::vrfinfo(this),
        _Internal::vrfinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDKContractCallAck)
  return target;
}

size_t SDKContractCallAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDKContractCallAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .Vrf vrfInfo = 9;
  if (this->_internal_has_vrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfinfo_);
  }

  // uint64 top = 5;
  if (this->_internal_top() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_top());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // .vrfAgentType isNeedAgent_flag = 8;
  if (this->_internal_isneedagent_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_isneedagent_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDKContractCallAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SDKContractCallAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDKContractCallAck::GetClassData() const { return &_class_data_; }


void SDKContractCallAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SDKContractCallAck*>(&to_msg);
  auto& from = static_cast<const SDKContractCallAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SDKContractCallAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_internal_mutable_vrfinfo()->::Vrf::MergeFrom(
        from._internal_vrfinfo());
  }
  if (from._internal_top() != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_isneedagent_flag() != 0) {
    _this->_internal_set_isneedagent_flag(from._internal_isneedagent_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDKContractCallAck::CopyFrom(const SDKContractCallAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDKContractCallAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKContractCallAck::IsInitialized() const {
  return true;
}

void SDKContractCallAck::InternalSwap(SDKContractCallAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKContractCallAck, _impl_.isneedagent_flag_)
      + sizeof(SDKContractCallAck::_impl_.isneedagent_flag_)
      - PROTOBUF_FIELD_OFFSET(SDKContractCallAck, _impl_.vrfinfo_)>(
          reinterpret_cast<char*>(&_impl_.vrfinfo_),
          reinterpret_cast<char*>(&other->_impl_.vrfinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKContractCallAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2eproto_getter, &descriptor_table_sdk_2eproto_once,
      file_level_metadata_sdk_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GetSDKReq*
Arena::CreateMaybeMessage< ::GetSDKReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSDKReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKUtxo*
Arena::CreateMaybeMessage< ::SDKUtxo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKUtxo >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKBonusamout*
Arena::CreateMaybeMessage< ::SDKBonusamout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKBonusamout >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKBonusTx*
Arena::CreateMaybeMessage< ::SDKBonusTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKBonusTx >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKPledgeTx*
Arena::CreateMaybeMessage< ::SDKPledgeTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKPledgeTx >(arena);
}
template<> PROTOBUF_NOINLINE ::Claimtx*
Arena::CreateMaybeMessage< ::Claimtx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Claimtx >(arena);
}
template<> PROTOBUF_NOINLINE ::AbnormalAddrCnt*
Arena::CreateMaybeMessage< ::AbnormalAddrCnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AbnormalAddrCnt >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKClaimBonusTx*
Arena::CreateMaybeMessage< ::SDKClaimBonusTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKClaimBonusTx >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKNodeInfo*
Arena::CreateMaybeMessage< ::SDKNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSDKAck*
Arena::CreateMaybeMessage< ::GetSDKAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSDKAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKContractDeployReq*
Arena::CreateMaybeMessage< ::SDKContractDeployReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKContractDeployReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKContractDeployAck*
Arena::CreateMaybeMessage< ::SDKContractDeployAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKContractDeployAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKContractCallReq*
Arena::CreateMaybeMessage< ::SDKContractCallReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKContractCallReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SDKContractCallAck*
Arena::CreateMaybeMessage< ::SDKContractCallAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SDKContractCallAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
