// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#include "block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CBlock::CBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.sign_)*/{}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prevhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.merkleroot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reserve0_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reserve1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CBlockDefaultTypeInternal() {}
  union {
    CBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CBlockDefaultTypeInternal _CBlock_default_instance_;
PROTOBUF_CONSTEXPR BlockMsg::BlockMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vrfinfo_)*/{}
  , /*decltype(_impl_.txvrfinfo_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/nullptr
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMsgDefaultTypeInternal() {}
  union {
    BlockMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMsgDefaultTypeInternal _BlockMsg_default_instance_;
PROTOBUF_CONSTEXPR TxStatus::TxStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxStatusDefaultTypeInternal() {}
  union {
    TxStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxStatusDefaultTypeInternal _TxStatus_default_instance_;
PROTOBUF_CONSTEXPR BlockStatus::BlockStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txstatus_)*/{}
  , /*decltype(_impl_.blockhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockStatusDefaultTypeInternal() {}
  union {
    BlockStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockStatusDefaultTypeInternal _BlockStatus_default_instance_;
PROTOBUF_CONSTEXPR SeekPreHashByHightReq::SeekPreHashByHightReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.self_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seek_height_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeekPreHashByHightReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekPreHashByHightReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekPreHashByHightReqDefaultTypeInternal() {}
  union {
    SeekPreHashByHightReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekPreHashByHightReqDefaultTypeInternal _SeekPreHashByHightReq_default_instance_;
PROTOBUF_CONSTEXPR SeekPreHashByHightAck::SeekPreHashByHightAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prehashes_)*/{}
  , /*decltype(_impl_.self_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seek_height_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeekPreHashByHightAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekPreHashByHightAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekPreHashByHightAckDefaultTypeInternal() {}
  union {
    SeekPreHashByHightAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekPreHashByHightAckDefaultTypeInternal _SeekPreHashByHightAck_default_instance_;
PROTOBUF_CONSTEXPR preHashPair::preHashPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contractaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roothash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockraw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct preHashPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR preHashPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~preHashPairDefaultTypeInternal() {}
  union {
    preHashPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 preHashPairDefaultTypeInternal _preHashPair_default_instance_;
PROTOBUF_CONSTEXPR newSeekContractPreHashReq::newSeekContractPreHashReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seekroothash_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.self_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct newSeekContractPreHashReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR newSeekContractPreHashReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~newSeekContractPreHashReqDefaultTypeInternal() {}
  union {
    newSeekContractPreHashReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 newSeekContractPreHashReqDefaultTypeInternal _newSeekContractPreHashReq_default_instance_;
PROTOBUF_CONSTEXPR newSeekContractPreHashAck::newSeekContractPreHashAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seekcontractblock_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.self_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct newSeekContractPreHashAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR newSeekContractPreHashAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~newSeekContractPreHashAckDefaultTypeInternal() {}
  union {
    newSeekContractPreHashAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 newSeekContractPreHashAckDefaultTypeInternal _newSeekContractPreHashAck_default_instance_;
static ::_pb::Metadata file_level_metadata_block_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_block_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_block_2eproto = nullptr;

const uint32_t TableStruct_block_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.prevhash_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.merkleroot_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.txs_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.reserve0_),
  PROTOBUF_FIELD_OFFSET(::CBlock, _impl_.reserve1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.vrfinfo_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.txvrfinfo_),
  PROTOBUF_FIELD_OFFSET(::BlockMsg, _impl_.sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxStatus, _impl_.txhash_),
  PROTOBUF_FIELD_OFFSET(::TxStatus, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BlockStatus, _impl_.blockhash_),
  PROTOBUF_FIELD_OFFSET(::BlockStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::BlockStatus, _impl_.txstatus_),
  PROTOBUF_FIELD_OFFSET(::BlockStatus, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightReq, _impl_.self_node_id_),
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightReq, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightReq, _impl_.seek_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightAck, _impl_.self_node_id_),
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightAck, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightAck, _impl_.seek_height_),
  PROTOBUF_FIELD_OFFSET(::SeekPreHashByHightAck, _impl_.prehashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::preHashPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::preHashPair, _impl_.contractaddr_),
  PROTOBUF_FIELD_OFFSET(::preHashPair, _impl_.roothash_),
  PROTOBUF_FIELD_OFFSET(::preHashPair, _impl_.blockraw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashReq, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashReq, _impl_.self_node_id_),
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashReq, _impl_.seekroothash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashAck, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashAck, _impl_.self_node_id_),
  PROTOBUF_FIELD_OFFSET(::newSeekContractPreHashAck, _impl_.seekcontractblock_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CBlock)},
  { 18, -1, -1, sizeof(::BlockMsg)},
  { 33, -1, -1, sizeof(::TxStatus)},
  { 41, -1, -1, sizeof(::BlockStatus)},
  { 51, -1, -1, sizeof(::SeekPreHashByHightReq)},
  { 60, -1, -1, sizeof(::SeekPreHashByHightAck)},
  { 70, -1, -1, sizeof(::preHashPair)},
  { 79, -1, -1, sizeof(::newSeekContractPreHashReq)},
  { 89, -1, -1, sizeof(::newSeekContractPreHashAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CBlock_default_instance_._instance,
  &::_BlockMsg_default_instance_._instance,
  &::_TxStatus_default_instance_._instance,
  &::_BlockStatus_default_instance_._instance,
  &::_SeekPreHashByHightReq_default_instance_._instance,
  &::_SeekPreHashByHightAck_default_instance_._instance,
  &::_preHashPair_default_instance_._instance,
  &::_newSeekContractPreHashReq_default_instance_._instance,
  &::_newSeekContractPreHashAck_default_instance_._instance,
};

const char descriptor_table_protodef_block_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013block.proto\032\021transaction.proto\032\021ca_pro"
  "tomsg.proto\032\nsign.proto\"\335\001\n\006CBlock\022\017\n\007ve"
  "rsion\030\001 \001(\r\022\014\n\004time\030\002 \001(\004\022\014\n\004hash\030\003 \001(\t\022"
  "\020\n\010prevHash\030\004 \001(\t\022\016\n\006height\030\005 \001(\003\022\022\n\nmer"
  "kleRoot\030\006 \001(\t\022\032\n\003txs\030\007 \003(\0132\r.CTransactio"
  "n\022\014\n\004data\030\010 \001(\t\022\014\n\004info\030\t \001(\t\022\024\n\004sign\030\n "
  "\003(\0132\006.CSign\022\020\n\010reserve0\030\013 \001(\t\022\020\n\010reserve"
  "1\030\014 \001(\t\"\254\001\n\010BlockMsg\022\r\n\005nonce\030\001 \001(\004\022\017\n\007v"
  "ersion\030\002 \001(\t\022\014\n\004code\030\003 \001(\021\022\017\n\007message\030\004 "
  "\001(\t\022\014\n\004time\030\005 \001(\004\022\r\n\005block\030\006 \001(\014\022\025\n\007vrfI"
  "nfo\030\007 \003(\0132\004.Vrf\022\027\n\ttxvrfInfo\030\010 \003(\0132\004.Vrf"
  "\022\024\n\004sign\030\t \001(\0132\006.CSign\"*\n\010TxStatus\022\016\n\006tx"
  "Hash\030\001 \001(\t\022\016\n\006status\030\002 \001(\005\"Y\n\013BlockStatu"
  "s\022\021\n\tblockHash\030\001 \001(\t\022\016\n\006status\030\002 \001(\005\022\033\n\010"
  "txStatus\030\003 \003(\0132\t.TxStatus\022\n\n\002id\030\004 \001(\t\"R\n"
  "\025SeekPreHashByHightReq\022\024\n\014self_node_id\030\001"
  " \001(\t\022\016\n\006msg_id\030\002 \001(\t\022\023\n\013seek_height\030\003 \001("
  "\004\"e\n\025SeekPreHashByHightAck\022\024\n\014self_node_"
  "id\030\001 \001(\t\022\016\n\006msg_id\030\002 \001(\t\022\023\n\013seek_height\030"
  "\003 \001(\004\022\021\n\tprehashes\030\004 \003(\t\"G\n\013preHashPair\022"
  "\024\n\014ContractAddr\030\001 \001(\t\022\020\n\010RootHash\030\002 \001(\t\022"
  "\020\n\010blockRaw\030\003 \001(\014\"v\n\031newSeekContractPreH"
  "ashReq\022\017\n\007version\030\001 \001(\t\022\016\n\006msg_id\030\002 \001(\t\022"
  "\024\n\014self_node_id\030\003 \001(\t\022\"\n\014seekRootHash\030\004 "
  "\003(\0132\014.preHashPair\"{\n\031newSeekContractPreH"
  "ashAck\022\017\n\007version\030\001 \001(\t\022\016\n\006msg_id\030\002 \001(\t\022"
  "\024\n\014self_node_id\030\003 \001(\t\022\'\n\021seekContractBlo"
  "ck\030\004 \003(\0132\014.preHashPairb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_block_2eproto_deps[3] = {
  &::descriptor_table_ca_5fprotomsg_2eproto,
  &::descriptor_table_sign_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::_pbi::once_flag descriptor_table_block_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_block_2eproto = {
    false, false, 1110, descriptor_table_protodef_block_2eproto,
    "block.proto",
    &descriptor_table_block_2eproto_once, descriptor_table_block_2eproto_deps, 3, 9,
    schemas, file_default_instances, TableStruct_block_2eproto::offsets,
    file_level_metadata_block_2eproto, file_level_enum_descriptors_block_2eproto,
    file_level_service_descriptors_block_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_block_2eproto_getter() {
  return &descriptor_table_block_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_block_2eproto(&descriptor_table_block_2eproto);

// ===================================================================

class CBlock::_Internal {
 public:
};

void CBlock::clear_txs() {
  _impl_.txs_.Clear();
}
void CBlock::clear_sign() {
  _impl_.sign_.Clear();
}
CBlock::CBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CBlock)
}
CBlock::CBlock(const CBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.sign_){from._impl_.sign_}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.prevhash_){}
    , decltype(_impl_.merkleroot_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.reserve0_){}
    , decltype(_impl_.reserve1_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prevhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prevhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prevhash().empty()) {
    _this->_impl_.prevhash_.Set(from._internal_prevhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.merkleroot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.merkleroot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_merkleroot().empty()) {
    _this->_impl_.merkleroot_.Set(from._internal_merkleroot(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reserve0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve0().empty()) {
    _this->_impl_.reserve0_.Set(from._internal_reserve0(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reserve1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve1().empty()) {
    _this->_impl_.reserve1_.Set(from._internal_reserve1(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:CBlock)
}

inline void CBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.sign_){arena}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.prevhash_){}
    , decltype(_impl_.merkleroot_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.reserve0_){}
    , decltype(_impl_.reserve1_){}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.height_){int64_t{0}}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prevhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prevhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.merkleroot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.merkleroot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reserve0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reserve1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserve1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CBlock::~CBlock() {
  // @@protoc_insertion_point(destructor:CBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
  _impl_.sign_.~RepeatedPtrField();
  _impl_.hash_.Destroy();
  _impl_.prevhash_.Destroy();
  _impl_.merkleroot_.Destroy();
  _impl_.data_.Destroy();
  _impl_.info_.Destroy();
  _impl_.reserve0_.Destroy();
  _impl_.reserve1_.Destroy();
}

void CBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _impl_.sign_.Clear();
  _impl_.hash_.ClearToEmpty();
  _impl_.prevhash_.ClearToEmpty();
  _impl_.merkleroot_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.reserve0_.ClearToEmpty();
  _impl_.reserve1_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.hash"));
        } else
          goto handle_unusual;
        continue;
      // string prevHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prevhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.prevHash"));
        } else
          goto handle_unusual;
        continue;
      // int64 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string merkleRoot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_merkleroot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.merkleRoot"));
        } else
          goto handle_unusual;
        continue;
      // repeated .CTransaction txs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.data"));
        } else
          goto handle_unusual;
        continue;
      // string info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.info"));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSign sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string reserve0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_reserve0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.reserve0"));
        } else
          goto handle_unusual;
        continue;
      // string reserve1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_reserve1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CBlock.reserve1"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  // string hash = 3;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hash(), target);
  }

  // string prevHash = 4;
  if (!this->_internal_prevhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prevhash().data(), static_cast<int>(this->_internal_prevhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.prevHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prevhash(), target);
  }

  // int64 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_height(), target);
  }

  // string merkleRoot = 6;
  if (!this->_internal_merkleroot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merkleroot().data(), static_cast<int>(this->_internal_merkleroot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.merkleRoot");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_merkleroot(), target);
  }

  // repeated .CTransaction txs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string data = 8;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.data");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_data(), target);
  }

  // string info = 9;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.info");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_info(), target);
  }

  // repeated .CSign sign = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sign_size()); i < n; i++) {
    const auto& repfield = this->_internal_sign(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string reserve0 = 11;
  if (!this->_internal_reserve0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve0().data(), static_cast<int>(this->_internal_reserve0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.reserve0");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_reserve0(), target);
  }

  // string reserve1 = 12;
  if (!this->_internal_reserve1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve1().data(), static_cast<int>(this->_internal_reserve1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CBlock.reserve1");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_reserve1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBlock)
  return target;
}

size_t CBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CTransaction txs = 7;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_impl_.txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSign sign = 10;
  total_size += 1UL * this->_internal_sign_size();
  for (const auto& msg : this->_impl_.sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hash = 3;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string prevHash = 4;
  if (!this->_internal_prevhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prevhash());
  }

  // string merkleRoot = 6;
  if (!this->_internal_merkleroot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merkleroot());
  }

  // string data = 8;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string info = 9;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string reserve0 = 11;
  if (!this->_internal_reserve0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve0());
  }

  // string reserve1 = 12;
  if (!this->_internal_reserve1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve1());
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  // int64 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBlock::GetClassData() const { return &_class_data_; }


void CBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CBlock*>(&to_msg);
  auto& from = static_cast<const CBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_impl_.sign_.MergeFrom(from._impl_.sign_);
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_prevhash().empty()) {
    _this->_internal_set_prevhash(from._internal_prevhash());
  }
  if (!from._internal_merkleroot().empty()) {
    _this->_internal_set_merkleroot(from._internal_merkleroot());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_reserve0().empty()) {
    _this->_internal_set_reserve0(from._internal_reserve0());
  }
  if (!from._internal_reserve1().empty()) {
    _this->_internal_set_reserve1(from._internal_reserve1());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBlock::CopyFrom(const CBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBlock::IsInitialized() const {
  return true;
}

void CBlock::InternalSwap(CBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
  _impl_.sign_.InternalSwap(&other->_impl_.sign_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prevhash_, lhs_arena,
      &other->_impl_.prevhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.merkleroot_, lhs_arena,
      &other->_impl_.merkleroot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserve0_, lhs_arena,
      &other->_impl_.reserve0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserve1_, lhs_arena,
      &other->_impl_.reserve1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBlock, _impl_.version_)
      + sizeof(CBlock::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CBlock, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[0]);
}

// ===================================================================

class BlockMsg::_Internal {
 public:
  static const ::CSign& sign(const BlockMsg* msg);
};

const ::CSign&
BlockMsg::_Internal::sign(const BlockMsg* msg) {
  return *msg->_impl_.sign_;
}
void BlockMsg::clear_vrfinfo() {
  _impl_.vrfinfo_.Clear();
}
void BlockMsg::clear_txvrfinfo() {
  _impl_.txvrfinfo_.Clear();
}
void BlockMsg::clear_sign() {
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
}
BlockMsg::BlockMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BlockMsg)
}
BlockMsg::BlockMsg(const BlockMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vrfinfo_){from._impl_.vrfinfo_}
    , decltype(_impl_.txvrfinfo_){from._impl_.txvrfinfo_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.block_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block().empty()) {
    _this->_impl_.block_.Set(from._internal_block(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sign()) {
    _this->_impl_.sign_ = new ::CSign(*from._impl_.sign_);
  }
  ::memcpy(&_impl_.nonce_, &from._impl_.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:BlockMsg)
}

inline void BlockMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vrfinfo_){arena}
    , decltype(_impl_.txvrfinfo_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.block_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockMsg::~BlockMsg() {
  // @@protoc_insertion_point(destructor:BlockMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vrfinfo_.~RepeatedPtrField();
  _impl_.txvrfinfo_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.message_.Destroy();
  _impl_.block_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sign_;
}

void BlockMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vrfinfo_.Clear();
  _impl_.txvrfinfo_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.block_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
  ::memset(&_impl_.nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BlockMsg.version"));
        } else
          goto handle_unusual;
        continue;
      // sint32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BlockMsg.message"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_block();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Vrf vrfInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrfinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Vrf txvrfInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txvrfinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .CSign sign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockMsg.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // sint32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_code(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockMsg.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // uint64 time = 5;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time(), target);
  }

  // bytes block = 6;
  if (!this->_internal_block().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_block(), target);
  }

  // repeated .Vrf vrfInfo = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vrfinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_vrfinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Vrf txvrfInfo = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txvrfinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_txvrfinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .CSign sign = 9;
  if (this->_internal_has_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::sign(this),
        _Internal::sign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockMsg)
  return target;
}

size_t BlockMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Vrf vrfInfo = 7;
  total_size += 1UL * this->_internal_vrfinfo_size();
  for (const auto& msg : this->_impl_.vrfinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Vrf txvrfInfo = 8;
  total_size += 1UL * this->_internal_txvrfinfo_size();
  for (const auto& msg : this->_impl_.txvrfinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes block = 6;
  if (!this->_internal_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block());
  }

  // .CSign sign = 9;
  if (this->_internal_has_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sign_);
  }

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // uint64 time = 5;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  // sint32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMsg::GetClassData() const { return &_class_data_; }


void BlockMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockMsg*>(&to_msg);
  auto& from = static_cast<const BlockMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BlockMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vrfinfo_.MergeFrom(from._impl_.vrfinfo_);
  _this->_impl_.txvrfinfo_.MergeFrom(from._impl_.txvrfinfo_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_block().empty()) {
    _this->_internal_set_block(from._internal_block());
  }
  if (from._internal_has_sign()) {
    _this->_internal_mutable_sign()->::CSign::MergeFrom(
        from._internal_sign());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMsg::CopyFrom(const BlockMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMsg::IsInitialized() const {
  return true;
}

void BlockMsg::InternalSwap(BlockMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vrfinfo_.InternalSwap(&other->_impl_.vrfinfo_);
  _impl_.txvrfinfo_.InternalSwap(&other->_impl_.txvrfinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_, lhs_arena,
      &other->_impl_.block_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMsg, _impl_.code_)
      + sizeof(BlockMsg::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(BlockMsg, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[1]);
}

// ===================================================================

class TxStatus::_Internal {
 public:
};

TxStatus::TxStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxStatus)
}
TxStatus::TxStatus(const TxStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txhash_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.txhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_txhash().empty()) {
    _this->_impl_.txhash_.Set(from._internal_txhash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:TxStatus)
}

inline void TxStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txhash_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.txhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxStatus::~TxStatus() {
  // @@protoc_insertion_point(destructor:TxStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txhash_.Destroy();
}

void TxStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:TxStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txhash_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string txHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_txhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxStatus.txHash"));
        } else
          goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string txHash = 1;
  if (!this->_internal_txhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txhash().data(), static_cast<int>(this->_internal_txhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxStatus.txHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_txhash(), target);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxStatus)
  return target;
}

size_t TxStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txHash = 1;
  if (!this->_internal_txhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txhash());
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxStatus::GetClassData() const { return &_class_data_; }


void TxStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxStatus*>(&to_msg);
  auto& from = static_cast<const TxStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txhash().empty()) {
    _this->_internal_set_txhash(from._internal_txhash());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxStatus::CopyFrom(const TxStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxStatus::IsInitialized() const {
  return true;
}

void TxStatus::InternalSwap(TxStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.txhash_, lhs_arena,
      &other->_impl_.txhash_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[2]);
}

// ===================================================================

class BlockStatus::_Internal {
 public:
};

BlockStatus::BlockStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BlockStatus)
}
BlockStatus::BlockStatus(const BlockStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txstatus_){from._impl_.txstatus_}
    , decltype(_impl_.blockhash_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blockhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockhash().empty()) {
    _this->_impl_.blockhash_.Set(from._internal_blockhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:BlockStatus)
}

inline void BlockStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txstatus_){arena}
    , decltype(_impl_.blockhash_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.blockhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockStatus::~BlockStatus() {
  // @@protoc_insertion_point(destructor:BlockStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txstatus_.~RepeatedPtrField();
  _impl_.blockhash_.Destroy();
  _impl_.id_.Destroy();
}

void BlockStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txstatus_.Clear();
  _impl_.blockhash_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string blockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blockhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BlockStatus.blockHash"));
        } else
          goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TxStatus txStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BlockStatus.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string blockHash = 1;
  if (!this->_internal_blockhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockhash().data(), static_cast<int>(this->_internal_blockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockStatus.blockHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blockhash(), target);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // repeated .TxStatus txStatus = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txstatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_txstatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockStatus.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockStatus)
  return target;
}

size_t BlockStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TxStatus txStatus = 3;
  total_size += 1UL * this->_internal_txstatus_size();
  for (const auto& msg : this->_impl_.txstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string blockHash = 1;
  if (!this->_internal_blockhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockhash());
  }

  // string id = 4;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockStatus::GetClassData() const { return &_class_data_; }


void BlockStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockStatus*>(&to_msg);
  auto& from = static_cast<const BlockStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BlockStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txstatus_.MergeFrom(from._impl_.txstatus_);
  if (!from._internal_blockhash().empty()) {
    _this->_internal_set_blockhash(from._internal_blockhash());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockStatus::CopyFrom(const BlockStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStatus::IsInitialized() const {
  return true;
}

void BlockStatus::InternalSwap(BlockStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txstatus_.InternalSwap(&other->_impl_.txstatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockhash_, lhs_arena,
      &other->_impl_.blockhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[3]);
}

// ===================================================================

class SeekPreHashByHightReq::_Internal {
 public:
};

SeekPreHashByHightReq::SeekPreHashByHightReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SeekPreHashByHightReq)
}
SeekPreHashByHightReq::SeekPreHashByHightReq(const SeekPreHashByHightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeekPreHashByHightReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.self_node_id_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.seek_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_self_node_id().empty()) {
    _this->_impl_.self_node_id_.Set(from._internal_self_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.seek_height_ = from._impl_.seek_height_;
  // @@protoc_insertion_point(copy_constructor:SeekPreHashByHightReq)
}

inline void SeekPreHashByHightReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.self_node_id_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.seek_height_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SeekPreHashByHightReq::~SeekPreHashByHightReq() {
  // @@protoc_insertion_point(destructor:SeekPreHashByHightReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeekPreHashByHightReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.self_node_id_.Destroy();
  _impl_.msg_id_.Destroy();
}

void SeekPreHashByHightReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeekPreHashByHightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SeekPreHashByHightReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.self_node_id_.ClearToEmpty();
  _impl_.msg_id_.ClearToEmpty();
  _impl_.seek_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeekPreHashByHightReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string self_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_self_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SeekPreHashByHightReq.self_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SeekPreHashByHightReq.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 seek_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seek_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeekPreHashByHightReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SeekPreHashByHightReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string self_node_id = 1;
  if (!this->_internal_self_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_self_node_id().data(), static_cast<int>(this->_internal_self_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SeekPreHashByHightReq.self_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_self_node_id(), target);
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SeekPreHashByHightReq.msg_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_id(), target);
  }

  // uint64 seek_height = 3;
  if (this->_internal_seek_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seek_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SeekPreHashByHightReq)
  return target;
}

size_t SeekPreHashByHightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SeekPreHashByHightReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string self_node_id = 1;
  if (!this->_internal_self_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_self_node_id());
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // uint64 seek_height = 3;
  if (this->_internal_seek_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seek_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeekPreHashByHightReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeekPreHashByHightReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeekPreHashByHightReq::GetClassData() const { return &_class_data_; }


void SeekPreHashByHightReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeekPreHashByHightReq*>(&to_msg);
  auto& from = static_cast<const SeekPreHashByHightReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SeekPreHashByHightReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_self_node_id().empty()) {
    _this->_internal_set_self_node_id(from._internal_self_node_id());
  }
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_seek_height() != 0) {
    _this->_internal_set_seek_height(from._internal_seek_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeekPreHashByHightReq::CopyFrom(const SeekPreHashByHightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SeekPreHashByHightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekPreHashByHightReq::IsInitialized() const {
  return true;
}

void SeekPreHashByHightReq::InternalSwap(SeekPreHashByHightReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.self_node_id_, lhs_arena,
      &other->_impl_.self_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  swap(_impl_.seek_height_, other->_impl_.seek_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekPreHashByHightReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[4]);
}

// ===================================================================

class SeekPreHashByHightAck::_Internal {
 public:
};

SeekPreHashByHightAck::SeekPreHashByHightAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SeekPreHashByHightAck)
}
SeekPreHashByHightAck::SeekPreHashByHightAck(const SeekPreHashByHightAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeekPreHashByHightAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prehashes_){from._impl_.prehashes_}
    , decltype(_impl_.self_node_id_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.seek_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_self_node_id().empty()) {
    _this->_impl_.self_node_id_.Set(from._internal_self_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.seek_height_ = from._impl_.seek_height_;
  // @@protoc_insertion_point(copy_constructor:SeekPreHashByHightAck)
}

inline void SeekPreHashByHightAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prehashes_){arena}
    , decltype(_impl_.self_node_id_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.seek_height_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SeekPreHashByHightAck::~SeekPreHashByHightAck() {
  // @@protoc_insertion_point(destructor:SeekPreHashByHightAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeekPreHashByHightAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prehashes_.~RepeatedPtrField();
  _impl_.self_node_id_.Destroy();
  _impl_.msg_id_.Destroy();
}

void SeekPreHashByHightAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeekPreHashByHightAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SeekPreHashByHightAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prehashes_.Clear();
  _impl_.self_node_id_.ClearToEmpty();
  _impl_.msg_id_.ClearToEmpty();
  _impl_.seek_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeekPreHashByHightAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string self_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_self_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SeekPreHashByHightAck.self_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SeekPreHashByHightAck.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 seek_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seek_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string prehashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prehashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SeekPreHashByHightAck.prehashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeekPreHashByHightAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SeekPreHashByHightAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string self_node_id = 1;
  if (!this->_internal_self_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_self_node_id().data(), static_cast<int>(this->_internal_self_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SeekPreHashByHightAck.self_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_self_node_id(), target);
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SeekPreHashByHightAck.msg_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_id(), target);
  }

  // uint64 seek_height = 3;
  if (this->_internal_seek_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seek_height(), target);
  }

  // repeated string prehashes = 4;
  for (int i = 0, n = this->_internal_prehashes_size(); i < n; i++) {
    const auto& s = this->_internal_prehashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SeekPreHashByHightAck.prehashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SeekPreHashByHightAck)
  return target;
}

size_t SeekPreHashByHightAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SeekPreHashByHightAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prehashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.prehashes_.size());
  for (int i = 0, n = _impl_.prehashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.prehashes_.Get(i));
  }

  // string self_node_id = 1;
  if (!this->_internal_self_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_self_node_id());
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // uint64 seek_height = 3;
  if (this->_internal_seek_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seek_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeekPreHashByHightAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeekPreHashByHightAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeekPreHashByHightAck::GetClassData() const { return &_class_data_; }


void SeekPreHashByHightAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeekPreHashByHightAck*>(&to_msg);
  auto& from = static_cast<const SeekPreHashByHightAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SeekPreHashByHightAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prehashes_.MergeFrom(from._impl_.prehashes_);
  if (!from._internal_self_node_id().empty()) {
    _this->_internal_set_self_node_id(from._internal_self_node_id());
  }
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_seek_height() != 0) {
    _this->_internal_set_seek_height(from._internal_seek_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeekPreHashByHightAck::CopyFrom(const SeekPreHashByHightAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SeekPreHashByHightAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekPreHashByHightAck::IsInitialized() const {
  return true;
}

void SeekPreHashByHightAck::InternalSwap(SeekPreHashByHightAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prehashes_.InternalSwap(&other->_impl_.prehashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.self_node_id_, lhs_arena,
      &other->_impl_.self_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  swap(_impl_.seek_height_, other->_impl_.seek_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekPreHashByHightAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[5]);
}

// ===================================================================

class preHashPair::_Internal {
 public:
};

preHashPair::preHashPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:preHashPair)
}
preHashPair::preHashPair(const preHashPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  preHashPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contractaddr_){}
    , decltype(_impl_.roothash_){}
    , decltype(_impl_.blockraw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contractaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contractaddr().empty()) {
    _this->_impl_.contractaddr_.Set(from._internal_contractaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.roothash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roothash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roothash().empty()) {
    _this->_impl_.roothash_.Set(from._internal_roothash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blockraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockraw().empty()) {
    _this->_impl_.blockraw_.Set(from._internal_blockraw(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:preHashPair)
}

inline void preHashPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contractaddr_){}
    , decltype(_impl_.roothash_){}
    , decltype(_impl_.blockraw_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contractaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.roothash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roothash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blockraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

preHashPair::~preHashPair() {
  // @@protoc_insertion_point(destructor:preHashPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void preHashPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contractaddr_.Destroy();
  _impl_.roothash_.Destroy();
  _impl_.blockraw_.Destroy();
}

void preHashPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void preHashPair::Clear() {
// @@protoc_insertion_point(message_clear_start:preHashPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contractaddr_.ClearToEmpty();
  _impl_.roothash_.ClearToEmpty();
  _impl_.blockraw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* preHashPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ContractAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contractaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "preHashPair.ContractAddr"));
        } else
          goto handle_unusual;
        continue;
      // string RootHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roothash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "preHashPair.RootHash"));
        } else
          goto handle_unusual;
        continue;
      // bytes blockRaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_blockraw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* preHashPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:preHashPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContractAddr = 1;
  if (!this->_internal_contractaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractaddr().data(), static_cast<int>(this->_internal_contractaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "preHashPair.ContractAddr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contractaddr(), target);
  }

  // string RootHash = 2;
  if (!this->_internal_roothash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roothash().data(), static_cast<int>(this->_internal_roothash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "preHashPair.RootHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roothash(), target);
  }

  // bytes blockRaw = 3;
  if (!this->_internal_blockraw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blockraw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:preHashPair)
  return target;
}

size_t preHashPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:preHashPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContractAddr = 1;
  if (!this->_internal_contractaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractaddr());
  }

  // string RootHash = 2;
  if (!this->_internal_roothash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roothash());
  }

  // bytes blockRaw = 3;
  if (!this->_internal_blockraw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockraw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData preHashPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    preHashPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*preHashPair::GetClassData() const { return &_class_data_; }


void preHashPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<preHashPair*>(&to_msg);
  auto& from = static_cast<const preHashPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:preHashPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contractaddr().empty()) {
    _this->_internal_set_contractaddr(from._internal_contractaddr());
  }
  if (!from._internal_roothash().empty()) {
    _this->_internal_set_roothash(from._internal_roothash());
  }
  if (!from._internal_blockraw().empty()) {
    _this->_internal_set_blockraw(from._internal_blockraw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void preHashPair::CopyFrom(const preHashPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:preHashPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool preHashPair::IsInitialized() const {
  return true;
}

void preHashPair::InternalSwap(preHashPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contractaddr_, lhs_arena,
      &other->_impl_.contractaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roothash_, lhs_arena,
      &other->_impl_.roothash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockraw_, lhs_arena,
      &other->_impl_.blockraw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata preHashPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[6]);
}

// ===================================================================

class newSeekContractPreHashReq::_Internal {
 public:
};

newSeekContractPreHashReq::newSeekContractPreHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:newSeekContractPreHashReq)
}
newSeekContractPreHashReq::newSeekContractPreHashReq(const newSeekContractPreHashReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  newSeekContractPreHashReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seekroothash_){from._impl_.seekroothash_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.self_node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_self_node_id().empty()) {
    _this->_impl_.self_node_id_.Set(from._internal_self_node_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:newSeekContractPreHashReq)
}

inline void newSeekContractPreHashReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seekroothash_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.self_node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

newSeekContractPreHashReq::~newSeekContractPreHashReq() {
  // @@protoc_insertion_point(destructor:newSeekContractPreHashReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void newSeekContractPreHashReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seekroothash_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.msg_id_.Destroy();
  _impl_.self_node_id_.Destroy();
}

void newSeekContractPreHashReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void newSeekContractPreHashReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newSeekContractPreHashReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seekroothash_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.msg_id_.ClearToEmpty();
  _impl_.self_node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* newSeekContractPreHashReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "newSeekContractPreHashReq.version"));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "newSeekContractPreHashReq.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // string self_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_self_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "newSeekContractPreHashReq.self_node_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .preHashPair seekRootHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seekroothash(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* newSeekContractPreHashReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newSeekContractPreHashReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newSeekContractPreHashReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newSeekContractPreHashReq.msg_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_id(), target);
  }

  // string self_node_id = 3;
  if (!this->_internal_self_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_self_node_id().data(), static_cast<int>(this->_internal_self_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newSeekContractPreHashReq.self_node_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_self_node_id(), target);
  }

  // repeated .preHashPair seekRootHash = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_seekroothash_size()); i < n; i++) {
    const auto& repfield = this->_internal_seekroothash(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newSeekContractPreHashReq)
  return target;
}

size_t newSeekContractPreHashReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newSeekContractPreHashReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .preHashPair seekRootHash = 4;
  total_size += 1UL * this->_internal_seekroothash_size();
  for (const auto& msg : this->_impl_.seekroothash_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // string self_node_id = 3;
  if (!this->_internal_self_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_self_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData newSeekContractPreHashReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    newSeekContractPreHashReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*newSeekContractPreHashReq::GetClassData() const { return &_class_data_; }


void newSeekContractPreHashReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<newSeekContractPreHashReq*>(&to_msg);
  auto& from = static_cast<const newSeekContractPreHashReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:newSeekContractPreHashReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seekroothash_.MergeFrom(from._impl_.seekroothash_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (!from._internal_self_node_id().empty()) {
    _this->_internal_set_self_node_id(from._internal_self_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void newSeekContractPreHashReq::CopyFrom(const newSeekContractPreHashReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newSeekContractPreHashReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool newSeekContractPreHashReq::IsInitialized() const {
  return true;
}

void newSeekContractPreHashReq::InternalSwap(newSeekContractPreHashReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seekroothash_.InternalSwap(&other->_impl_.seekroothash_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.self_node_id_, lhs_arena,
      &other->_impl_.self_node_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata newSeekContractPreHashReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[7]);
}

// ===================================================================

class newSeekContractPreHashAck::_Internal {
 public:
};

newSeekContractPreHashAck::newSeekContractPreHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:newSeekContractPreHashAck)
}
newSeekContractPreHashAck::newSeekContractPreHashAck(const newSeekContractPreHashAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  newSeekContractPreHashAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seekcontractblock_){from._impl_.seekcontractblock_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.self_node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_id().empty()) {
    _this->_impl_.msg_id_.Set(from._internal_msg_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_self_node_id().empty()) {
    _this->_impl_.self_node_id_.Set(from._internal_self_node_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:newSeekContractPreHashAck)
}

inline void newSeekContractPreHashAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seekcontractblock_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.self_node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.self_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

newSeekContractPreHashAck::~newSeekContractPreHashAck() {
  // @@protoc_insertion_point(destructor:newSeekContractPreHashAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void newSeekContractPreHashAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seekcontractblock_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.msg_id_.Destroy();
  _impl_.self_node_id_.Destroy();
}

void newSeekContractPreHashAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void newSeekContractPreHashAck::Clear() {
// @@protoc_insertion_point(message_clear_start:newSeekContractPreHashAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seekcontractblock_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.msg_id_.ClearToEmpty();
  _impl_.self_node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* newSeekContractPreHashAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "newSeekContractPreHashAck.version"));
        } else
          goto handle_unusual;
        continue;
      // string msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "newSeekContractPreHashAck.msg_id"));
        } else
          goto handle_unusual;
        continue;
      // string self_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_self_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "newSeekContractPreHashAck.self_node_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .preHashPair seekContractBlock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seekcontractblock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* newSeekContractPreHashAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newSeekContractPreHashAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newSeekContractPreHashAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newSeekContractPreHashAck.msg_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_id(), target);
  }

  // string self_node_id = 3;
  if (!this->_internal_self_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_self_node_id().data(), static_cast<int>(this->_internal_self_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newSeekContractPreHashAck.self_node_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_self_node_id(), target);
  }

  // repeated .preHashPair seekContractBlock = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_seekcontractblock_size()); i < n; i++) {
    const auto& repfield = this->_internal_seekcontractblock(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newSeekContractPreHashAck)
  return target;
}

size_t newSeekContractPreHashAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newSeekContractPreHashAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .preHashPair seekContractBlock = 4;
  total_size += 1UL * this->_internal_seekcontractblock_size();
  for (const auto& msg : this->_impl_.seekcontractblock_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string msg_id = 2;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // string self_node_id = 3;
  if (!this->_internal_self_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_self_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData newSeekContractPreHashAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    newSeekContractPreHashAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*newSeekContractPreHashAck::GetClassData() const { return &_class_data_; }


void newSeekContractPreHashAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<newSeekContractPreHashAck*>(&to_msg);
  auto& from = static_cast<const newSeekContractPreHashAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:newSeekContractPreHashAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seekcontractblock_.MergeFrom(from._impl_.seekcontractblock_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_msg_id().empty()) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (!from._internal_self_node_id().empty()) {
    _this->_internal_set_self_node_id(from._internal_self_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void newSeekContractPreHashAck::CopyFrom(const newSeekContractPreHashAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newSeekContractPreHashAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool newSeekContractPreHashAck::IsInitialized() const {
  return true;
}

void newSeekContractPreHashAck::InternalSwap(newSeekContractPreHashAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seekcontractblock_.InternalSwap(&other->_impl_.seekcontractblock_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_id_, lhs_arena,
      &other->_impl_.msg_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.self_node_id_, lhs_arena,
      &other->_impl_.self_node_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata newSeekContractPreHashAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_2eproto_getter, &descriptor_table_block_2eproto_once,
      file_level_metadata_block_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CBlock*
Arena::CreateMaybeMessage< ::CBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockMsg*
Arena::CreateMaybeMessage< ::BlockMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::TxStatus*
Arena::CreateMaybeMessage< ::TxStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockStatus*
Arena::CreateMaybeMessage< ::BlockStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::SeekPreHashByHightReq*
Arena::CreateMaybeMessage< ::SeekPreHashByHightReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SeekPreHashByHightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SeekPreHashByHightAck*
Arena::CreateMaybeMessage< ::SeekPreHashByHightAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SeekPreHashByHightAck >(arena);
}
template<> PROTOBUF_NOINLINE ::preHashPair*
Arena::CreateMaybeMessage< ::preHashPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::preHashPair >(arena);
}
template<> PROTOBUF_NOINLINE ::newSeekContractPreHashReq*
Arena::CreateMaybeMessage< ::newSeekContractPreHashReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newSeekContractPreHashReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newSeekContractPreHashAck*
Arena::CreateMaybeMessage< ::newSeekContractPreHashAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newSeekContractPreHashAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
