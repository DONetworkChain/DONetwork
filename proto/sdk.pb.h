// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ca_protomsg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2eproto;
class AbnormalAddrCnt;
struct AbnormalAddrCntDefaultTypeInternal;
extern AbnormalAddrCntDefaultTypeInternal _AbnormalAddrCnt_default_instance_;
class Claimtx;
struct ClaimtxDefaultTypeInternal;
extern ClaimtxDefaultTypeInternal _Claimtx_default_instance_;
class GetSDKAck;
struct GetSDKAckDefaultTypeInternal;
extern GetSDKAckDefaultTypeInternal _GetSDKAck_default_instance_;
class GetSDKReq;
struct GetSDKReqDefaultTypeInternal;
extern GetSDKReqDefaultTypeInternal _GetSDKReq_default_instance_;
class SDKBonusTx;
struct SDKBonusTxDefaultTypeInternal;
extern SDKBonusTxDefaultTypeInternal _SDKBonusTx_default_instance_;
class SDKBonusamout;
struct SDKBonusamoutDefaultTypeInternal;
extern SDKBonusamoutDefaultTypeInternal _SDKBonusamout_default_instance_;
class SDKClaimBonusTx;
struct SDKClaimBonusTxDefaultTypeInternal;
extern SDKClaimBonusTxDefaultTypeInternal _SDKClaimBonusTx_default_instance_;
class SDKContractCallAck;
struct SDKContractCallAckDefaultTypeInternal;
extern SDKContractCallAckDefaultTypeInternal _SDKContractCallAck_default_instance_;
class SDKContractCallReq;
struct SDKContractCallReqDefaultTypeInternal;
extern SDKContractCallReqDefaultTypeInternal _SDKContractCallReq_default_instance_;
class SDKContractDeployAck;
struct SDKContractDeployAckDefaultTypeInternal;
extern SDKContractDeployAckDefaultTypeInternal _SDKContractDeployAck_default_instance_;
class SDKContractDeployReq;
struct SDKContractDeployReqDefaultTypeInternal;
extern SDKContractDeployReqDefaultTypeInternal _SDKContractDeployReq_default_instance_;
class SDKNodeInfo;
struct SDKNodeInfoDefaultTypeInternal;
extern SDKNodeInfoDefaultTypeInternal _SDKNodeInfo_default_instance_;
class SDKPledgeTx;
struct SDKPledgeTxDefaultTypeInternal;
extern SDKPledgeTxDefaultTypeInternal _SDKPledgeTx_default_instance_;
class SDKUtxo;
struct SDKUtxoDefaultTypeInternal;
extern SDKUtxoDefaultTypeInternal _SDKUtxo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AbnormalAddrCnt* Arena::CreateMaybeMessage<::AbnormalAddrCnt>(Arena*);
template<> ::Claimtx* Arena::CreateMaybeMessage<::Claimtx>(Arena*);
template<> ::GetSDKAck* Arena::CreateMaybeMessage<::GetSDKAck>(Arena*);
template<> ::GetSDKReq* Arena::CreateMaybeMessage<::GetSDKReq>(Arena*);
template<> ::SDKBonusTx* Arena::CreateMaybeMessage<::SDKBonusTx>(Arena*);
template<> ::SDKBonusamout* Arena::CreateMaybeMessage<::SDKBonusamout>(Arena*);
template<> ::SDKClaimBonusTx* Arena::CreateMaybeMessage<::SDKClaimBonusTx>(Arena*);
template<> ::SDKContractCallAck* Arena::CreateMaybeMessage<::SDKContractCallAck>(Arena*);
template<> ::SDKContractCallReq* Arena::CreateMaybeMessage<::SDKContractCallReq>(Arena*);
template<> ::SDKContractDeployAck* Arena::CreateMaybeMessage<::SDKContractDeployAck>(Arena*);
template<> ::SDKContractDeployReq* Arena::CreateMaybeMessage<::SDKContractDeployReq>(Arena*);
template<> ::SDKNodeInfo* Arena::CreateMaybeMessage<::SDKNodeInfo>(Arena*);
template<> ::SDKPledgeTx* Arena::CreateMaybeMessage<::SDKPledgeTx>(Arena*);
template<> ::SDKUtxo* Arena::CreateMaybeMessage<::SDKUtxo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum vrfAgentType : int {
  vrfAgentType_defalut = 0,
  vrfAgentType_vrf = 1,
  vrfAgentType_local = 2,
  vrfAgentType_unknow = 3,
  vrfAgentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vrfAgentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vrfAgentType_IsValid(int value);
constexpr vrfAgentType vrfAgentType_MIN = vrfAgentType_defalut;
constexpr vrfAgentType vrfAgentType_MAX = vrfAgentType_unknow;
constexpr int vrfAgentType_ARRAYSIZE = vrfAgentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* vrfAgentType_descriptor();
template<typename T>
inline const std::string& vrfAgentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vrfAgentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vrfAgentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    vrfAgentType_descriptor(), enum_t_value);
}
inline bool vrfAgentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vrfAgentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<vrfAgentType>(
    vrfAgentType_descriptor(), name, value);
}
// ===================================================================

class GetSDKReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSDKReq) */ {
 public:
  inline GetSDKReq() : GetSDKReq(nullptr) {}
  ~GetSDKReq() override;
  explicit PROTOBUF_CONSTEXPR GetSDKReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSDKReq(const GetSDKReq& from);
  GetSDKReq(GetSDKReq&& from) noexcept
    : GetSDKReq() {
    *this = ::std::move(from);
  }

  inline GetSDKReq& operator=(const GetSDKReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSDKReq& operator=(GetSDKReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSDKReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSDKReq* internal_default_instance() {
    return reinterpret_cast<const GetSDKReq*>(
               &_GetSDKReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSDKReq& a, GetSDKReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSDKReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSDKReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSDKReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSDKReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSDKReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSDKReq& from) {
    GetSDKReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSDKReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSDKReq";
  }
  protected:
  explicit GetSDKReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kVersionFieldNumber = 1,
    kToaddrFieldNumber = 3,
    kTimeFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // repeated string address = 2;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  const std::string& address(int index) const;
  std::string* mutable_address(int index);
  void set_address(int index, const std::string& value);
  void set_address(int index, std::string&& value);
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, size_t size);
  std::string* add_address();
  void add_address(const std::string& value);
  void add_address(std::string&& value);
  void add_address(const char* value);
  void add_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address();
  private:
  const std::string& _internal_address(int index) const;
  std::string* _internal_add_address();
  public:

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string toaddr = 3;
  void clear_toaddr();
  const std::string& toaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_toaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_toaddr();
  PROTOBUF_NODISCARD std::string* release_toaddr();
  void set_allocated_toaddr(std::string* toaddr);
  private:
  const std::string& _internal_toaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_toaddr(const std::string& value);
  std::string* _internal_mutable_toaddr();
  public:

  // uint64 time = 4;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // uint64 type = 5;
  void clear_type();
  uint64_t type() const;
  void set_type(uint64_t value);
  private:
  uint64_t _internal_type() const;
  void _internal_set_type(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetSDKReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toaddr_;
    uint64_t time_;
    uint64_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKUtxo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKUtxo) */ {
 public:
  inline SDKUtxo() : SDKUtxo(nullptr) {}
  ~SDKUtxo() override;
  explicit PROTOBUF_CONSTEXPR SDKUtxo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKUtxo(const SDKUtxo& from);
  SDKUtxo(SDKUtxo&& from) noexcept
    : SDKUtxo() {
    *this = ::std::move(from);
  }

  inline SDKUtxo& operator=(const SDKUtxo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKUtxo& operator=(SDKUtxo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKUtxo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKUtxo* internal_default_instance() {
    return reinterpret_cast<const SDKUtxo*>(
               &_SDKUtxo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SDKUtxo& a, SDKUtxo& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKUtxo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKUtxo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKUtxo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKUtxo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKUtxo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKUtxo& from) {
    SDKUtxo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKUtxo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKUtxo";
  }
  protected:
  explicit SDKUtxo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kHashFieldNumber = 2,
    kValueFieldNumber = 3,
    kNFieldNumber = 4,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 value = 3;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // uint32 n = 4;
  void clear_n();
  uint32_t n() const;
  void set_n(uint32_t value);
  private:
  uint32_t _internal_n() const;
  void _internal_set_n(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SDKUtxo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    uint64_t value_;
    uint32_t n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKBonusamout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKBonusamout) */ {
 public:
  inline SDKBonusamout() : SDKBonusamout(nullptr) {}
  ~SDKBonusamout() override;
  explicit PROTOBUF_CONSTEXPR SDKBonusamout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKBonusamout(const SDKBonusamout& from);
  SDKBonusamout(SDKBonusamout&& from) noexcept
    : SDKBonusamout() {
    *this = ::std::move(from);
  }

  inline SDKBonusamout& operator=(const SDKBonusamout& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKBonusamout& operator=(SDKBonusamout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKBonusamout& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKBonusamout* internal_default_instance() {
    return reinterpret_cast<const SDKBonusamout*>(
               &_SDKBonusamout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SDKBonusamout& a, SDKBonusamout& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKBonusamout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKBonusamout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKBonusamout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKBonusamout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKBonusamout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKBonusamout& from) {
    SDKBonusamout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKBonusamout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKBonusamout";
  }
  protected:
  explicit SDKBonusamout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kInvestAmountFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 invest_amount = 2;
  void clear_invest_amount();
  uint64_t invest_amount() const;
  void set_invest_amount(uint64_t value);
  private:
  uint64_t _internal_invest_amount() const;
  void _internal_set_invest_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SDKBonusamout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    uint64_t invest_amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKBonusTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKBonusTx) */ {
 public:
  inline SDKBonusTx() : SDKBonusTx(nullptr) {}
  ~SDKBonusTx() override;
  explicit PROTOBUF_CONSTEXPR SDKBonusTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKBonusTx(const SDKBonusTx& from);
  SDKBonusTx(SDKBonusTx&& from) noexcept
    : SDKBonusTx() {
    *this = ::std::move(from);
  }

  inline SDKBonusTx& operator=(const SDKBonusTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKBonusTx& operator=(SDKBonusTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKBonusTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKBonusTx* internal_default_instance() {
    return reinterpret_cast<const SDKBonusTx*>(
               &_SDKBonusTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SDKBonusTx& a, SDKBonusTx& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKBonusTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKBonusTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKBonusTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKBonusTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKBonusTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKBonusTx& from) {
    SDKBonusTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKBonusTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKBonusTx";
  }
  protected:
  explicit SDKBonusTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kUtxoFieldNumber = 2,
    kTxFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string utxo = 2;
  void clear_utxo();
  const std::string& utxo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxo();
  PROTOBUF_NODISCARD std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // bytes tx = 3;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:SDKBonusTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKPledgeTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKPledgeTx) */ {
 public:
  inline SDKPledgeTx() : SDKPledgeTx(nullptr) {}
  ~SDKPledgeTx() override;
  explicit PROTOBUF_CONSTEXPR SDKPledgeTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKPledgeTx(const SDKPledgeTx& from);
  SDKPledgeTx(SDKPledgeTx&& from) noexcept
    : SDKPledgeTx() {
    *this = ::std::move(from);
  }

  inline SDKPledgeTx& operator=(const SDKPledgeTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKPledgeTx& operator=(SDKPledgeTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKPledgeTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKPledgeTx* internal_default_instance() {
    return reinterpret_cast<const SDKPledgeTx*>(
               &_SDKPledgeTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SDKPledgeTx& a, SDKPledgeTx& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKPledgeTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKPledgeTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKPledgeTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKPledgeTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKPledgeTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKPledgeTx& from) {
    SDKPledgeTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKPledgeTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKPledgeTx";
  }
  protected:
  explicit SDKPledgeTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kUtxoFieldNumber = 2,
    kTxFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes utxo = 2;
  void clear_utxo();
  const std::string& utxo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxo();
  PROTOBUF_NODISCARD std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // bytes tx = 3;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:SDKPledgeTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class Claimtx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Claimtx) */ {
 public:
  inline Claimtx() : Claimtx(nullptr) {}
  ~Claimtx() override;
  explicit PROTOBUF_CONSTEXPR Claimtx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Claimtx(const Claimtx& from);
  Claimtx(Claimtx&& from) noexcept
    : Claimtx() {
    *this = ::std::move(from);
  }

  inline Claimtx& operator=(const Claimtx& from) {
    CopyFrom(from);
    return *this;
  }
  inline Claimtx& operator=(Claimtx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Claimtx& default_instance() {
    return *internal_default_instance();
  }
  static inline const Claimtx* internal_default_instance() {
    return reinterpret_cast<const Claimtx*>(
               &_Claimtx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Claimtx& a, Claimtx& b) {
    a.Swap(&b);
  }
  inline void Swap(Claimtx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Claimtx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Claimtx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Claimtx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Claimtx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Claimtx& from) {
    Claimtx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Claimtx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Claimtx";
  }
  protected:
  explicit Claimtx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kUtxoFieldNumber = 2,
    kTxFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string utxo = 2;
  void clear_utxo();
  const std::string& utxo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxo();
  PROTOBUF_NODISCARD std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // bytes tx = 3;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:Claimtx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AbnormalAddrCnt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AbnormalAddrCnt) */ {
 public:
  inline AbnormalAddrCnt() : AbnormalAddrCnt(nullptr) {}
  ~AbnormalAddrCnt() override;
  explicit PROTOBUF_CONSTEXPR AbnormalAddrCnt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbnormalAddrCnt(const AbnormalAddrCnt& from);
  AbnormalAddrCnt(AbnormalAddrCnt&& from) noexcept
    : AbnormalAddrCnt() {
    *this = ::std::move(from);
  }

  inline AbnormalAddrCnt& operator=(const AbnormalAddrCnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbnormalAddrCnt& operator=(AbnormalAddrCnt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbnormalAddrCnt& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbnormalAddrCnt* internal_default_instance() {
    return reinterpret_cast<const AbnormalAddrCnt*>(
               &_AbnormalAddrCnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AbnormalAddrCnt& a, AbnormalAddrCnt& b) {
    a.Swap(&b);
  }
  inline void Swap(AbnormalAddrCnt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbnormalAddrCnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbnormalAddrCnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbnormalAddrCnt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbnormalAddrCnt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AbnormalAddrCnt& from) {
    AbnormalAddrCnt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbnormalAddrCnt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AbnormalAddrCnt";
  }
  protected:
  explicit AbnormalAddrCnt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 count = 2;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AbnormalAddrCnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    uint64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKClaimBonusTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKClaimBonusTx) */ {
 public:
  inline SDKClaimBonusTx() : SDKClaimBonusTx(nullptr) {}
  ~SDKClaimBonusTx() override;
  explicit PROTOBUF_CONSTEXPR SDKClaimBonusTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKClaimBonusTx(const SDKClaimBonusTx& from);
  SDKClaimBonusTx(SDKClaimBonusTx&& from) noexcept
    : SDKClaimBonusTx() {
    *this = ::std::move(from);
  }

  inline SDKClaimBonusTx& operator=(const SDKClaimBonusTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKClaimBonusTx& operator=(SDKClaimBonusTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKClaimBonusTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKClaimBonusTx* internal_default_instance() {
    return reinterpret_cast<const SDKClaimBonusTx*>(
               &_SDKClaimBonusTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SDKClaimBonusTx& a, SDKClaimBonusTx& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKClaimBonusTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKClaimBonusTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKClaimBonusTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKClaimBonusTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKClaimBonusTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKClaimBonusTx& from) {
    SDKClaimBonusTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKClaimBonusTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKClaimBonusTx";
  }
  protected:
  explicit SDKClaimBonusTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kUtxoFieldNumber = 2,
    kTxFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string utxo = 2;
  void clear_utxo();
  const std::string& utxo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxo();
  PROTOBUF_NODISCARD std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // bytes tx = 3;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:SDKClaimBonusTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKNodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKNodeInfo) */ {
 public:
  inline SDKNodeInfo() : SDKNodeInfo(nullptr) {}
  ~SDKNodeInfo() override;
  explicit PROTOBUF_CONSTEXPR SDKNodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKNodeInfo(const SDKNodeInfo& from);
  SDKNodeInfo(SDKNodeInfo&& from) noexcept
    : SDKNodeInfo() {
    *this = ::std::move(from);
  }

  inline SDKNodeInfo& operator=(const SDKNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKNodeInfo& operator=(SDKNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKNodeInfo* internal_default_instance() {
    return reinterpret_cast<const SDKNodeInfo*>(
               &_SDKNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SDKNodeInfo& a, SDKNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKNodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKNodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKNodeInfo& from) {
    SDKNodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKNodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKNodeInfo";
  }
  protected:
  explicit SDKNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubFieldNumber = 1,
    kSignFieldNumber = 2,
    kIdentityFieldNumber = 3,
    kBase58AddrFieldNumber = 4,
    kPublicBase58AddrFieldNumber = 5,
    kNameFieldNumber = 6,
    kLogoFieldNumber = 7,
    kVersionFieldNumber = 14,
    kListenIpFieldNumber = 8,
    kListenPortFieldNumber = 9,
    kPublicIpFieldNumber = 10,
    kPublicPortFieldNumber = 11,
    kTimeStampFieldNumber = 13,
    kHeightFieldNumber = 12,
  };
  // bytes pub = 1;
  void clear_pub();
  const std::string& pub() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pub(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pub();
  PROTOBUF_NODISCARD std::string* release_pub();
  void set_allocated_pub(std::string* pub);
  private:
  const std::string& _internal_pub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pub(const std::string& value);
  std::string* _internal_mutable_pub();
  public:

  // bytes sign = 2;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bytes identity = 3;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string base58addr = 4;
  void clear_base58addr();
  const std::string& base58addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base58addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base58addr();
  PROTOBUF_NODISCARD std::string* release_base58addr();
  void set_allocated_base58addr(std::string* base58addr);
  private:
  const std::string& _internal_base58addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base58addr(const std::string& value);
  std::string* _internal_mutable_base58addr();
  public:

  // string public_base58addr = 5;
  void clear_public_base58addr();
  const std::string& public_base58addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_base58addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_base58addr();
  PROTOBUF_NODISCARD std::string* release_public_base58addr();
  void set_allocated_public_base58addr(std::string* public_base58addr);
  private:
  const std::string& _internal_public_base58addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_base58addr(const std::string& value);
  std::string* _internal_mutable_public_base58addr();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string logo = 7;
  void clear_logo();
  const std::string& logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo();
  PROTOBUF_NODISCARD std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // string version = 14;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint32 listen_ip = 8;
  void clear_listen_ip();
  uint32_t listen_ip() const;
  void set_listen_ip(uint32_t value);
  private:
  uint32_t _internal_listen_ip() const;
  void _internal_set_listen_ip(uint32_t value);
  public:

  // uint32 listen_port = 9;
  void clear_listen_port();
  uint32_t listen_port() const;
  void set_listen_port(uint32_t value);
  private:
  uint32_t _internal_listen_port() const;
  void _internal_set_listen_port(uint32_t value);
  public:

  // uint32 public_ip = 10;
  void clear_public_ip();
  uint32_t public_ip() const;
  void set_public_ip(uint32_t value);
  private:
  uint32_t _internal_public_ip() const;
  void _internal_set_public_ip(uint32_t value);
  public:

  // uint32 public_port = 11;
  void clear_public_port();
  uint32_t public_port() const;
  void set_public_port(uint32_t value);
  private:
  uint32_t _internal_public_port() const;
  void _internal_set_public_port(uint32_t value);
  public:

  // uint64 time_stamp = 13;
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // uint32 height = 12;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SDKNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base58addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_base58addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    uint32_t listen_ip_;
    uint32_t listen_port_;
    uint32_t public_ip_;
    uint32_t public_port_;
    uint64_t time_stamp_;
    uint32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GetSDKAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSDKAck) */ {
 public:
  inline GetSDKAck() : GetSDKAck(nullptr) {}
  ~GetSDKAck() override;
  explicit PROTOBUF_CONSTEXPR GetSDKAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSDKAck(const GetSDKAck& from);
  GetSDKAck(GetSDKAck&& from) noexcept
    : GetSDKAck() {
    *this = ::std::move(from);
  }

  inline GetSDKAck& operator=(const GetSDKAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSDKAck& operator=(GetSDKAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSDKAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSDKAck* internal_default_instance() {
    return reinterpret_cast<const GetSDKAck*>(
               &_GetSDKAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSDKAck& a, GetSDKAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSDKAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSDKAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSDKAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSDKAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSDKAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSDKAck& from) {
    GetSDKAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSDKAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSDKAck";
  }
  protected:
  explicit GetSDKAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtxosFieldNumber = 5,
    kBlocksFieldNumber = 6,
    kBonusamountFieldNumber = 8,
    kPledgetxFieldNumber = 9,
    kPledgeaddrFieldNumber = 10,
    kPledgeutxoFieldNumber = 11,
    kBonusAddrFieldNumber = 12,
    kInvestedAddrFieldNumber = 13,
    kBonusTxFieldNumber = 14,
    kBonusAddrInvestUtxosFieldNumber = 15,
    kClaimtxFieldNumber = 16,
    kAbnormaladdrCntFieldNumber = 17,
    kNodeinfoFieldNumber = 22,
    kClaimBonusTxFieldNumber = 24,
    kClaimInvestedAddrFieldNumber = 26,
    kClaimBonusAddrInvestUtxosFieldNumber = 27,
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kHeightFieldNumber = 4,
    kM2FieldNumber = 18,
    kTotalinvestFieldNumber = 19,
    kTotalAwardAmountFieldNumber = 20,
    kTypeFieldNumber = 23,
    kCodeFieldNumber = 2,
  };
  // repeated .SDKUtxo utxos = 5;
  int utxos_size() const;
  private:
  int _internal_utxos_size() const;
  public:
  void clear_utxos();
  ::SDKUtxo* mutable_utxos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKUtxo >*
      mutable_utxos();
  private:
  const ::SDKUtxo& _internal_utxos(int index) const;
  ::SDKUtxo* _internal_add_utxos();
  public:
  const ::SDKUtxo& utxos(int index) const;
  ::SDKUtxo* add_utxos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKUtxo >&
      utxos() const;

  // repeated bytes blocks = 6;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  const std::string& blocks(int index) const;
  std::string* mutable_blocks(int index);
  void set_blocks(int index, const std::string& value);
  void set_blocks(int index, std::string&& value);
  void set_blocks(int index, const char* value);
  void set_blocks(int index, const void* value, size_t size);
  std::string* add_blocks();
  void add_blocks(const std::string& value);
  void add_blocks(std::string&& value);
  void add_blocks(const char* value);
  void add_blocks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks();
  private:
  const std::string& _internal_blocks(int index) const;
  std::string* _internal_add_blocks();
  public:

  // repeated .SDKBonusamout bonusamount = 8;
  int bonusamount_size() const;
  private:
  int _internal_bonusamount_size() const;
  public:
  void clear_bonusamount();
  ::SDKBonusamout* mutable_bonusamount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusamout >*
      mutable_bonusamount();
  private:
  const ::SDKBonusamout& _internal_bonusamount(int index) const;
  ::SDKBonusamout* _internal_add_bonusamount();
  public:
  const ::SDKBonusamout& bonusamount(int index) const;
  ::SDKBonusamout* add_bonusamount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusamout >&
      bonusamount() const;

  // repeated .SDKPledgeTx pledgetx = 9;
  int pledgetx_size() const;
  private:
  int _internal_pledgetx_size() const;
  public:
  void clear_pledgetx();
  ::SDKPledgeTx* mutable_pledgetx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKPledgeTx >*
      mutable_pledgetx();
  private:
  const ::SDKPledgeTx& _internal_pledgetx(int index) const;
  ::SDKPledgeTx* _internal_add_pledgetx();
  public:
  const ::SDKPledgeTx& pledgetx(int index) const;
  ::SDKPledgeTx* add_pledgetx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKPledgeTx >&
      pledgetx() const;

  // repeated string pledgeaddr = 10;
  int pledgeaddr_size() const;
  private:
  int _internal_pledgeaddr_size() const;
  public:
  void clear_pledgeaddr();
  const std::string& pledgeaddr(int index) const;
  std::string* mutable_pledgeaddr(int index);
  void set_pledgeaddr(int index, const std::string& value);
  void set_pledgeaddr(int index, std::string&& value);
  void set_pledgeaddr(int index, const char* value);
  void set_pledgeaddr(int index, const char* value, size_t size);
  std::string* add_pledgeaddr();
  void add_pledgeaddr(const std::string& value);
  void add_pledgeaddr(std::string&& value);
  void add_pledgeaddr(const char* value);
  void add_pledgeaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pledgeaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pledgeaddr();
  private:
  const std::string& _internal_pledgeaddr(int index) const;
  std::string* _internal_add_pledgeaddr();
  public:

  // repeated string pledgeutxo = 11;
  int pledgeutxo_size() const;
  private:
  int _internal_pledgeutxo_size() const;
  public:
  void clear_pledgeutxo();
  const std::string& pledgeutxo(int index) const;
  std::string* mutable_pledgeutxo(int index);
  void set_pledgeutxo(int index, const std::string& value);
  void set_pledgeutxo(int index, std::string&& value);
  void set_pledgeutxo(int index, const char* value);
  void set_pledgeutxo(int index, const char* value, size_t size);
  std::string* add_pledgeutxo();
  void add_pledgeutxo(const std::string& value);
  void add_pledgeutxo(std::string&& value);
  void add_pledgeutxo(const char* value);
  void add_pledgeutxo(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pledgeutxo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pledgeutxo();
  private:
  const std::string& _internal_pledgeutxo(int index) const;
  std::string* _internal_add_pledgeutxo();
  public:

  // repeated string BonusAddr = 12;
  int bonusaddr_size() const;
  private:
  int _internal_bonusaddr_size() const;
  public:
  void clear_bonusaddr();
  const std::string& bonusaddr(int index) const;
  std::string* mutable_bonusaddr(int index);
  void set_bonusaddr(int index, const std::string& value);
  void set_bonusaddr(int index, std::string&& value);
  void set_bonusaddr(int index, const char* value);
  void set_bonusaddr(int index, const char* value, size_t size);
  std::string* add_bonusaddr();
  void add_bonusaddr(const std::string& value);
  void add_bonusaddr(std::string&& value);
  void add_bonusaddr(const char* value);
  void add_bonusaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bonusaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bonusaddr();
  private:
  const std::string& _internal_bonusaddr(int index) const;
  std::string* _internal_add_bonusaddr();
  public:

  // repeated string InvestedAddr = 13;
  int investedaddr_size() const;
  private:
  int _internal_investedaddr_size() const;
  public:
  void clear_investedaddr();
  const std::string& investedaddr(int index) const;
  std::string* mutable_investedaddr(int index);
  void set_investedaddr(int index, const std::string& value);
  void set_investedaddr(int index, std::string&& value);
  void set_investedaddr(int index, const char* value);
  void set_investedaddr(int index, const char* value, size_t size);
  std::string* add_investedaddr();
  void add_investedaddr(const std::string& value);
  void add_investedaddr(std::string&& value);
  void add_investedaddr(const char* value);
  void add_investedaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& investedaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_investedaddr();
  private:
  const std::string& _internal_investedaddr(int index) const;
  std::string* _internal_add_investedaddr();
  public:

  // repeated .SDKBonusTx BonusTx = 14;
  int bonustx_size() const;
  private:
  int _internal_bonustx_size() const;
  public:
  void clear_bonustx();
  ::SDKBonusTx* mutable_bonustx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusTx >*
      mutable_bonustx();
  private:
  const ::SDKBonusTx& _internal_bonustx(int index) const;
  ::SDKBonusTx* _internal_add_bonustx();
  public:
  const ::SDKBonusTx& bonustx(int index) const;
  ::SDKBonusTx* add_bonustx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusTx >&
      bonustx() const;

  // repeated string BonusAddrInvestUtxos = 15;
  int bonusaddrinvestutxos_size() const;
  private:
  int _internal_bonusaddrinvestutxos_size() const;
  public:
  void clear_bonusaddrinvestutxos();
  const std::string& bonusaddrinvestutxos(int index) const;
  std::string* mutable_bonusaddrinvestutxos(int index);
  void set_bonusaddrinvestutxos(int index, const std::string& value);
  void set_bonusaddrinvestutxos(int index, std::string&& value);
  void set_bonusaddrinvestutxos(int index, const char* value);
  void set_bonusaddrinvestutxos(int index, const char* value, size_t size);
  std::string* add_bonusaddrinvestutxos();
  void add_bonusaddrinvestutxos(const std::string& value);
  void add_bonusaddrinvestutxos(std::string&& value);
  void add_bonusaddrinvestutxos(const char* value);
  void add_bonusaddrinvestutxos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bonusaddrinvestutxos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bonusaddrinvestutxos();
  private:
  const std::string& _internal_bonusaddrinvestutxos(int index) const;
  std::string* _internal_add_bonusaddrinvestutxos();
  public:

  // repeated .Claimtx claimtx = 16;
  int claimtx_size() const;
  private:
  int _internal_claimtx_size() const;
  public:
  void clear_claimtx();
  ::Claimtx* mutable_claimtx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Claimtx >*
      mutable_claimtx();
  private:
  const ::Claimtx& _internal_claimtx(int index) const;
  ::Claimtx* _internal_add_claimtx();
  public:
  const ::Claimtx& claimtx(int index) const;
  ::Claimtx* add_claimtx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Claimtx >&
      claimtx() const;

  // repeated .AbnormalAddrCnt abnormaladdr_cnt = 17;
  int abnormaladdr_cnt_size() const;
  private:
  int _internal_abnormaladdr_cnt_size() const;
  public:
  void clear_abnormaladdr_cnt();
  ::AbnormalAddrCnt* mutable_abnormaladdr_cnt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AbnormalAddrCnt >*
      mutable_abnormaladdr_cnt();
  private:
  const ::AbnormalAddrCnt& _internal_abnormaladdr_cnt(int index) const;
  ::AbnormalAddrCnt* _internal_add_abnormaladdr_cnt();
  public:
  const ::AbnormalAddrCnt& abnormaladdr_cnt(int index) const;
  ::AbnormalAddrCnt* add_abnormaladdr_cnt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AbnormalAddrCnt >&
      abnormaladdr_cnt() const;

  // repeated .SDKNodeInfo nodeinfo = 22;
  int nodeinfo_size() const;
  private:
  int _internal_nodeinfo_size() const;
  public:
  void clear_nodeinfo();
  ::SDKNodeInfo* mutable_nodeinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKNodeInfo >*
      mutable_nodeinfo();
  private:
  const ::SDKNodeInfo& _internal_nodeinfo(int index) const;
  ::SDKNodeInfo* _internal_add_nodeinfo();
  public:
  const ::SDKNodeInfo& nodeinfo(int index) const;
  ::SDKNodeInfo* add_nodeinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKNodeInfo >&
      nodeinfo() const;

  // repeated .SDKClaimBonusTx ClaimBonusTx = 24;
  int claimbonustx_size() const;
  private:
  int _internal_claimbonustx_size() const;
  public:
  void clear_claimbonustx();
  ::SDKClaimBonusTx* mutable_claimbonustx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKClaimBonusTx >*
      mutable_claimbonustx();
  private:
  const ::SDKClaimBonusTx& _internal_claimbonustx(int index) const;
  ::SDKClaimBonusTx* _internal_add_claimbonustx();
  public:
  const ::SDKClaimBonusTx& claimbonustx(int index) const;
  ::SDKClaimBonusTx* add_claimbonustx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKClaimBonusTx >&
      claimbonustx() const;

  // repeated string ClaimInvestedAddr = 26;
  int claiminvestedaddr_size() const;
  private:
  int _internal_claiminvestedaddr_size() const;
  public:
  void clear_claiminvestedaddr();
  const std::string& claiminvestedaddr(int index) const;
  std::string* mutable_claiminvestedaddr(int index);
  void set_claiminvestedaddr(int index, const std::string& value);
  void set_claiminvestedaddr(int index, std::string&& value);
  void set_claiminvestedaddr(int index, const char* value);
  void set_claiminvestedaddr(int index, const char* value, size_t size);
  std::string* add_claiminvestedaddr();
  void add_claiminvestedaddr(const std::string& value);
  void add_claiminvestedaddr(std::string&& value);
  void add_claiminvestedaddr(const char* value);
  void add_claiminvestedaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& claiminvestedaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_claiminvestedaddr();
  private:
  const std::string& _internal_claiminvestedaddr(int index) const;
  std::string* _internal_add_claiminvestedaddr();
  public:

  // repeated string ClaimBonusAddrInvestUtxos = 27;
  int claimbonusaddrinvestutxos_size() const;
  private:
  int _internal_claimbonusaddrinvestutxos_size() const;
  public:
  void clear_claimbonusaddrinvestutxos();
  const std::string& claimbonusaddrinvestutxos(int index) const;
  std::string* mutable_claimbonusaddrinvestutxos(int index);
  void set_claimbonusaddrinvestutxos(int index, const std::string& value);
  void set_claimbonusaddrinvestutxos(int index, std::string&& value);
  void set_claimbonusaddrinvestutxos(int index, const char* value);
  void set_claimbonusaddrinvestutxos(int index, const char* value, size_t size);
  std::string* add_claimbonusaddrinvestutxos();
  void add_claimbonusaddrinvestutxos(const std::string& value);
  void add_claimbonusaddrinvestutxos(std::string&& value);
  void add_claimbonusaddrinvestutxos(const char* value);
  void add_claimbonusaddrinvestutxos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& claimbonusaddrinvestutxos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_claimbonusaddrinvestutxos();
  private:
  const std::string& _internal_claimbonusaddrinvestutxos(int index) const;
  std::string* _internal_add_claimbonusaddrinvestutxos();
  public:

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint64 height = 4;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // uint64 M2 = 18;
  void clear_m2();
  uint64_t m2() const;
  void set_m2(uint64_t value);
  private:
  uint64_t _internal_m2() const;
  void _internal_set_m2(uint64_t value);
  public:

  // uint64 Totalinvest = 19;
  void clear_totalinvest();
  uint64_t totalinvest() const;
  void set_totalinvest(uint64_t value);
  private:
  uint64_t _internal_totalinvest() const;
  void _internal_set_totalinvest(uint64_t value);
  public:

  // uint64 TotalAwardAmount = 20;
  void clear_totalawardamount();
  uint64_t totalawardamount() const;
  void set_totalawardamount(uint64_t value);
  private:
  uint64_t _internal_totalawardamount() const;
  void _internal_set_totalawardamount(uint64_t value);
  public:

  // uint64 type = 23;
  void clear_type();
  uint64_t type() const;
  void set_type(uint64_t value);
  private:
  uint64_t _internal_type() const;
  void _internal_set_type(uint64_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetSDKAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKUtxo > utxos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusamout > bonusamount_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKPledgeTx > pledgetx_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pledgeaddr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pledgeutxo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bonusaddr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> investedaddr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusTx > bonustx_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bonusaddrinvestutxos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Claimtx > claimtx_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AbnormalAddrCnt > abnormaladdr_cnt_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKNodeInfo > nodeinfo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKClaimBonusTx > claimbonustx_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> claiminvestedaddr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> claimbonusaddrinvestutxos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint64_t height_;
    uint64_t m2_;
    uint64_t totalinvest_;
    uint64_t totalawardamount_;
    uint64_t type_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKContractDeployReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKContractDeployReq) */ {
 public:
  inline SDKContractDeployReq() : SDKContractDeployReq(nullptr) {}
  ~SDKContractDeployReq() override;
  explicit PROTOBUF_CONSTEXPR SDKContractDeployReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKContractDeployReq(const SDKContractDeployReq& from);
  SDKContractDeployReq(SDKContractDeployReq&& from) noexcept
    : SDKContractDeployReq() {
    *this = ::std::move(from);
  }

  inline SDKContractDeployReq& operator=(const SDKContractDeployReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKContractDeployReq& operator=(SDKContractDeployReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKContractDeployReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKContractDeployReq* internal_default_instance() {
    return reinterpret_cast<const SDKContractDeployReq*>(
               &_SDKContractDeployReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SDKContractDeployReq& a, SDKContractDeployReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKContractDeployReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKContractDeployReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKContractDeployReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKContractDeployReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKContractDeployReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKContractDeployReq& from) {
    SDKContractDeployReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKContractDeployReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKContractDeployReq";
  }
  protected:
  explicit SDKContractDeployReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddressFieldNumber = 2,
    kDeployAmountFieldNumber = 3,
    kPubStrFieldNumber = 5,
    kNContractTypeFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string deploy_amount = 3;
  void clear_deploy_amount();
  const std::string& deploy_amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deploy_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deploy_amount();
  PROTOBUF_NODISCARD std::string* release_deploy_amount();
  void set_allocated_deploy_amount(std::string* deploy_amount);
  private:
  const std::string& _internal_deploy_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deploy_amount(const std::string& value);
  std::string* _internal_mutable_deploy_amount();
  public:

  // string pubStr = 5;
  void clear_pubstr();
  const std::string& pubstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubstr();
  PROTOBUF_NODISCARD std::string* release_pubstr();
  void set_allocated_pubstr(std::string* pubstr);
  private:
  const std::string& _internal_pubstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubstr(const std::string& value);
  std::string* _internal_mutable_pubstr();
  public:

  // int32 nContractType = 4;
  void clear_ncontracttype();
  int32_t ncontracttype() const;
  void set_ncontracttype(int32_t value);
  private:
  int32_t _internal_ncontracttype() const;
  void _internal_set_ncontracttype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SDKContractDeployReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deploy_amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubstr_;
    int32_t ncontracttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKContractDeployAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKContractDeployAck) */ {
 public:
  inline SDKContractDeployAck() : SDKContractDeployAck(nullptr) {}
  ~SDKContractDeployAck() override;
  explicit PROTOBUF_CONSTEXPR SDKContractDeployAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKContractDeployAck(const SDKContractDeployAck& from);
  SDKContractDeployAck(SDKContractDeployAck&& from) noexcept
    : SDKContractDeployAck() {
    *this = ::std::move(from);
  }

  inline SDKContractDeployAck& operator=(const SDKContractDeployAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKContractDeployAck& operator=(SDKContractDeployAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKContractDeployAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKContractDeployAck* internal_default_instance() {
    return reinterpret_cast<const SDKContractDeployAck*>(
               &_SDKContractDeployAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SDKContractDeployAck& a, SDKContractDeployAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKContractDeployAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKContractDeployAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKContractDeployAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKContractDeployAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKContractDeployAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKContractDeployAck& from) {
    SDKContractDeployAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKContractDeployAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKContractDeployAck";
  }
  protected:
  explicit SDKContractDeployAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTxFieldNumber = 4,
    kVrfInfoFieldNumber = 9,
    kTopFieldNumber = 5,
    kCodeFieldNumber = 2,
    kIsNeedAgentFlagFieldNumber = 8,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes tx = 4;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // .Vrf vrfInfo = 9;
  bool has_vrfinfo() const;
  private:
  bool _internal_has_vrfinfo() const;
  public:
  void clear_vrfinfo();
  const ::Vrf& vrfinfo() const;
  PROTOBUF_NODISCARD ::Vrf* release_vrfinfo();
  ::Vrf* mutable_vrfinfo();
  void set_allocated_vrfinfo(::Vrf* vrfinfo);
  private:
  const ::Vrf& _internal_vrfinfo() const;
  ::Vrf* _internal_mutable_vrfinfo();
  public:
  void unsafe_arena_set_allocated_vrfinfo(
      ::Vrf* vrfinfo);
  ::Vrf* unsafe_arena_release_vrfinfo();

  // uint64 top = 5;
  void clear_top();
  uint64_t top() const;
  void set_top(uint64_t value);
  private:
  uint64_t _internal_top() const;
  void _internal_set_top(uint64_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // .vrfAgentType isNeedAgent_flag = 8;
  void clear_isneedagent_flag();
  ::vrfAgentType isneedagent_flag() const;
  void set_isneedagent_flag(::vrfAgentType value);
  private:
  ::vrfAgentType _internal_isneedagent_flag() const;
  void _internal_set_isneedagent_flag(::vrfAgentType value);
  public:

  // @@protoc_insertion_point(class_scope:SDKContractDeployAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    ::Vrf* vrfinfo_;
    uint64_t top_;
    int32_t code_;
    int isneedagent_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKContractCallReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKContractCallReq) */ {
 public:
  inline SDKContractCallReq() : SDKContractCallReq(nullptr) {}
  ~SDKContractCallReq() override;
  explicit PROTOBUF_CONSTEXPR SDKContractCallReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKContractCallReq(const SDKContractCallReq& from);
  SDKContractCallReq(SDKContractCallReq&& from) noexcept
    : SDKContractCallReq() {
    *this = ::std::move(from);
  }

  inline SDKContractCallReq& operator=(const SDKContractCallReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKContractCallReq& operator=(SDKContractCallReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKContractCallReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKContractCallReq* internal_default_instance() {
    return reinterpret_cast<const SDKContractCallReq*>(
               &_SDKContractCallReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SDKContractCallReq& a, SDKContractCallReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKContractCallReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKContractCallReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKContractCallReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKContractCallReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKContractCallReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKContractCallReq& from) {
    SDKContractCallReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKContractCallReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKContractCallReq";
  }
  protected:
  explicit SDKContractCallReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kFromaddrFieldNumber = 2,
    kToaddrFieldNumber = 3,
    kDeployStrTxHashFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string fromaddr = 2;
  void clear_fromaddr();
  const std::string& fromaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fromaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fromaddr();
  PROTOBUF_NODISCARD std::string* release_fromaddr();
  void set_allocated_fromaddr(std::string* fromaddr);
  private:
  const std::string& _internal_fromaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fromaddr(const std::string& value);
  std::string* _internal_mutable_fromaddr();
  public:

  // string toaddr = 3;
  void clear_toaddr();
  const std::string& toaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_toaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_toaddr();
  PROTOBUF_NODISCARD std::string* release_toaddr();
  void set_allocated_toaddr(std::string* toaddr);
  private:
  const std::string& _internal_toaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_toaddr(const std::string& value);
  std::string* _internal_mutable_toaddr();
  public:

  // string deploy_strTxHash = 4;
  void clear_deploy_strtxhash();
  const std::string& deploy_strtxhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deploy_strtxhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deploy_strtxhash();
  PROTOBUF_NODISCARD std::string* release_deploy_strtxhash();
  void set_allocated_deploy_strtxhash(std::string* deploy_strtxhash);
  private:
  const std::string& _internal_deploy_strtxhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deploy_strtxhash(const std::string& value);
  std::string* _internal_mutable_deploy_strtxhash();
  public:

  // @@protoc_insertion_point(class_scope:SDKContractCallReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deploy_strtxhash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class SDKContractCallAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDKContractCallAck) */ {
 public:
  inline SDKContractCallAck() : SDKContractCallAck(nullptr) {}
  ~SDKContractCallAck() override;
  explicit PROTOBUF_CONSTEXPR SDKContractCallAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKContractCallAck(const SDKContractCallAck& from);
  SDKContractCallAck(SDKContractCallAck&& from) noexcept
    : SDKContractCallAck() {
    *this = ::std::move(from);
  }

  inline SDKContractCallAck& operator=(const SDKContractCallAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKContractCallAck& operator=(SDKContractCallAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKContractCallAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKContractCallAck* internal_default_instance() {
    return reinterpret_cast<const SDKContractCallAck*>(
               &_SDKContractCallAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SDKContractCallAck& a, SDKContractCallAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKContractCallAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKContractCallAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKContractCallAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKContractCallAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SDKContractCallAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SDKContractCallAck& from) {
    SDKContractCallAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKContractCallAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDKContractCallAck";
  }
  protected:
  explicit SDKContractCallAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTxFieldNumber = 4,
    kVrfInfoFieldNumber = 9,
    kTopFieldNumber = 5,
    kCodeFieldNumber = 2,
    kIsNeedAgentFlagFieldNumber = 8,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes tx = 4;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // .Vrf vrfInfo = 9;
  bool has_vrfinfo() const;
  private:
  bool _internal_has_vrfinfo() const;
  public:
  void clear_vrfinfo();
  const ::Vrf& vrfinfo() const;
  PROTOBUF_NODISCARD ::Vrf* release_vrfinfo();
  ::Vrf* mutable_vrfinfo();
  void set_allocated_vrfinfo(::Vrf* vrfinfo);
  private:
  const ::Vrf& _internal_vrfinfo() const;
  ::Vrf* _internal_mutable_vrfinfo();
  public:
  void unsafe_arena_set_allocated_vrfinfo(
      ::Vrf* vrfinfo);
  ::Vrf* unsafe_arena_release_vrfinfo();

  // uint64 top = 5;
  void clear_top();
  uint64_t top() const;
  void set_top(uint64_t value);
  private:
  uint64_t _internal_top() const;
  void _internal_set_top(uint64_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // .vrfAgentType isNeedAgent_flag = 8;
  void clear_isneedagent_flag();
  ::vrfAgentType isneedagent_flag() const;
  void set_isneedagent_flag(::vrfAgentType value);
  private:
  ::vrfAgentType _internal_isneedagent_flag() const;
  void _internal_set_isneedagent_flag(::vrfAgentType value);
  public:

  // @@protoc_insertion_point(class_scope:SDKContractCallAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    ::Vrf* vrfinfo_;
    uint64_t top_;
    int32_t code_;
    int isneedagent_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSDKReq

// string version = 1;
inline void GetSDKReq::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& GetSDKReq::version() const {
  // @@protoc_insertion_point(field_get:GetSDKReq.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSDKReq::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetSDKReq.version)
}
inline std::string* GetSDKReq::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:GetSDKReq.version)
  return _s;
}
inline const std::string& GetSDKReq::_internal_version() const {
  return _impl_.version_.Get();
}
inline void GetSDKReq::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSDKReq::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSDKReq::release_version() {
  // @@protoc_insertion_point(field_release:GetSDKReq.version)
  return _impl_.version_.Release();
}
inline void GetSDKReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetSDKReq.version)
}

// repeated string address = 2;
inline int GetSDKReq::_internal_address_size() const {
  return _impl_.address_.size();
}
inline int GetSDKReq::address_size() const {
  return _internal_address_size();
}
inline void GetSDKReq::clear_address() {
  _impl_.address_.Clear();
}
inline std::string* GetSDKReq::add_address() {
  std::string* _s = _internal_add_address();
  // @@protoc_insertion_point(field_add_mutable:GetSDKReq.address)
  return _s;
}
inline const std::string& GetSDKReq::_internal_address(int index) const {
  return _impl_.address_.Get(index);
}
inline const std::string& GetSDKReq::address(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKReq.address)
  return _internal_address(index);
}
inline std::string* GetSDKReq::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKReq.address)
  return _impl_.address_.Mutable(index);
}
inline void GetSDKReq::set_address(int index, const std::string& value) {
  _impl_.address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKReq.address)
}
inline void GetSDKReq::set_address(int index, std::string&& value) {
  _impl_.address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKReq.address)
}
inline void GetSDKReq::set_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKReq.address)
}
inline void GetSDKReq::set_address(int index, const char* value, size_t size) {
  _impl_.address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKReq.address)
}
inline std::string* GetSDKReq::_internal_add_address() {
  return _impl_.address_.Add();
}
inline void GetSDKReq::add_address(const std::string& value) {
  _impl_.address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKReq.address)
}
inline void GetSDKReq::add_address(std::string&& value) {
  _impl_.address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKReq.address)
}
inline void GetSDKReq::add_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKReq.address)
}
inline void GetSDKReq::add_address(const char* value, size_t size) {
  _impl_.address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKReq.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKReq::address() const {
  // @@protoc_insertion_point(field_list:GetSDKReq.address)
  return _impl_.address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKReq::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKReq.address)
  return &_impl_.address_;
}

// string toaddr = 3;
inline void GetSDKReq::clear_toaddr() {
  _impl_.toaddr_.ClearToEmpty();
}
inline const std::string& GetSDKReq::toaddr() const {
  // @@protoc_insertion_point(field_get:GetSDKReq.toaddr)
  return _internal_toaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSDKReq::set_toaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.toaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetSDKReq.toaddr)
}
inline std::string* GetSDKReq::mutable_toaddr() {
  std::string* _s = _internal_mutable_toaddr();
  // @@protoc_insertion_point(field_mutable:GetSDKReq.toaddr)
  return _s;
}
inline const std::string& GetSDKReq::_internal_toaddr() const {
  return _impl_.toaddr_.Get();
}
inline void GetSDKReq::_internal_set_toaddr(const std::string& value) {
  
  _impl_.toaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSDKReq::_internal_mutable_toaddr() {
  
  return _impl_.toaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSDKReq::release_toaddr() {
  // @@protoc_insertion_point(field_release:GetSDKReq.toaddr)
  return _impl_.toaddr_.Release();
}
inline void GetSDKReq::set_allocated_toaddr(std::string* toaddr) {
  if (toaddr != nullptr) {
    
  } else {
    
  }
  _impl_.toaddr_.SetAllocated(toaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.toaddr_.IsDefault()) {
    _impl_.toaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetSDKReq.toaddr)
}

// uint64 time = 4;
inline void GetSDKReq::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t GetSDKReq::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t GetSDKReq::time() const {
  // @@protoc_insertion_point(field_get:GetSDKReq.time)
  return _internal_time();
}
inline void GetSDKReq::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void GetSDKReq::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:GetSDKReq.time)
}

// uint64 type = 5;
inline void GetSDKReq::clear_type() {
  _impl_.type_ = uint64_t{0u};
}
inline uint64_t GetSDKReq::_internal_type() const {
  return _impl_.type_;
}
inline uint64_t GetSDKReq::type() const {
  // @@protoc_insertion_point(field_get:GetSDKReq.type)
  return _internal_type();
}
inline void GetSDKReq::_internal_set_type(uint64_t value) {
  
  _impl_.type_ = value;
}
inline void GetSDKReq::set_type(uint64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:GetSDKReq.type)
}

// -------------------------------------------------------------------

// SDKUtxo

// string address = 1;
inline void SDKUtxo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SDKUtxo::address() const {
  // @@protoc_insertion_point(field_get:SDKUtxo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKUtxo::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKUtxo.address)
}
inline std::string* SDKUtxo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SDKUtxo.address)
  return _s;
}
inline const std::string& SDKUtxo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SDKUtxo::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKUtxo::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKUtxo::release_address() {
  // @@protoc_insertion_point(field_release:SDKUtxo.address)
  return _impl_.address_.Release();
}
inline void SDKUtxo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKUtxo.address)
}

// string hash = 2;
inline void SDKUtxo::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& SDKUtxo::hash() const {
  // @@protoc_insertion_point(field_get:SDKUtxo.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKUtxo::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKUtxo.hash)
}
inline std::string* SDKUtxo::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:SDKUtxo.hash)
  return _s;
}
inline const std::string& SDKUtxo::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void SDKUtxo::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKUtxo::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKUtxo::release_hash() {
  // @@protoc_insertion_point(field_release:SDKUtxo.hash)
  return _impl_.hash_.Release();
}
inline void SDKUtxo::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKUtxo.hash)
}

// uint64 value = 3;
inline void SDKUtxo::clear_value() {
  _impl_.value_ = uint64_t{0u};
}
inline uint64_t SDKUtxo::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t SDKUtxo::value() const {
  // @@protoc_insertion_point(field_get:SDKUtxo.value)
  return _internal_value();
}
inline void SDKUtxo::_internal_set_value(uint64_t value) {
  
  _impl_.value_ = value;
}
inline void SDKUtxo::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:SDKUtxo.value)
}

// uint32 n = 4;
inline void SDKUtxo::clear_n() {
  _impl_.n_ = 0u;
}
inline uint32_t SDKUtxo::_internal_n() const {
  return _impl_.n_;
}
inline uint32_t SDKUtxo::n() const {
  // @@protoc_insertion_point(field_get:SDKUtxo.n)
  return _internal_n();
}
inline void SDKUtxo::_internal_set_n(uint32_t value) {
  
  _impl_.n_ = value;
}
inline void SDKUtxo::set_n(uint32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:SDKUtxo.n)
}

// -------------------------------------------------------------------

// SDKBonusamout

// string address = 1;
inline void SDKBonusamout::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SDKBonusamout::address() const {
  // @@protoc_insertion_point(field_get:SDKBonusamout.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKBonusamout::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKBonusamout.address)
}
inline std::string* SDKBonusamout::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SDKBonusamout.address)
  return _s;
}
inline const std::string& SDKBonusamout::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SDKBonusamout::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKBonusamout::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKBonusamout::release_address() {
  // @@protoc_insertion_point(field_release:SDKBonusamout.address)
  return _impl_.address_.Release();
}
inline void SDKBonusamout::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKBonusamout.address)
}

// uint64 invest_amount = 2;
inline void SDKBonusamout::clear_invest_amount() {
  _impl_.invest_amount_ = uint64_t{0u};
}
inline uint64_t SDKBonusamout::_internal_invest_amount() const {
  return _impl_.invest_amount_;
}
inline uint64_t SDKBonusamout::invest_amount() const {
  // @@protoc_insertion_point(field_get:SDKBonusamout.invest_amount)
  return _internal_invest_amount();
}
inline void SDKBonusamout::_internal_set_invest_amount(uint64_t value) {
  
  _impl_.invest_amount_ = value;
}
inline void SDKBonusamout::set_invest_amount(uint64_t value) {
  _internal_set_invest_amount(value);
  // @@protoc_insertion_point(field_set:SDKBonusamout.invest_amount)
}

// -------------------------------------------------------------------

// SDKBonusTx

// string address = 1;
inline void SDKBonusTx::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SDKBonusTx::address() const {
  // @@protoc_insertion_point(field_get:SDKBonusTx.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKBonusTx::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKBonusTx.address)
}
inline std::string* SDKBonusTx::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SDKBonusTx.address)
  return _s;
}
inline const std::string& SDKBonusTx::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SDKBonusTx::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKBonusTx::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKBonusTx::release_address() {
  // @@protoc_insertion_point(field_release:SDKBonusTx.address)
  return _impl_.address_.Release();
}
inline void SDKBonusTx::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKBonusTx.address)
}

// string utxo = 2;
inline void SDKBonusTx::clear_utxo() {
  _impl_.utxo_.ClearToEmpty();
}
inline const std::string& SDKBonusTx::utxo() const {
  // @@protoc_insertion_point(field_get:SDKBonusTx.utxo)
  return _internal_utxo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKBonusTx::set_utxo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.utxo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKBonusTx.utxo)
}
inline std::string* SDKBonusTx::mutable_utxo() {
  std::string* _s = _internal_mutable_utxo();
  // @@protoc_insertion_point(field_mutable:SDKBonusTx.utxo)
  return _s;
}
inline const std::string& SDKBonusTx::_internal_utxo() const {
  return _impl_.utxo_.Get();
}
inline void SDKBonusTx::_internal_set_utxo(const std::string& value) {
  
  _impl_.utxo_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKBonusTx::_internal_mutable_utxo() {
  
  return _impl_.utxo_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKBonusTx::release_utxo() {
  // @@protoc_insertion_point(field_release:SDKBonusTx.utxo)
  return _impl_.utxo_.Release();
}
inline void SDKBonusTx::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  _impl_.utxo_.SetAllocated(utxo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.utxo_.IsDefault()) {
    _impl_.utxo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKBonusTx.utxo)
}

// bytes tx = 3;
inline void SDKBonusTx::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& SDKBonusTx::tx() const {
  // @@protoc_insertion_point(field_get:SDKBonusTx.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKBonusTx::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKBonusTx.tx)
}
inline std::string* SDKBonusTx::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:SDKBonusTx.tx)
  return _s;
}
inline const std::string& SDKBonusTx::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void SDKBonusTx::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKBonusTx::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKBonusTx::release_tx() {
  // @@protoc_insertion_point(field_release:SDKBonusTx.tx)
  return _impl_.tx_.Release();
}
inline void SDKBonusTx::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKBonusTx.tx)
}

// -------------------------------------------------------------------

// SDKPledgeTx

// string address = 1;
inline void SDKPledgeTx::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SDKPledgeTx::address() const {
  // @@protoc_insertion_point(field_get:SDKPledgeTx.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKPledgeTx::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKPledgeTx.address)
}
inline std::string* SDKPledgeTx::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SDKPledgeTx.address)
  return _s;
}
inline const std::string& SDKPledgeTx::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SDKPledgeTx::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKPledgeTx::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKPledgeTx::release_address() {
  // @@protoc_insertion_point(field_release:SDKPledgeTx.address)
  return _impl_.address_.Release();
}
inline void SDKPledgeTx::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKPledgeTx.address)
}

// bytes utxo = 2;
inline void SDKPledgeTx::clear_utxo() {
  _impl_.utxo_.ClearToEmpty();
}
inline const std::string& SDKPledgeTx::utxo() const {
  // @@protoc_insertion_point(field_get:SDKPledgeTx.utxo)
  return _internal_utxo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKPledgeTx::set_utxo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.utxo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKPledgeTx.utxo)
}
inline std::string* SDKPledgeTx::mutable_utxo() {
  std::string* _s = _internal_mutable_utxo();
  // @@protoc_insertion_point(field_mutable:SDKPledgeTx.utxo)
  return _s;
}
inline const std::string& SDKPledgeTx::_internal_utxo() const {
  return _impl_.utxo_.Get();
}
inline void SDKPledgeTx::_internal_set_utxo(const std::string& value) {
  
  _impl_.utxo_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKPledgeTx::_internal_mutable_utxo() {
  
  return _impl_.utxo_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKPledgeTx::release_utxo() {
  // @@protoc_insertion_point(field_release:SDKPledgeTx.utxo)
  return _impl_.utxo_.Release();
}
inline void SDKPledgeTx::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  _impl_.utxo_.SetAllocated(utxo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.utxo_.IsDefault()) {
    _impl_.utxo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKPledgeTx.utxo)
}

// bytes tx = 3;
inline void SDKPledgeTx::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& SDKPledgeTx::tx() const {
  // @@protoc_insertion_point(field_get:SDKPledgeTx.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKPledgeTx::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKPledgeTx.tx)
}
inline std::string* SDKPledgeTx::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:SDKPledgeTx.tx)
  return _s;
}
inline const std::string& SDKPledgeTx::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void SDKPledgeTx::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKPledgeTx::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKPledgeTx::release_tx() {
  // @@protoc_insertion_point(field_release:SDKPledgeTx.tx)
  return _impl_.tx_.Release();
}
inline void SDKPledgeTx::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKPledgeTx.tx)
}

// -------------------------------------------------------------------

// Claimtx

// string address = 1;
inline void Claimtx::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Claimtx::address() const {
  // @@protoc_insertion_point(field_get:Claimtx.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Claimtx::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Claimtx.address)
}
inline std::string* Claimtx::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:Claimtx.address)
  return _s;
}
inline const std::string& Claimtx::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Claimtx::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Claimtx::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* Claimtx::release_address() {
  // @@protoc_insertion_point(field_release:Claimtx.address)
  return _impl_.address_.Release();
}
inline void Claimtx::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Claimtx.address)
}

// string utxo = 2;
inline void Claimtx::clear_utxo() {
  _impl_.utxo_.ClearToEmpty();
}
inline const std::string& Claimtx::utxo() const {
  // @@protoc_insertion_point(field_get:Claimtx.utxo)
  return _internal_utxo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Claimtx::set_utxo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.utxo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Claimtx.utxo)
}
inline std::string* Claimtx::mutable_utxo() {
  std::string* _s = _internal_mutable_utxo();
  // @@protoc_insertion_point(field_mutable:Claimtx.utxo)
  return _s;
}
inline const std::string& Claimtx::_internal_utxo() const {
  return _impl_.utxo_.Get();
}
inline void Claimtx::_internal_set_utxo(const std::string& value) {
  
  _impl_.utxo_.Set(value, GetArenaForAllocation());
}
inline std::string* Claimtx::_internal_mutable_utxo() {
  
  return _impl_.utxo_.Mutable(GetArenaForAllocation());
}
inline std::string* Claimtx::release_utxo() {
  // @@protoc_insertion_point(field_release:Claimtx.utxo)
  return _impl_.utxo_.Release();
}
inline void Claimtx::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  _impl_.utxo_.SetAllocated(utxo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.utxo_.IsDefault()) {
    _impl_.utxo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Claimtx.utxo)
}

// bytes tx = 3;
inline void Claimtx::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& Claimtx::tx() const {
  // @@protoc_insertion_point(field_get:Claimtx.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Claimtx::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Claimtx.tx)
}
inline std::string* Claimtx::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:Claimtx.tx)
  return _s;
}
inline const std::string& Claimtx::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void Claimtx::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* Claimtx::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* Claimtx::release_tx() {
  // @@protoc_insertion_point(field_release:Claimtx.tx)
  return _impl_.tx_.Release();
}
inline void Claimtx::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Claimtx.tx)
}

// -------------------------------------------------------------------

// AbnormalAddrCnt

// string address = 1;
inline void AbnormalAddrCnt::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& AbnormalAddrCnt::address() const {
  // @@protoc_insertion_point(field_get:AbnormalAddrCnt.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AbnormalAddrCnt::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AbnormalAddrCnt.address)
}
inline std::string* AbnormalAddrCnt::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:AbnormalAddrCnt.address)
  return _s;
}
inline const std::string& AbnormalAddrCnt::_internal_address() const {
  return _impl_.address_.Get();
}
inline void AbnormalAddrCnt::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* AbnormalAddrCnt::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* AbnormalAddrCnt::release_address() {
  // @@protoc_insertion_point(field_release:AbnormalAddrCnt.address)
  return _impl_.address_.Release();
}
inline void AbnormalAddrCnt::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AbnormalAddrCnt.address)
}

// uint64 count = 2;
inline void AbnormalAddrCnt::clear_count() {
  _impl_.count_ = uint64_t{0u};
}
inline uint64_t AbnormalAddrCnt::_internal_count() const {
  return _impl_.count_;
}
inline uint64_t AbnormalAddrCnt::count() const {
  // @@protoc_insertion_point(field_get:AbnormalAddrCnt.count)
  return _internal_count();
}
inline void AbnormalAddrCnt::_internal_set_count(uint64_t value) {
  
  _impl_.count_ = value;
}
inline void AbnormalAddrCnt::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:AbnormalAddrCnt.count)
}

// -------------------------------------------------------------------

// SDKClaimBonusTx

// string address = 1;
inline void SDKClaimBonusTx::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SDKClaimBonusTx::address() const {
  // @@protoc_insertion_point(field_get:SDKClaimBonusTx.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKClaimBonusTx::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKClaimBonusTx.address)
}
inline std::string* SDKClaimBonusTx::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SDKClaimBonusTx.address)
  return _s;
}
inline const std::string& SDKClaimBonusTx::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SDKClaimBonusTx::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKClaimBonusTx::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKClaimBonusTx::release_address() {
  // @@protoc_insertion_point(field_release:SDKClaimBonusTx.address)
  return _impl_.address_.Release();
}
inline void SDKClaimBonusTx::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKClaimBonusTx.address)
}

// string utxo = 2;
inline void SDKClaimBonusTx::clear_utxo() {
  _impl_.utxo_.ClearToEmpty();
}
inline const std::string& SDKClaimBonusTx::utxo() const {
  // @@protoc_insertion_point(field_get:SDKClaimBonusTx.utxo)
  return _internal_utxo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKClaimBonusTx::set_utxo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.utxo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKClaimBonusTx.utxo)
}
inline std::string* SDKClaimBonusTx::mutable_utxo() {
  std::string* _s = _internal_mutable_utxo();
  // @@protoc_insertion_point(field_mutable:SDKClaimBonusTx.utxo)
  return _s;
}
inline const std::string& SDKClaimBonusTx::_internal_utxo() const {
  return _impl_.utxo_.Get();
}
inline void SDKClaimBonusTx::_internal_set_utxo(const std::string& value) {
  
  _impl_.utxo_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKClaimBonusTx::_internal_mutable_utxo() {
  
  return _impl_.utxo_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKClaimBonusTx::release_utxo() {
  // @@protoc_insertion_point(field_release:SDKClaimBonusTx.utxo)
  return _impl_.utxo_.Release();
}
inline void SDKClaimBonusTx::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  _impl_.utxo_.SetAllocated(utxo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.utxo_.IsDefault()) {
    _impl_.utxo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKClaimBonusTx.utxo)
}

// bytes tx = 3;
inline void SDKClaimBonusTx::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& SDKClaimBonusTx::tx() const {
  // @@protoc_insertion_point(field_get:SDKClaimBonusTx.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKClaimBonusTx::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKClaimBonusTx.tx)
}
inline std::string* SDKClaimBonusTx::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:SDKClaimBonusTx.tx)
  return _s;
}
inline const std::string& SDKClaimBonusTx::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void SDKClaimBonusTx::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKClaimBonusTx::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKClaimBonusTx::release_tx() {
  // @@protoc_insertion_point(field_release:SDKClaimBonusTx.tx)
  return _impl_.tx_.Release();
}
inline void SDKClaimBonusTx::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKClaimBonusTx.tx)
}

// -------------------------------------------------------------------

// SDKNodeInfo

// bytes pub = 1;
inline void SDKNodeInfo::clear_pub() {
  _impl_.pub_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::pub() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.pub)
  return _internal_pub();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_pub(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pub_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.pub)
}
inline std::string* SDKNodeInfo::mutable_pub() {
  std::string* _s = _internal_mutable_pub();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.pub)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_pub() const {
  return _impl_.pub_.Get();
}
inline void SDKNodeInfo::_internal_set_pub(const std::string& value) {
  
  _impl_.pub_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_pub() {
  
  return _impl_.pub_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_pub() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.pub)
  return _impl_.pub_.Release();
}
inline void SDKNodeInfo::set_allocated_pub(std::string* pub) {
  if (pub != nullptr) {
    
  } else {
    
  }
  _impl_.pub_.SetAllocated(pub, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pub_.IsDefault()) {
    _impl_.pub_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.pub)
}

// bytes sign = 2;
inline void SDKNodeInfo::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::sign() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.sign)
}
inline std::string* SDKNodeInfo::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.sign)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void SDKNodeInfo::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_sign() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.sign)
  return _impl_.sign_.Release();
}
inline void SDKNodeInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.sign)
}

// bytes identity = 3;
inline void SDKNodeInfo::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::identity() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.identity)
}
inline std::string* SDKNodeInfo::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.identity)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void SDKNodeInfo::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_identity() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.identity)
  return _impl_.identity_.Release();
}
inline void SDKNodeInfo::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.identity)
}

// string base58addr = 4;
inline void SDKNodeInfo::clear_base58addr() {
  _impl_.base58addr_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::base58addr() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.base58addr)
  return _internal_base58addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_base58addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base58addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.base58addr)
}
inline std::string* SDKNodeInfo::mutable_base58addr() {
  std::string* _s = _internal_mutable_base58addr();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.base58addr)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_base58addr() const {
  return _impl_.base58addr_.Get();
}
inline void SDKNodeInfo::_internal_set_base58addr(const std::string& value) {
  
  _impl_.base58addr_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_base58addr() {
  
  return _impl_.base58addr_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_base58addr() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.base58addr)
  return _impl_.base58addr_.Release();
}
inline void SDKNodeInfo::set_allocated_base58addr(std::string* base58addr) {
  if (base58addr != nullptr) {
    
  } else {
    
  }
  _impl_.base58addr_.SetAllocated(base58addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base58addr_.IsDefault()) {
    _impl_.base58addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.base58addr)
}

// string public_base58addr = 5;
inline void SDKNodeInfo::clear_public_base58addr() {
  _impl_.public_base58addr_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::public_base58addr() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.public_base58addr)
  return _internal_public_base58addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_public_base58addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_base58addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.public_base58addr)
}
inline std::string* SDKNodeInfo::mutable_public_base58addr() {
  std::string* _s = _internal_mutable_public_base58addr();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.public_base58addr)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_public_base58addr() const {
  return _impl_.public_base58addr_.Get();
}
inline void SDKNodeInfo::_internal_set_public_base58addr(const std::string& value) {
  
  _impl_.public_base58addr_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_public_base58addr() {
  
  return _impl_.public_base58addr_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_public_base58addr() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.public_base58addr)
  return _impl_.public_base58addr_.Release();
}
inline void SDKNodeInfo::set_allocated_public_base58addr(std::string* public_base58addr) {
  if (public_base58addr != nullptr) {
    
  } else {
    
  }
  _impl_.public_base58addr_.SetAllocated(public_base58addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_base58addr_.IsDefault()) {
    _impl_.public_base58addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.public_base58addr)
}

// string name = 6;
inline void SDKNodeInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.name)
}
inline std::string* SDKNodeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.name)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SDKNodeInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.name)
  return _impl_.name_.Release();
}
inline void SDKNodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.name)
}

// string logo = 7;
inline void SDKNodeInfo::clear_logo() {
  _impl_.logo_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::logo() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.logo)
  return _internal_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_logo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.logo)
}
inline std::string* SDKNodeInfo::mutable_logo() {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.logo)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_logo() const {
  return _impl_.logo_.Get();
}
inline void SDKNodeInfo::_internal_set_logo(const std::string& value) {
  
  _impl_.logo_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_logo() {
  
  return _impl_.logo_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_logo() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.logo)
  return _impl_.logo_.Release();
}
inline void SDKNodeInfo::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  _impl_.logo_.SetAllocated(logo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logo_.IsDefault()) {
    _impl_.logo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.logo)
}

// uint32 listen_ip = 8;
inline void SDKNodeInfo::clear_listen_ip() {
  _impl_.listen_ip_ = 0u;
}
inline uint32_t SDKNodeInfo::_internal_listen_ip() const {
  return _impl_.listen_ip_;
}
inline uint32_t SDKNodeInfo::listen_ip() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.listen_ip)
  return _internal_listen_ip();
}
inline void SDKNodeInfo::_internal_set_listen_ip(uint32_t value) {
  
  _impl_.listen_ip_ = value;
}
inline void SDKNodeInfo::set_listen_ip(uint32_t value) {
  _internal_set_listen_ip(value);
  // @@protoc_insertion_point(field_set:SDKNodeInfo.listen_ip)
}

// uint32 listen_port = 9;
inline void SDKNodeInfo::clear_listen_port() {
  _impl_.listen_port_ = 0u;
}
inline uint32_t SDKNodeInfo::_internal_listen_port() const {
  return _impl_.listen_port_;
}
inline uint32_t SDKNodeInfo::listen_port() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.listen_port)
  return _internal_listen_port();
}
inline void SDKNodeInfo::_internal_set_listen_port(uint32_t value) {
  
  _impl_.listen_port_ = value;
}
inline void SDKNodeInfo::set_listen_port(uint32_t value) {
  _internal_set_listen_port(value);
  // @@protoc_insertion_point(field_set:SDKNodeInfo.listen_port)
}

// uint32 public_ip = 10;
inline void SDKNodeInfo::clear_public_ip() {
  _impl_.public_ip_ = 0u;
}
inline uint32_t SDKNodeInfo::_internal_public_ip() const {
  return _impl_.public_ip_;
}
inline uint32_t SDKNodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.public_ip)
  return _internal_public_ip();
}
inline void SDKNodeInfo::_internal_set_public_ip(uint32_t value) {
  
  _impl_.public_ip_ = value;
}
inline void SDKNodeInfo::set_public_ip(uint32_t value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:SDKNodeInfo.public_ip)
}

// uint32 public_port = 11;
inline void SDKNodeInfo::clear_public_port() {
  _impl_.public_port_ = 0u;
}
inline uint32_t SDKNodeInfo::_internal_public_port() const {
  return _impl_.public_port_;
}
inline uint32_t SDKNodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.public_port)
  return _internal_public_port();
}
inline void SDKNodeInfo::_internal_set_public_port(uint32_t value) {
  
  _impl_.public_port_ = value;
}
inline void SDKNodeInfo::set_public_port(uint32_t value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:SDKNodeInfo.public_port)
}

// uint32 height = 12;
inline void SDKNodeInfo::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t SDKNodeInfo::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t SDKNodeInfo::height() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.height)
  return _internal_height();
}
inline void SDKNodeInfo::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void SDKNodeInfo::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SDKNodeInfo.height)
}

// uint64 time_stamp = 13;
inline void SDKNodeInfo::clear_time_stamp() {
  _impl_.time_stamp_ = uint64_t{0u};
}
inline uint64_t SDKNodeInfo::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline uint64_t SDKNodeInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.time_stamp)
  return _internal_time_stamp();
}
inline void SDKNodeInfo::_internal_set_time_stamp(uint64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void SDKNodeInfo::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:SDKNodeInfo.time_stamp)
}

// string version = 14;
inline void SDKNodeInfo::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SDKNodeInfo::version() const {
  // @@protoc_insertion_point(field_get:SDKNodeInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKNodeInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKNodeInfo.version)
}
inline std::string* SDKNodeInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:SDKNodeInfo.version)
  return _s;
}
inline const std::string& SDKNodeInfo::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SDKNodeInfo::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKNodeInfo::release_version() {
  // @@protoc_insertion_point(field_release:SDKNodeInfo.version)
  return _impl_.version_.Release();
}
inline void SDKNodeInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKNodeInfo.version)
}

// -------------------------------------------------------------------

// GetSDKAck

// string version = 1;
inline void GetSDKAck::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& GetSDKAck::version() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSDKAck::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetSDKAck.version)
}
inline std::string* GetSDKAck::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:GetSDKAck.version)
  return _s;
}
inline const std::string& GetSDKAck::_internal_version() const {
  return _impl_.version_.Get();
}
inline void GetSDKAck::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSDKAck::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSDKAck::release_version() {
  // @@protoc_insertion_point(field_release:GetSDKAck.version)
  return _impl_.version_.Release();
}
inline void GetSDKAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetSDKAck.version)
}

// int32 code = 2;
inline void GetSDKAck::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t GetSDKAck::_internal_code() const {
  return _impl_.code_;
}
inline int32_t GetSDKAck::code() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.code)
  return _internal_code();
}
inline void GetSDKAck::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void GetSDKAck::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.code)
}

// string message = 3;
inline void GetSDKAck::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetSDKAck::message() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSDKAck::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetSDKAck.message)
}
inline std::string* GetSDKAck::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:GetSDKAck.message)
  return _s;
}
inline const std::string& GetSDKAck::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetSDKAck::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSDKAck::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSDKAck::release_message() {
  // @@protoc_insertion_point(field_release:GetSDKAck.message)
  return _impl_.message_.Release();
}
inline void GetSDKAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetSDKAck.message)
}

// uint64 height = 4;
inline void GetSDKAck::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t GetSDKAck::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t GetSDKAck::height() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.height)
  return _internal_height();
}
inline void GetSDKAck::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void GetSDKAck::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.height)
}

// repeated .SDKUtxo utxos = 5;
inline int GetSDKAck::_internal_utxos_size() const {
  return _impl_.utxos_.size();
}
inline int GetSDKAck::utxos_size() const {
  return _internal_utxos_size();
}
inline void GetSDKAck::clear_utxos() {
  _impl_.utxos_.Clear();
}
inline ::SDKUtxo* GetSDKAck::mutable_utxos(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.utxos)
  return _impl_.utxos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKUtxo >*
GetSDKAck::mutable_utxos() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.utxos)
  return &_impl_.utxos_;
}
inline const ::SDKUtxo& GetSDKAck::_internal_utxos(int index) const {
  return _impl_.utxos_.Get(index);
}
inline const ::SDKUtxo& GetSDKAck::utxos(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.utxos)
  return _internal_utxos(index);
}
inline ::SDKUtxo* GetSDKAck::_internal_add_utxos() {
  return _impl_.utxos_.Add();
}
inline ::SDKUtxo* GetSDKAck::add_utxos() {
  ::SDKUtxo* _add = _internal_add_utxos();
  // @@protoc_insertion_point(field_add:GetSDKAck.utxos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKUtxo >&
GetSDKAck::utxos() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.utxos)
  return _impl_.utxos_;
}

// repeated bytes blocks = 6;
inline int GetSDKAck::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int GetSDKAck::blocks_size() const {
  return _internal_blocks_size();
}
inline void GetSDKAck::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline std::string* GetSDKAck::add_blocks() {
  std::string* _s = _internal_add_blocks();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.blocks)
  return _s;
}
inline const std::string& GetSDKAck::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const std::string& GetSDKAck::blocks(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.blocks)
  return _internal_blocks(index);
}
inline std::string* GetSDKAck::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline void GetSDKAck::set_blocks(int index, const std::string& value) {
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.blocks)
}
inline void GetSDKAck::set_blocks(int index, std::string&& value) {
  _impl_.blocks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.blocks)
}
inline void GetSDKAck::set_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.blocks)
}
inline void GetSDKAck::set_blocks(int index, const void* value, size_t size) {
  _impl_.blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.blocks)
}
inline std::string* GetSDKAck::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline void GetSDKAck::add_blocks(const std::string& value) {
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.blocks)
}
inline void GetSDKAck::add_blocks(std::string&& value) {
  _impl_.blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.blocks)
}
inline void GetSDKAck::add_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.blocks)
}
inline void GetSDKAck::add_blocks(const void* value, size_t size) {
  _impl_.blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::blocks() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.blocks)
  return _impl_.blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.blocks)
  return &_impl_.blocks_;
}

// repeated .SDKBonusamout bonusamount = 8;
inline int GetSDKAck::_internal_bonusamount_size() const {
  return _impl_.bonusamount_.size();
}
inline int GetSDKAck::bonusamount_size() const {
  return _internal_bonusamount_size();
}
inline void GetSDKAck::clear_bonusamount() {
  _impl_.bonusamount_.Clear();
}
inline ::SDKBonusamout* GetSDKAck::mutable_bonusamount(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.bonusamount)
  return _impl_.bonusamount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusamout >*
GetSDKAck::mutable_bonusamount() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.bonusamount)
  return &_impl_.bonusamount_;
}
inline const ::SDKBonusamout& GetSDKAck::_internal_bonusamount(int index) const {
  return _impl_.bonusamount_.Get(index);
}
inline const ::SDKBonusamout& GetSDKAck::bonusamount(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.bonusamount)
  return _internal_bonusamount(index);
}
inline ::SDKBonusamout* GetSDKAck::_internal_add_bonusamount() {
  return _impl_.bonusamount_.Add();
}
inline ::SDKBonusamout* GetSDKAck::add_bonusamount() {
  ::SDKBonusamout* _add = _internal_add_bonusamount();
  // @@protoc_insertion_point(field_add:GetSDKAck.bonusamount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusamout >&
GetSDKAck::bonusamount() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.bonusamount)
  return _impl_.bonusamount_;
}

// repeated .SDKPledgeTx pledgetx = 9;
inline int GetSDKAck::_internal_pledgetx_size() const {
  return _impl_.pledgetx_.size();
}
inline int GetSDKAck::pledgetx_size() const {
  return _internal_pledgetx_size();
}
inline void GetSDKAck::clear_pledgetx() {
  _impl_.pledgetx_.Clear();
}
inline ::SDKPledgeTx* GetSDKAck::mutable_pledgetx(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.pledgetx)
  return _impl_.pledgetx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKPledgeTx >*
GetSDKAck::mutable_pledgetx() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.pledgetx)
  return &_impl_.pledgetx_;
}
inline const ::SDKPledgeTx& GetSDKAck::_internal_pledgetx(int index) const {
  return _impl_.pledgetx_.Get(index);
}
inline const ::SDKPledgeTx& GetSDKAck::pledgetx(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.pledgetx)
  return _internal_pledgetx(index);
}
inline ::SDKPledgeTx* GetSDKAck::_internal_add_pledgetx() {
  return _impl_.pledgetx_.Add();
}
inline ::SDKPledgeTx* GetSDKAck::add_pledgetx() {
  ::SDKPledgeTx* _add = _internal_add_pledgetx();
  // @@protoc_insertion_point(field_add:GetSDKAck.pledgetx)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKPledgeTx >&
GetSDKAck::pledgetx() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.pledgetx)
  return _impl_.pledgetx_;
}

// repeated string pledgeaddr = 10;
inline int GetSDKAck::_internal_pledgeaddr_size() const {
  return _impl_.pledgeaddr_.size();
}
inline int GetSDKAck::pledgeaddr_size() const {
  return _internal_pledgeaddr_size();
}
inline void GetSDKAck::clear_pledgeaddr() {
  _impl_.pledgeaddr_.Clear();
}
inline std::string* GetSDKAck::add_pledgeaddr() {
  std::string* _s = _internal_add_pledgeaddr();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.pledgeaddr)
  return _s;
}
inline const std::string& GetSDKAck::_internal_pledgeaddr(int index) const {
  return _impl_.pledgeaddr_.Get(index);
}
inline const std::string& GetSDKAck::pledgeaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.pledgeaddr)
  return _internal_pledgeaddr(index);
}
inline std::string* GetSDKAck::mutable_pledgeaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.pledgeaddr)
  return _impl_.pledgeaddr_.Mutable(index);
}
inline void GetSDKAck::set_pledgeaddr(int index, const std::string& value) {
  _impl_.pledgeaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.pledgeaddr)
}
inline void GetSDKAck::set_pledgeaddr(int index, std::string&& value) {
  _impl_.pledgeaddr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.pledgeaddr)
}
inline void GetSDKAck::set_pledgeaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pledgeaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.pledgeaddr)
}
inline void GetSDKAck::set_pledgeaddr(int index, const char* value, size_t size) {
  _impl_.pledgeaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.pledgeaddr)
}
inline std::string* GetSDKAck::_internal_add_pledgeaddr() {
  return _impl_.pledgeaddr_.Add();
}
inline void GetSDKAck::add_pledgeaddr(const std::string& value) {
  _impl_.pledgeaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.pledgeaddr)
}
inline void GetSDKAck::add_pledgeaddr(std::string&& value) {
  _impl_.pledgeaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.pledgeaddr)
}
inline void GetSDKAck::add_pledgeaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pledgeaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.pledgeaddr)
}
inline void GetSDKAck::add_pledgeaddr(const char* value, size_t size) {
  _impl_.pledgeaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.pledgeaddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::pledgeaddr() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.pledgeaddr)
  return _impl_.pledgeaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_pledgeaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.pledgeaddr)
  return &_impl_.pledgeaddr_;
}

// repeated string pledgeutxo = 11;
inline int GetSDKAck::_internal_pledgeutxo_size() const {
  return _impl_.pledgeutxo_.size();
}
inline int GetSDKAck::pledgeutxo_size() const {
  return _internal_pledgeutxo_size();
}
inline void GetSDKAck::clear_pledgeutxo() {
  _impl_.pledgeutxo_.Clear();
}
inline std::string* GetSDKAck::add_pledgeutxo() {
  std::string* _s = _internal_add_pledgeutxo();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.pledgeutxo)
  return _s;
}
inline const std::string& GetSDKAck::_internal_pledgeutxo(int index) const {
  return _impl_.pledgeutxo_.Get(index);
}
inline const std::string& GetSDKAck::pledgeutxo(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.pledgeutxo)
  return _internal_pledgeutxo(index);
}
inline std::string* GetSDKAck::mutable_pledgeutxo(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.pledgeutxo)
  return _impl_.pledgeutxo_.Mutable(index);
}
inline void GetSDKAck::set_pledgeutxo(int index, const std::string& value) {
  _impl_.pledgeutxo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.pledgeutxo)
}
inline void GetSDKAck::set_pledgeutxo(int index, std::string&& value) {
  _impl_.pledgeutxo_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.pledgeutxo)
}
inline void GetSDKAck::set_pledgeutxo(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pledgeutxo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.pledgeutxo)
}
inline void GetSDKAck::set_pledgeutxo(int index, const char* value, size_t size) {
  _impl_.pledgeutxo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.pledgeutxo)
}
inline std::string* GetSDKAck::_internal_add_pledgeutxo() {
  return _impl_.pledgeutxo_.Add();
}
inline void GetSDKAck::add_pledgeutxo(const std::string& value) {
  _impl_.pledgeutxo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.pledgeutxo)
}
inline void GetSDKAck::add_pledgeutxo(std::string&& value) {
  _impl_.pledgeutxo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.pledgeutxo)
}
inline void GetSDKAck::add_pledgeutxo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pledgeutxo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.pledgeutxo)
}
inline void GetSDKAck::add_pledgeutxo(const char* value, size_t size) {
  _impl_.pledgeutxo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.pledgeutxo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::pledgeutxo() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.pledgeutxo)
  return _impl_.pledgeutxo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_pledgeutxo() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.pledgeutxo)
  return &_impl_.pledgeutxo_;
}

// repeated string BonusAddr = 12;
inline int GetSDKAck::_internal_bonusaddr_size() const {
  return _impl_.bonusaddr_.size();
}
inline int GetSDKAck::bonusaddr_size() const {
  return _internal_bonusaddr_size();
}
inline void GetSDKAck::clear_bonusaddr() {
  _impl_.bonusaddr_.Clear();
}
inline std::string* GetSDKAck::add_bonusaddr() {
  std::string* _s = _internal_add_bonusaddr();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.BonusAddr)
  return _s;
}
inline const std::string& GetSDKAck::_internal_bonusaddr(int index) const {
  return _impl_.bonusaddr_.Get(index);
}
inline const std::string& GetSDKAck::bonusaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.BonusAddr)
  return _internal_bonusaddr(index);
}
inline std::string* GetSDKAck::mutable_bonusaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.BonusAddr)
  return _impl_.bonusaddr_.Mutable(index);
}
inline void GetSDKAck::set_bonusaddr(int index, const std::string& value) {
  _impl_.bonusaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.BonusAddr)
}
inline void GetSDKAck::set_bonusaddr(int index, std::string&& value) {
  _impl_.bonusaddr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.BonusAddr)
}
inline void GetSDKAck::set_bonusaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bonusaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.BonusAddr)
}
inline void GetSDKAck::set_bonusaddr(int index, const char* value, size_t size) {
  _impl_.bonusaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.BonusAddr)
}
inline std::string* GetSDKAck::_internal_add_bonusaddr() {
  return _impl_.bonusaddr_.Add();
}
inline void GetSDKAck::add_bonusaddr(const std::string& value) {
  _impl_.bonusaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.BonusAddr)
}
inline void GetSDKAck::add_bonusaddr(std::string&& value) {
  _impl_.bonusaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.BonusAddr)
}
inline void GetSDKAck::add_bonusaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bonusaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.BonusAddr)
}
inline void GetSDKAck::add_bonusaddr(const char* value, size_t size) {
  _impl_.bonusaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.BonusAddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::bonusaddr() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.BonusAddr)
  return _impl_.bonusaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_bonusaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.BonusAddr)
  return &_impl_.bonusaddr_;
}

// repeated string InvestedAddr = 13;
inline int GetSDKAck::_internal_investedaddr_size() const {
  return _impl_.investedaddr_.size();
}
inline int GetSDKAck::investedaddr_size() const {
  return _internal_investedaddr_size();
}
inline void GetSDKAck::clear_investedaddr() {
  _impl_.investedaddr_.Clear();
}
inline std::string* GetSDKAck::add_investedaddr() {
  std::string* _s = _internal_add_investedaddr();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.InvestedAddr)
  return _s;
}
inline const std::string& GetSDKAck::_internal_investedaddr(int index) const {
  return _impl_.investedaddr_.Get(index);
}
inline const std::string& GetSDKAck::investedaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.InvestedAddr)
  return _internal_investedaddr(index);
}
inline std::string* GetSDKAck::mutable_investedaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.InvestedAddr)
  return _impl_.investedaddr_.Mutable(index);
}
inline void GetSDKAck::set_investedaddr(int index, const std::string& value) {
  _impl_.investedaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.InvestedAddr)
}
inline void GetSDKAck::set_investedaddr(int index, std::string&& value) {
  _impl_.investedaddr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.InvestedAddr)
}
inline void GetSDKAck::set_investedaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.investedaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.InvestedAddr)
}
inline void GetSDKAck::set_investedaddr(int index, const char* value, size_t size) {
  _impl_.investedaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.InvestedAddr)
}
inline std::string* GetSDKAck::_internal_add_investedaddr() {
  return _impl_.investedaddr_.Add();
}
inline void GetSDKAck::add_investedaddr(const std::string& value) {
  _impl_.investedaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.InvestedAddr)
}
inline void GetSDKAck::add_investedaddr(std::string&& value) {
  _impl_.investedaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.InvestedAddr)
}
inline void GetSDKAck::add_investedaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.investedaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.InvestedAddr)
}
inline void GetSDKAck::add_investedaddr(const char* value, size_t size) {
  _impl_.investedaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.InvestedAddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::investedaddr() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.InvestedAddr)
  return _impl_.investedaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_investedaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.InvestedAddr)
  return &_impl_.investedaddr_;
}

// repeated .SDKBonusTx BonusTx = 14;
inline int GetSDKAck::_internal_bonustx_size() const {
  return _impl_.bonustx_.size();
}
inline int GetSDKAck::bonustx_size() const {
  return _internal_bonustx_size();
}
inline void GetSDKAck::clear_bonustx() {
  _impl_.bonustx_.Clear();
}
inline ::SDKBonusTx* GetSDKAck::mutable_bonustx(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.BonusTx)
  return _impl_.bonustx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusTx >*
GetSDKAck::mutable_bonustx() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.BonusTx)
  return &_impl_.bonustx_;
}
inline const ::SDKBonusTx& GetSDKAck::_internal_bonustx(int index) const {
  return _impl_.bonustx_.Get(index);
}
inline const ::SDKBonusTx& GetSDKAck::bonustx(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.BonusTx)
  return _internal_bonustx(index);
}
inline ::SDKBonusTx* GetSDKAck::_internal_add_bonustx() {
  return _impl_.bonustx_.Add();
}
inline ::SDKBonusTx* GetSDKAck::add_bonustx() {
  ::SDKBonusTx* _add = _internal_add_bonustx();
  // @@protoc_insertion_point(field_add:GetSDKAck.BonusTx)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKBonusTx >&
GetSDKAck::bonustx() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.BonusTx)
  return _impl_.bonustx_;
}

// repeated string BonusAddrInvestUtxos = 15;
inline int GetSDKAck::_internal_bonusaddrinvestutxos_size() const {
  return _impl_.bonusaddrinvestutxos_.size();
}
inline int GetSDKAck::bonusaddrinvestutxos_size() const {
  return _internal_bonusaddrinvestutxos_size();
}
inline void GetSDKAck::clear_bonusaddrinvestutxos() {
  _impl_.bonusaddrinvestutxos_.Clear();
}
inline std::string* GetSDKAck::add_bonusaddrinvestutxos() {
  std::string* _s = _internal_add_bonusaddrinvestutxos();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.BonusAddrInvestUtxos)
  return _s;
}
inline const std::string& GetSDKAck::_internal_bonusaddrinvestutxos(int index) const {
  return _impl_.bonusaddrinvestutxos_.Get(index);
}
inline const std::string& GetSDKAck::bonusaddrinvestutxos(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.BonusAddrInvestUtxos)
  return _internal_bonusaddrinvestutxos(index);
}
inline std::string* GetSDKAck::mutable_bonusaddrinvestutxos(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.BonusAddrInvestUtxos)
  return _impl_.bonusaddrinvestutxos_.Mutable(index);
}
inline void GetSDKAck::set_bonusaddrinvestutxos(int index, const std::string& value) {
  _impl_.bonusaddrinvestutxos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.BonusAddrInvestUtxos)
}
inline void GetSDKAck::set_bonusaddrinvestutxos(int index, std::string&& value) {
  _impl_.bonusaddrinvestutxos_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.BonusAddrInvestUtxos)
}
inline void GetSDKAck::set_bonusaddrinvestutxos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bonusaddrinvestutxos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.BonusAddrInvestUtxos)
}
inline void GetSDKAck::set_bonusaddrinvestutxos(int index, const char* value, size_t size) {
  _impl_.bonusaddrinvestutxos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.BonusAddrInvestUtxos)
}
inline std::string* GetSDKAck::_internal_add_bonusaddrinvestutxos() {
  return _impl_.bonusaddrinvestutxos_.Add();
}
inline void GetSDKAck::add_bonusaddrinvestutxos(const std::string& value) {
  _impl_.bonusaddrinvestutxos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.BonusAddrInvestUtxos)
}
inline void GetSDKAck::add_bonusaddrinvestutxos(std::string&& value) {
  _impl_.bonusaddrinvestutxos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.BonusAddrInvestUtxos)
}
inline void GetSDKAck::add_bonusaddrinvestutxos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bonusaddrinvestutxos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.BonusAddrInvestUtxos)
}
inline void GetSDKAck::add_bonusaddrinvestutxos(const char* value, size_t size) {
  _impl_.bonusaddrinvestutxos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.BonusAddrInvestUtxos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::bonusaddrinvestutxos() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.BonusAddrInvestUtxos)
  return _impl_.bonusaddrinvestutxos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_bonusaddrinvestutxos() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.BonusAddrInvestUtxos)
  return &_impl_.bonusaddrinvestutxos_;
}

// repeated .Claimtx claimtx = 16;
inline int GetSDKAck::_internal_claimtx_size() const {
  return _impl_.claimtx_.size();
}
inline int GetSDKAck::claimtx_size() const {
  return _internal_claimtx_size();
}
inline void GetSDKAck::clear_claimtx() {
  _impl_.claimtx_.Clear();
}
inline ::Claimtx* GetSDKAck::mutable_claimtx(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.claimtx)
  return _impl_.claimtx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Claimtx >*
GetSDKAck::mutable_claimtx() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.claimtx)
  return &_impl_.claimtx_;
}
inline const ::Claimtx& GetSDKAck::_internal_claimtx(int index) const {
  return _impl_.claimtx_.Get(index);
}
inline const ::Claimtx& GetSDKAck::claimtx(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.claimtx)
  return _internal_claimtx(index);
}
inline ::Claimtx* GetSDKAck::_internal_add_claimtx() {
  return _impl_.claimtx_.Add();
}
inline ::Claimtx* GetSDKAck::add_claimtx() {
  ::Claimtx* _add = _internal_add_claimtx();
  // @@protoc_insertion_point(field_add:GetSDKAck.claimtx)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Claimtx >&
GetSDKAck::claimtx() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.claimtx)
  return _impl_.claimtx_;
}

// repeated .AbnormalAddrCnt abnormaladdr_cnt = 17;
inline int GetSDKAck::_internal_abnormaladdr_cnt_size() const {
  return _impl_.abnormaladdr_cnt_.size();
}
inline int GetSDKAck::abnormaladdr_cnt_size() const {
  return _internal_abnormaladdr_cnt_size();
}
inline void GetSDKAck::clear_abnormaladdr_cnt() {
  _impl_.abnormaladdr_cnt_.Clear();
}
inline ::AbnormalAddrCnt* GetSDKAck::mutable_abnormaladdr_cnt(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.abnormaladdr_cnt)
  return _impl_.abnormaladdr_cnt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AbnormalAddrCnt >*
GetSDKAck::mutable_abnormaladdr_cnt() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.abnormaladdr_cnt)
  return &_impl_.abnormaladdr_cnt_;
}
inline const ::AbnormalAddrCnt& GetSDKAck::_internal_abnormaladdr_cnt(int index) const {
  return _impl_.abnormaladdr_cnt_.Get(index);
}
inline const ::AbnormalAddrCnt& GetSDKAck::abnormaladdr_cnt(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.abnormaladdr_cnt)
  return _internal_abnormaladdr_cnt(index);
}
inline ::AbnormalAddrCnt* GetSDKAck::_internal_add_abnormaladdr_cnt() {
  return _impl_.abnormaladdr_cnt_.Add();
}
inline ::AbnormalAddrCnt* GetSDKAck::add_abnormaladdr_cnt() {
  ::AbnormalAddrCnt* _add = _internal_add_abnormaladdr_cnt();
  // @@protoc_insertion_point(field_add:GetSDKAck.abnormaladdr_cnt)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AbnormalAddrCnt >&
GetSDKAck::abnormaladdr_cnt() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.abnormaladdr_cnt)
  return _impl_.abnormaladdr_cnt_;
}

// uint64 M2 = 18;
inline void GetSDKAck::clear_m2() {
  _impl_.m2_ = uint64_t{0u};
}
inline uint64_t GetSDKAck::_internal_m2() const {
  return _impl_.m2_;
}
inline uint64_t GetSDKAck::m2() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.M2)
  return _internal_m2();
}
inline void GetSDKAck::_internal_set_m2(uint64_t value) {
  
  _impl_.m2_ = value;
}
inline void GetSDKAck::set_m2(uint64_t value) {
  _internal_set_m2(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.M2)
}

// uint64 Totalinvest = 19;
inline void GetSDKAck::clear_totalinvest() {
  _impl_.totalinvest_ = uint64_t{0u};
}
inline uint64_t GetSDKAck::_internal_totalinvest() const {
  return _impl_.totalinvest_;
}
inline uint64_t GetSDKAck::totalinvest() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.Totalinvest)
  return _internal_totalinvest();
}
inline void GetSDKAck::_internal_set_totalinvest(uint64_t value) {
  
  _impl_.totalinvest_ = value;
}
inline void GetSDKAck::set_totalinvest(uint64_t value) {
  _internal_set_totalinvest(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.Totalinvest)
}

// uint64 TotalAwardAmount = 20;
inline void GetSDKAck::clear_totalawardamount() {
  _impl_.totalawardamount_ = uint64_t{0u};
}
inline uint64_t GetSDKAck::_internal_totalawardamount() const {
  return _impl_.totalawardamount_;
}
inline uint64_t GetSDKAck::totalawardamount() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.TotalAwardAmount)
  return _internal_totalawardamount();
}
inline void GetSDKAck::_internal_set_totalawardamount(uint64_t value) {
  
  _impl_.totalawardamount_ = value;
}
inline void GetSDKAck::set_totalawardamount(uint64_t value) {
  _internal_set_totalawardamount(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.TotalAwardAmount)
}

// repeated .SDKNodeInfo nodeinfo = 22;
inline int GetSDKAck::_internal_nodeinfo_size() const {
  return _impl_.nodeinfo_.size();
}
inline int GetSDKAck::nodeinfo_size() const {
  return _internal_nodeinfo_size();
}
inline void GetSDKAck::clear_nodeinfo() {
  _impl_.nodeinfo_.Clear();
}
inline ::SDKNodeInfo* GetSDKAck::mutable_nodeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.nodeinfo)
  return _impl_.nodeinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKNodeInfo >*
GetSDKAck::mutable_nodeinfo() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.nodeinfo)
  return &_impl_.nodeinfo_;
}
inline const ::SDKNodeInfo& GetSDKAck::_internal_nodeinfo(int index) const {
  return _impl_.nodeinfo_.Get(index);
}
inline const ::SDKNodeInfo& GetSDKAck::nodeinfo(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.nodeinfo)
  return _internal_nodeinfo(index);
}
inline ::SDKNodeInfo* GetSDKAck::_internal_add_nodeinfo() {
  return _impl_.nodeinfo_.Add();
}
inline ::SDKNodeInfo* GetSDKAck::add_nodeinfo() {
  ::SDKNodeInfo* _add = _internal_add_nodeinfo();
  // @@protoc_insertion_point(field_add:GetSDKAck.nodeinfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKNodeInfo >&
GetSDKAck::nodeinfo() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.nodeinfo)
  return _impl_.nodeinfo_;
}

// uint64 type = 23;
inline void GetSDKAck::clear_type() {
  _impl_.type_ = uint64_t{0u};
}
inline uint64_t GetSDKAck::_internal_type() const {
  return _impl_.type_;
}
inline uint64_t GetSDKAck::type() const {
  // @@protoc_insertion_point(field_get:GetSDKAck.type)
  return _internal_type();
}
inline void GetSDKAck::_internal_set_type(uint64_t value) {
  
  _impl_.type_ = value;
}
inline void GetSDKAck::set_type(uint64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.type)
}

// repeated .SDKClaimBonusTx ClaimBonusTx = 24;
inline int GetSDKAck::_internal_claimbonustx_size() const {
  return _impl_.claimbonustx_.size();
}
inline int GetSDKAck::claimbonustx_size() const {
  return _internal_claimbonustx_size();
}
inline void GetSDKAck::clear_claimbonustx() {
  _impl_.claimbonustx_.Clear();
}
inline ::SDKClaimBonusTx* GetSDKAck::mutable_claimbonustx(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.ClaimBonusTx)
  return _impl_.claimbonustx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKClaimBonusTx >*
GetSDKAck::mutable_claimbonustx() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.ClaimBonusTx)
  return &_impl_.claimbonustx_;
}
inline const ::SDKClaimBonusTx& GetSDKAck::_internal_claimbonustx(int index) const {
  return _impl_.claimbonustx_.Get(index);
}
inline const ::SDKClaimBonusTx& GetSDKAck::claimbonustx(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.ClaimBonusTx)
  return _internal_claimbonustx(index);
}
inline ::SDKClaimBonusTx* GetSDKAck::_internal_add_claimbonustx() {
  return _impl_.claimbonustx_.Add();
}
inline ::SDKClaimBonusTx* GetSDKAck::add_claimbonustx() {
  ::SDKClaimBonusTx* _add = _internal_add_claimbonustx();
  // @@protoc_insertion_point(field_add:GetSDKAck.ClaimBonusTx)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SDKClaimBonusTx >&
GetSDKAck::claimbonustx() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.ClaimBonusTx)
  return _impl_.claimbonustx_;
}

// repeated string ClaimInvestedAddr = 26;
inline int GetSDKAck::_internal_claiminvestedaddr_size() const {
  return _impl_.claiminvestedaddr_.size();
}
inline int GetSDKAck::claiminvestedaddr_size() const {
  return _internal_claiminvestedaddr_size();
}
inline void GetSDKAck::clear_claiminvestedaddr() {
  _impl_.claiminvestedaddr_.Clear();
}
inline std::string* GetSDKAck::add_claiminvestedaddr() {
  std::string* _s = _internal_add_claiminvestedaddr();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.ClaimInvestedAddr)
  return _s;
}
inline const std::string& GetSDKAck::_internal_claiminvestedaddr(int index) const {
  return _impl_.claiminvestedaddr_.Get(index);
}
inline const std::string& GetSDKAck::claiminvestedaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.ClaimInvestedAddr)
  return _internal_claiminvestedaddr(index);
}
inline std::string* GetSDKAck::mutable_claiminvestedaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.ClaimInvestedAddr)
  return _impl_.claiminvestedaddr_.Mutable(index);
}
inline void GetSDKAck::set_claiminvestedaddr(int index, const std::string& value) {
  _impl_.claiminvestedaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.ClaimInvestedAddr)
}
inline void GetSDKAck::set_claiminvestedaddr(int index, std::string&& value) {
  _impl_.claiminvestedaddr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.ClaimInvestedAddr)
}
inline void GetSDKAck::set_claiminvestedaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.claiminvestedaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.ClaimInvestedAddr)
}
inline void GetSDKAck::set_claiminvestedaddr(int index, const char* value, size_t size) {
  _impl_.claiminvestedaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.ClaimInvestedAddr)
}
inline std::string* GetSDKAck::_internal_add_claiminvestedaddr() {
  return _impl_.claiminvestedaddr_.Add();
}
inline void GetSDKAck::add_claiminvestedaddr(const std::string& value) {
  _impl_.claiminvestedaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.ClaimInvestedAddr)
}
inline void GetSDKAck::add_claiminvestedaddr(std::string&& value) {
  _impl_.claiminvestedaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.ClaimInvestedAddr)
}
inline void GetSDKAck::add_claiminvestedaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.claiminvestedaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.ClaimInvestedAddr)
}
inline void GetSDKAck::add_claiminvestedaddr(const char* value, size_t size) {
  _impl_.claiminvestedaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.ClaimInvestedAddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::claiminvestedaddr() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.ClaimInvestedAddr)
  return _impl_.claiminvestedaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_claiminvestedaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.ClaimInvestedAddr)
  return &_impl_.claiminvestedaddr_;
}

// repeated string ClaimBonusAddrInvestUtxos = 27;
inline int GetSDKAck::_internal_claimbonusaddrinvestutxos_size() const {
  return _impl_.claimbonusaddrinvestutxos_.size();
}
inline int GetSDKAck::claimbonusaddrinvestutxos_size() const {
  return _internal_claimbonusaddrinvestutxos_size();
}
inline void GetSDKAck::clear_claimbonusaddrinvestutxos() {
  _impl_.claimbonusaddrinvestutxos_.Clear();
}
inline std::string* GetSDKAck::add_claimbonusaddrinvestutxos() {
  std::string* _s = _internal_add_claimbonusaddrinvestutxos();
  // @@protoc_insertion_point(field_add_mutable:GetSDKAck.ClaimBonusAddrInvestUtxos)
  return _s;
}
inline const std::string& GetSDKAck::_internal_claimbonusaddrinvestutxos(int index) const {
  return _impl_.claimbonusaddrinvestutxos_.Get(index);
}
inline const std::string& GetSDKAck::claimbonusaddrinvestutxos(int index) const {
  // @@protoc_insertion_point(field_get:GetSDKAck.ClaimBonusAddrInvestUtxos)
  return _internal_claimbonusaddrinvestutxos(index);
}
inline std::string* GetSDKAck::mutable_claimbonusaddrinvestutxos(int index) {
  // @@protoc_insertion_point(field_mutable:GetSDKAck.ClaimBonusAddrInvestUtxos)
  return _impl_.claimbonusaddrinvestutxos_.Mutable(index);
}
inline void GetSDKAck::set_claimbonusaddrinvestutxos(int index, const std::string& value) {
  _impl_.claimbonusaddrinvestutxos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline void GetSDKAck::set_claimbonusaddrinvestutxos(int index, std::string&& value) {
  _impl_.claimbonusaddrinvestutxos_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline void GetSDKAck::set_claimbonusaddrinvestutxos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.claimbonusaddrinvestutxos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline void GetSDKAck::set_claimbonusaddrinvestutxos(int index, const char* value, size_t size) {
  _impl_.claimbonusaddrinvestutxos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline std::string* GetSDKAck::_internal_add_claimbonusaddrinvestutxos() {
  return _impl_.claimbonusaddrinvestutxos_.Add();
}
inline void GetSDKAck::add_claimbonusaddrinvestutxos(const std::string& value) {
  _impl_.claimbonusaddrinvestutxos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline void GetSDKAck::add_claimbonusaddrinvestutxos(std::string&& value) {
  _impl_.claimbonusaddrinvestutxos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline void GetSDKAck::add_claimbonusaddrinvestutxos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.claimbonusaddrinvestutxos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline void GetSDKAck::add_claimbonusaddrinvestutxos(const char* value, size_t size) {
  _impl_.claimbonusaddrinvestutxos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetSDKAck.ClaimBonusAddrInvestUtxos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSDKAck::claimbonusaddrinvestutxos() const {
  // @@protoc_insertion_point(field_list:GetSDKAck.ClaimBonusAddrInvestUtxos)
  return _impl_.claimbonusaddrinvestutxos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSDKAck::mutable_claimbonusaddrinvestutxos() {
  // @@protoc_insertion_point(field_mutable_list:GetSDKAck.ClaimBonusAddrInvestUtxos)
  return &_impl_.claimbonusaddrinvestutxos_;
}

// -------------------------------------------------------------------

// SDKContractDeployReq

// string version = 1;
inline void SDKContractDeployReq::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SDKContractDeployReq::version() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployReq.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployReq::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployReq.version)
}
inline std::string* SDKContractDeployReq::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployReq.version)
  return _s;
}
inline const std::string& SDKContractDeployReq::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SDKContractDeployReq::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::release_version() {
  // @@protoc_insertion_point(field_release:SDKContractDeployReq.version)
  return _impl_.version_.Release();
}
inline void SDKContractDeployReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployReq.version)
}

// string address = 2;
inline void SDKContractDeployReq::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SDKContractDeployReq::address() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployReq.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployReq::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployReq.address)
}
inline std::string* SDKContractDeployReq::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployReq.address)
  return _s;
}
inline const std::string& SDKContractDeployReq::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SDKContractDeployReq::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::release_address() {
  // @@protoc_insertion_point(field_release:SDKContractDeployReq.address)
  return _impl_.address_.Release();
}
inline void SDKContractDeployReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployReq.address)
}

// string deploy_amount = 3;
inline void SDKContractDeployReq::clear_deploy_amount() {
  _impl_.deploy_amount_.ClearToEmpty();
}
inline const std::string& SDKContractDeployReq::deploy_amount() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployReq.deploy_amount)
  return _internal_deploy_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployReq::set_deploy_amount(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deploy_amount_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployReq.deploy_amount)
}
inline std::string* SDKContractDeployReq::mutable_deploy_amount() {
  std::string* _s = _internal_mutable_deploy_amount();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployReq.deploy_amount)
  return _s;
}
inline const std::string& SDKContractDeployReq::_internal_deploy_amount() const {
  return _impl_.deploy_amount_.Get();
}
inline void SDKContractDeployReq::_internal_set_deploy_amount(const std::string& value) {
  
  _impl_.deploy_amount_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::_internal_mutable_deploy_amount() {
  
  return _impl_.deploy_amount_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::release_deploy_amount() {
  // @@protoc_insertion_point(field_release:SDKContractDeployReq.deploy_amount)
  return _impl_.deploy_amount_.Release();
}
inline void SDKContractDeployReq::set_allocated_deploy_amount(std::string* deploy_amount) {
  if (deploy_amount != nullptr) {
    
  } else {
    
  }
  _impl_.deploy_amount_.SetAllocated(deploy_amount, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deploy_amount_.IsDefault()) {
    _impl_.deploy_amount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployReq.deploy_amount)
}

// int32 nContractType = 4;
inline void SDKContractDeployReq::clear_ncontracttype() {
  _impl_.ncontracttype_ = 0;
}
inline int32_t SDKContractDeployReq::_internal_ncontracttype() const {
  return _impl_.ncontracttype_;
}
inline int32_t SDKContractDeployReq::ncontracttype() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployReq.nContractType)
  return _internal_ncontracttype();
}
inline void SDKContractDeployReq::_internal_set_ncontracttype(int32_t value) {
  
  _impl_.ncontracttype_ = value;
}
inline void SDKContractDeployReq::set_ncontracttype(int32_t value) {
  _internal_set_ncontracttype(value);
  // @@protoc_insertion_point(field_set:SDKContractDeployReq.nContractType)
}

// string pubStr = 5;
inline void SDKContractDeployReq::clear_pubstr() {
  _impl_.pubstr_.ClearToEmpty();
}
inline const std::string& SDKContractDeployReq::pubstr() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployReq.pubStr)
  return _internal_pubstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployReq::set_pubstr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pubstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployReq.pubStr)
}
inline std::string* SDKContractDeployReq::mutable_pubstr() {
  std::string* _s = _internal_mutable_pubstr();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployReq.pubStr)
  return _s;
}
inline const std::string& SDKContractDeployReq::_internal_pubstr() const {
  return _impl_.pubstr_.Get();
}
inline void SDKContractDeployReq::_internal_set_pubstr(const std::string& value) {
  
  _impl_.pubstr_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::_internal_mutable_pubstr() {
  
  return _impl_.pubstr_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployReq::release_pubstr() {
  // @@protoc_insertion_point(field_release:SDKContractDeployReq.pubStr)
  return _impl_.pubstr_.Release();
}
inline void SDKContractDeployReq::set_allocated_pubstr(std::string* pubstr) {
  if (pubstr != nullptr) {
    
  } else {
    
  }
  _impl_.pubstr_.SetAllocated(pubstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pubstr_.IsDefault()) {
    _impl_.pubstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployReq.pubStr)
}

// -------------------------------------------------------------------

// SDKContractDeployAck

// string version = 1;
inline void SDKContractDeployAck::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SDKContractDeployAck::version() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployAck::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployAck.version)
}
inline std::string* SDKContractDeployAck::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployAck.version)
  return _s;
}
inline const std::string& SDKContractDeployAck::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SDKContractDeployAck::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployAck::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployAck::release_version() {
  // @@protoc_insertion_point(field_release:SDKContractDeployAck.version)
  return _impl_.version_.Release();
}
inline void SDKContractDeployAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployAck.version)
}

// int32 code = 2;
inline void SDKContractDeployAck::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SDKContractDeployAck::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SDKContractDeployAck::code() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.code)
  return _internal_code();
}
inline void SDKContractDeployAck::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SDKContractDeployAck::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SDKContractDeployAck.code)
}

// string message = 3;
inline void SDKContractDeployAck::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SDKContractDeployAck::message() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployAck::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployAck.message)
}
inline std::string* SDKContractDeployAck::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployAck.message)
  return _s;
}
inline const std::string& SDKContractDeployAck::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SDKContractDeployAck::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployAck::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployAck::release_message() {
  // @@protoc_insertion_point(field_release:SDKContractDeployAck.message)
  return _impl_.message_.Release();
}
inline void SDKContractDeployAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployAck.message)
}

// bytes tx = 4;
inline void SDKContractDeployAck::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& SDKContractDeployAck::tx() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractDeployAck::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractDeployAck.tx)
}
inline std::string* SDKContractDeployAck::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployAck.tx)
  return _s;
}
inline const std::string& SDKContractDeployAck::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void SDKContractDeployAck::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractDeployAck::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractDeployAck::release_tx() {
  // @@protoc_insertion_point(field_release:SDKContractDeployAck.tx)
  return _impl_.tx_.Release();
}
inline void SDKContractDeployAck::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployAck.tx)
}

// uint64 top = 5;
inline void SDKContractDeployAck::clear_top() {
  _impl_.top_ = uint64_t{0u};
}
inline uint64_t SDKContractDeployAck::_internal_top() const {
  return _impl_.top_;
}
inline uint64_t SDKContractDeployAck::top() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.top)
  return _internal_top();
}
inline void SDKContractDeployAck::_internal_set_top(uint64_t value) {
  
  _impl_.top_ = value;
}
inline void SDKContractDeployAck::set_top(uint64_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:SDKContractDeployAck.top)
}

// .vrfAgentType isNeedAgent_flag = 8;
inline void SDKContractDeployAck::clear_isneedagent_flag() {
  _impl_.isneedagent_flag_ = 0;
}
inline ::vrfAgentType SDKContractDeployAck::_internal_isneedagent_flag() const {
  return static_cast< ::vrfAgentType >(_impl_.isneedagent_flag_);
}
inline ::vrfAgentType SDKContractDeployAck::isneedagent_flag() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.isNeedAgent_flag)
  return _internal_isneedagent_flag();
}
inline void SDKContractDeployAck::_internal_set_isneedagent_flag(::vrfAgentType value) {
  
  _impl_.isneedagent_flag_ = value;
}
inline void SDKContractDeployAck::set_isneedagent_flag(::vrfAgentType value) {
  _internal_set_isneedagent_flag(value);
  // @@protoc_insertion_point(field_set:SDKContractDeployAck.isNeedAgent_flag)
}

// .Vrf vrfInfo = 9;
inline bool SDKContractDeployAck::_internal_has_vrfinfo() const {
  return this != internal_default_instance() && _impl_.vrfinfo_ != nullptr;
}
inline bool SDKContractDeployAck::has_vrfinfo() const {
  return _internal_has_vrfinfo();
}
inline const ::Vrf& SDKContractDeployAck::_internal_vrfinfo() const {
  const ::Vrf* p = _impl_.vrfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vrf&>(
      ::_Vrf_default_instance_);
}
inline const ::Vrf& SDKContractDeployAck::vrfinfo() const {
  // @@protoc_insertion_point(field_get:SDKContractDeployAck.vrfInfo)
  return _internal_vrfinfo();
}
inline void SDKContractDeployAck::unsafe_arena_set_allocated_vrfinfo(
    ::Vrf* vrfinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfinfo_);
  }
  _impl_.vrfinfo_ = vrfinfo;
  if (vrfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SDKContractDeployAck.vrfInfo)
}
inline ::Vrf* SDKContractDeployAck::release_vrfinfo() {
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vrf* SDKContractDeployAck::unsafe_arena_release_vrfinfo() {
  // @@protoc_insertion_point(field_release:SDKContractDeployAck.vrfInfo)
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
  return temp;
}
inline ::Vrf* SDKContractDeployAck::_internal_mutable_vrfinfo() {
  
  if (_impl_.vrfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vrf>(GetArenaForAllocation());
    _impl_.vrfinfo_ = p;
  }
  return _impl_.vrfinfo_;
}
inline ::Vrf* SDKContractDeployAck::mutable_vrfinfo() {
  ::Vrf* _msg = _internal_mutable_vrfinfo();
  // @@protoc_insertion_point(field_mutable:SDKContractDeployAck.vrfInfo)
  return _msg;
}
inline void SDKContractDeployAck::set_allocated_vrfinfo(::Vrf* vrfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfinfo_);
  }
  if (vrfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrfinfo));
    if (message_arena != submessage_arena) {
      vrfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfinfo_ = vrfinfo;
  // @@protoc_insertion_point(field_set_allocated:SDKContractDeployAck.vrfInfo)
}

// -------------------------------------------------------------------

// SDKContractCallReq

// string version = 1;
inline void SDKContractCallReq::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SDKContractCallReq::version() const {
  // @@protoc_insertion_point(field_get:SDKContractCallReq.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallReq::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallReq.version)
}
inline std::string* SDKContractCallReq::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:SDKContractCallReq.version)
  return _s;
}
inline const std::string& SDKContractCallReq::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SDKContractCallReq::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::release_version() {
  // @@protoc_insertion_point(field_release:SDKContractCallReq.version)
  return _impl_.version_.Release();
}
inline void SDKContractCallReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallReq.version)
}

// string fromaddr = 2;
inline void SDKContractCallReq::clear_fromaddr() {
  _impl_.fromaddr_.ClearToEmpty();
}
inline const std::string& SDKContractCallReq::fromaddr() const {
  // @@protoc_insertion_point(field_get:SDKContractCallReq.fromaddr)
  return _internal_fromaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallReq::set_fromaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fromaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallReq.fromaddr)
}
inline std::string* SDKContractCallReq::mutable_fromaddr() {
  std::string* _s = _internal_mutable_fromaddr();
  // @@protoc_insertion_point(field_mutable:SDKContractCallReq.fromaddr)
  return _s;
}
inline const std::string& SDKContractCallReq::_internal_fromaddr() const {
  return _impl_.fromaddr_.Get();
}
inline void SDKContractCallReq::_internal_set_fromaddr(const std::string& value) {
  
  _impl_.fromaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::_internal_mutable_fromaddr() {
  
  return _impl_.fromaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::release_fromaddr() {
  // @@protoc_insertion_point(field_release:SDKContractCallReq.fromaddr)
  return _impl_.fromaddr_.Release();
}
inline void SDKContractCallReq::set_allocated_fromaddr(std::string* fromaddr) {
  if (fromaddr != nullptr) {
    
  } else {
    
  }
  _impl_.fromaddr_.SetAllocated(fromaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fromaddr_.IsDefault()) {
    _impl_.fromaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallReq.fromaddr)
}

// string toaddr = 3;
inline void SDKContractCallReq::clear_toaddr() {
  _impl_.toaddr_.ClearToEmpty();
}
inline const std::string& SDKContractCallReq::toaddr() const {
  // @@protoc_insertion_point(field_get:SDKContractCallReq.toaddr)
  return _internal_toaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallReq::set_toaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.toaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallReq.toaddr)
}
inline std::string* SDKContractCallReq::mutable_toaddr() {
  std::string* _s = _internal_mutable_toaddr();
  // @@protoc_insertion_point(field_mutable:SDKContractCallReq.toaddr)
  return _s;
}
inline const std::string& SDKContractCallReq::_internal_toaddr() const {
  return _impl_.toaddr_.Get();
}
inline void SDKContractCallReq::_internal_set_toaddr(const std::string& value) {
  
  _impl_.toaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::_internal_mutable_toaddr() {
  
  return _impl_.toaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::release_toaddr() {
  // @@protoc_insertion_point(field_release:SDKContractCallReq.toaddr)
  return _impl_.toaddr_.Release();
}
inline void SDKContractCallReq::set_allocated_toaddr(std::string* toaddr) {
  if (toaddr != nullptr) {
    
  } else {
    
  }
  _impl_.toaddr_.SetAllocated(toaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.toaddr_.IsDefault()) {
    _impl_.toaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallReq.toaddr)
}

// string deploy_strTxHash = 4;
inline void SDKContractCallReq::clear_deploy_strtxhash() {
  _impl_.deploy_strtxhash_.ClearToEmpty();
}
inline const std::string& SDKContractCallReq::deploy_strtxhash() const {
  // @@protoc_insertion_point(field_get:SDKContractCallReq.deploy_strTxHash)
  return _internal_deploy_strtxhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallReq::set_deploy_strtxhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deploy_strtxhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallReq.deploy_strTxHash)
}
inline std::string* SDKContractCallReq::mutable_deploy_strtxhash() {
  std::string* _s = _internal_mutable_deploy_strtxhash();
  // @@protoc_insertion_point(field_mutable:SDKContractCallReq.deploy_strTxHash)
  return _s;
}
inline const std::string& SDKContractCallReq::_internal_deploy_strtxhash() const {
  return _impl_.deploy_strtxhash_.Get();
}
inline void SDKContractCallReq::_internal_set_deploy_strtxhash(const std::string& value) {
  
  _impl_.deploy_strtxhash_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::_internal_mutable_deploy_strtxhash() {
  
  return _impl_.deploy_strtxhash_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallReq::release_deploy_strtxhash() {
  // @@protoc_insertion_point(field_release:SDKContractCallReq.deploy_strTxHash)
  return _impl_.deploy_strtxhash_.Release();
}
inline void SDKContractCallReq::set_allocated_deploy_strtxhash(std::string* deploy_strtxhash) {
  if (deploy_strtxhash != nullptr) {
    
  } else {
    
  }
  _impl_.deploy_strtxhash_.SetAllocated(deploy_strtxhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deploy_strtxhash_.IsDefault()) {
    _impl_.deploy_strtxhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallReq.deploy_strTxHash)
}

// -------------------------------------------------------------------

// SDKContractCallAck

// string version = 1;
inline void SDKContractCallAck::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SDKContractCallAck::version() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallAck::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallAck.version)
}
inline std::string* SDKContractCallAck::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:SDKContractCallAck.version)
  return _s;
}
inline const std::string& SDKContractCallAck::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SDKContractCallAck::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallAck::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallAck::release_version() {
  // @@protoc_insertion_point(field_release:SDKContractCallAck.version)
  return _impl_.version_.Release();
}
inline void SDKContractCallAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallAck.version)
}

// int32 code = 2;
inline void SDKContractCallAck::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SDKContractCallAck::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SDKContractCallAck::code() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.code)
  return _internal_code();
}
inline void SDKContractCallAck::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SDKContractCallAck::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SDKContractCallAck.code)
}

// string message = 3;
inline void SDKContractCallAck::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SDKContractCallAck::message() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallAck::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallAck.message)
}
inline std::string* SDKContractCallAck::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:SDKContractCallAck.message)
  return _s;
}
inline const std::string& SDKContractCallAck::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SDKContractCallAck::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallAck::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallAck::release_message() {
  // @@protoc_insertion_point(field_release:SDKContractCallAck.message)
  return _impl_.message_.Release();
}
inline void SDKContractCallAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallAck.message)
}

// bytes tx = 4;
inline void SDKContractCallAck::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& SDKContractCallAck::tx() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SDKContractCallAck::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SDKContractCallAck.tx)
}
inline std::string* SDKContractCallAck::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:SDKContractCallAck.tx)
  return _s;
}
inline const std::string& SDKContractCallAck::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void SDKContractCallAck::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKContractCallAck::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* SDKContractCallAck::release_tx() {
  // @@protoc_insertion_point(field_release:SDKContractCallAck.tx)
  return _impl_.tx_.Release();
}
inline void SDKContractCallAck::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallAck.tx)
}

// uint64 top = 5;
inline void SDKContractCallAck::clear_top() {
  _impl_.top_ = uint64_t{0u};
}
inline uint64_t SDKContractCallAck::_internal_top() const {
  return _impl_.top_;
}
inline uint64_t SDKContractCallAck::top() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.top)
  return _internal_top();
}
inline void SDKContractCallAck::_internal_set_top(uint64_t value) {
  
  _impl_.top_ = value;
}
inline void SDKContractCallAck::set_top(uint64_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:SDKContractCallAck.top)
}

// .vrfAgentType isNeedAgent_flag = 8;
inline void SDKContractCallAck::clear_isneedagent_flag() {
  _impl_.isneedagent_flag_ = 0;
}
inline ::vrfAgentType SDKContractCallAck::_internal_isneedagent_flag() const {
  return static_cast< ::vrfAgentType >(_impl_.isneedagent_flag_);
}
inline ::vrfAgentType SDKContractCallAck::isneedagent_flag() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.isNeedAgent_flag)
  return _internal_isneedagent_flag();
}
inline void SDKContractCallAck::_internal_set_isneedagent_flag(::vrfAgentType value) {
  
  _impl_.isneedagent_flag_ = value;
}
inline void SDKContractCallAck::set_isneedagent_flag(::vrfAgentType value) {
  _internal_set_isneedagent_flag(value);
  // @@protoc_insertion_point(field_set:SDKContractCallAck.isNeedAgent_flag)
}

// .Vrf vrfInfo = 9;
inline bool SDKContractCallAck::_internal_has_vrfinfo() const {
  return this != internal_default_instance() && _impl_.vrfinfo_ != nullptr;
}
inline bool SDKContractCallAck::has_vrfinfo() const {
  return _internal_has_vrfinfo();
}
inline const ::Vrf& SDKContractCallAck::_internal_vrfinfo() const {
  const ::Vrf* p = _impl_.vrfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vrf&>(
      ::_Vrf_default_instance_);
}
inline const ::Vrf& SDKContractCallAck::vrfinfo() const {
  // @@protoc_insertion_point(field_get:SDKContractCallAck.vrfInfo)
  return _internal_vrfinfo();
}
inline void SDKContractCallAck::unsafe_arena_set_allocated_vrfinfo(
    ::Vrf* vrfinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfinfo_);
  }
  _impl_.vrfinfo_ = vrfinfo;
  if (vrfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SDKContractCallAck.vrfInfo)
}
inline ::Vrf* SDKContractCallAck::release_vrfinfo() {
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vrf* SDKContractCallAck::unsafe_arena_release_vrfinfo() {
  // @@protoc_insertion_point(field_release:SDKContractCallAck.vrfInfo)
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
  return temp;
}
inline ::Vrf* SDKContractCallAck::_internal_mutable_vrfinfo() {
  
  if (_impl_.vrfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vrf>(GetArenaForAllocation());
    _impl_.vrfinfo_ = p;
  }
  return _impl_.vrfinfo_;
}
inline ::Vrf* SDKContractCallAck::mutable_vrfinfo() {
  ::Vrf* _msg = _internal_mutable_vrfinfo();
  // @@protoc_insertion_point(field_mutable:SDKContractCallAck.vrfInfo)
  return _msg;
}
inline void SDKContractCallAck::set_allocated_vrfinfo(::Vrf* vrfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfinfo_);
  }
  if (vrfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrfinfo));
    if (message_arena != submessage_arena) {
      vrfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfinfo_ = vrfinfo;
  // @@protoc_insertion_point(field_set_allocated:SDKContractCallAck.vrfInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vrfAgentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vrfAgentType>() {
  return ::vrfAgentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto
