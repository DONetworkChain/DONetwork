// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_protomsg.proto

#include "ca_protomsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SignNodeMsg::SignNodeMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignNodeMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignNodeMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignNodeMsgDefaultTypeInternal() {}
  union {
    SignNodeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignNodeMsgDefaultTypeInternal _SignNodeMsg_default_instance_;
PROTOBUF_CONSTEXPR TxMsgInfo::TxMsgInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contractstoragelist_)*/{}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeheight_)*/uint64_t{0u}
  , /*decltype(_impl_.txutxoheight_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgInfoDefaultTypeInternal() {}
  union {
    TxMsgInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgInfoDefaultTypeInternal _TxMsgInfo_default_instance_;
PROTOBUF_CONSTEXPR TxMsgReq::TxMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signnodemsg_)*/{}
  , /*decltype(_impl_.prevblkhashs_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txmsginfo_)*/nullptr
  , /*decltype(_impl_.vrfinfo_)*/nullptr
  , /*decltype(_impl_.txvrfinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgReqDefaultTypeInternal() {}
  union {
    TxMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgReqDefaultTypeInternal _TxMsgReq_default_instance_;
PROTOBUF_CONSTEXPR VrfData::VrfData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vrflist_)*/{}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txvrfinfohash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_)*/uint64_t{0u}
  , /*decltype(_impl_.percentage_)*/uint64_t{0u}
  , /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VrfDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VrfDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VrfDataDefaultTypeInternal() {}
  union {
    VrfData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VrfDataDefaultTypeInternal _VrfData_default_instance_;
PROTOBUF_CONSTEXPR Vrf::Vrf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vrfdata_)*/nullptr
  , /*decltype(_impl_.vrfsign_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VrfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VrfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VrfDefaultTypeInternal() {}
  union {
    Vrf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VrfDefaultTypeInternal _Vrf_default_instance_;
PROTOBUF_CONSTEXPR TxMsgAck::TxMsgAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgAckDefaultTypeInternal() {}
  union {
    TxMsgAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgAckDefaultTypeInternal _TxMsgAck_default_instance_;
PROTOBUF_CONSTEXPR BuildBlockBroadcastMsg::BuildBlockBroadcastMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.castaddrs_)*/{}
  , /*decltype(_impl_.vrfinfo_)*/{}
  , /*decltype(_impl_.txvrfinfo_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockraw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockvrfinfo_)*/nullptr
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuildBlockBroadcastMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildBlockBroadcastMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildBlockBroadcastMsgDefaultTypeInternal() {}
  union {
    BuildBlockBroadcastMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildBlockBroadcastMsgDefaultTypeInternal _BuildBlockBroadcastMsg_default_instance_;
PROTOBUF_CONSTEXPR ContractTxMsgReq::ContractTxMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contractdependentaddress_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txmsgreq_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractTxMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractTxMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractTxMsgReqDefaultTypeInternal() {}
  union {
    ContractTxMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractTxMsgReqDefaultTypeInternal _ContractTxMsgReq_default_instance_;
PROTOBUF_CONSTEXPR VrfDataSource::VrfDataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vrfnodelist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VrfDataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VrfDataSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VrfDataSourceDefaultTypeInternal() {}
  union {
    VrfDataSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VrfDataSourceDefaultTypeInternal _VrfDataSource_default_instance_;
PROTOBUF_CONSTEXPR ContractPackagerMsg::ContractPackagerMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txmsgreq_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/nullptr
  , /*decltype(_impl_.vrfinfo_)*/nullptr
  , /*decltype(_impl_.vrfdatasource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractPackagerMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractPackagerMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractPackagerMsgDefaultTypeInternal() {}
  union {
    ContractPackagerMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractPackagerMsgDefaultTypeInternal _ContractPackagerMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_ca_5fprotomsg_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ca_5fprotomsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ca_5fprotomsg_2eproto = nullptr;

const uint32_t TableStruct_ca_5fprotomsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _impl_.pub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.nodeheight_),
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.txutxoheight_),
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.contractstoragelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.txmsginfo_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.vrfinfo_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.txvrfinfo_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.signnodemsg_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.prevblkhashs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VrfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.percentage_),
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.targetaddr_),
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.vrflist_),
  PROTOBUF_FIELD_OFFSET(::VrfData, _impl_.txvrfinfohash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vrf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vrf, _impl_.vrfdata_),
  PROTOBUF_FIELD_OFFSET(::Vrf, _impl_.vrfsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.blockraw_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.blockvrfinfo_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.castaddrs_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.vrfinfo_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.txvrfinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ContractTxMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContractTxMsgReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ContractTxMsgReq, _impl_.txmsgreq_),
  PROTOBUF_FIELD_OFFSET(::ContractTxMsgReq, _impl_.contractdependentaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VrfDataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VrfDataSource, _impl_.vrfnodelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ContractPackagerMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContractPackagerMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ContractPackagerMsg, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::ContractPackagerMsg, _impl_.txmsgreq_),
  PROTOBUF_FIELD_OFFSET(::ContractPackagerMsg, _impl_.vrfinfo_),
  PROTOBUF_FIELD_OFFSET(::ContractPackagerMsg, _impl_.vrfdatasource_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SignNodeMsg)},
  { 9, -1, -1, sizeof(::TxMsgInfo)},
  { 20, -1, -1, sizeof(::TxMsgReq)},
  { 32, -1, -1, sizeof(::VrfData)},
  { 45, -1, -1, sizeof(::Vrf)},
  { 53, -1, -1, sizeof(::TxMsgAck)},
  { 63, -1, -1, sizeof(::BuildBlockBroadcastMsg)},
  { 78, -1, -1, sizeof(::ContractTxMsgReq)},
  { 87, -1, -1, sizeof(::VrfDataSource)},
  { 94, -1, -1, sizeof(::ContractPackagerMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SignNodeMsg_default_instance_._instance,
  &::_TxMsgInfo_default_instance_._instance,
  &::_TxMsgReq_default_instance_._instance,
  &::_VrfData_default_instance_._instance,
  &::_Vrf_default_instance_._instance,
  &::_TxMsgAck_default_instance_._instance,
  &::_BuildBlockBroadcastMsg_default_instance_._instance,
  &::_ContractTxMsgReq_default_instance_._instance,
  &::_VrfDataSource_default_instance_._instance,
  &::_ContractPackagerMsg_default_instance_._instance,
};

const char descriptor_table_protodef_ca_5fprotomsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ca_protomsg.proto\032\nsign.proto\"4\n\013SignN"
  "odeMsg\022\n\n\002id\030\001 \001(\t\022\014\n\004sign\030\002 \001(\014\022\013\n\003pub\030"
  "\003 \001(\014\"l\n\tTxMsgInfo\022\014\n\004type\030\001 \001(\r\022\n\n\002tx\030\002"
  " \001(\014\022\022\n\nnodeHeight\030\003 \001(\004\022\024\n\014txUtxoHeight"
  "\030\004 \001(\004\022\033\n\023contractStorageList\030\005 \003(\t\"\243\001\n\010"
  "TxMsgReq\022\017\n\007version\030\001 \001(\t\022\035\n\ttxMsgInfo\030\002"
  " \001(\0132\n.TxMsgInfo\022\025\n\007vrfInfo\030\003 \001(\0132\004.Vrf\022"
  "\027\n\ttxvrfInfo\030\004 \001(\0132\004.Vrf\022!\n\013signNodeMsg\030"
  "\005 \003(\0132\014.SignNodeMsg\022\024\n\014prevBlkHashs\030\006 \003("
  "\t\"\206\001\n\007VrfData\022\014\n\004hash\030\001 \001(\t\022\r\n\005range\030\002 \001"
  "(\004\022\022\n\npercentage\030\003 \001(\004\022\016\n\006height\030\004 \001(\004\022\022"
  "\n\ntargetAddr\030\005 \001(\t\022\017\n\007vrfList\030\006 \003(\t\022\025\n\rt"
  "xvrfinfohash\030\007 \001(\t\"9\n\003Vrf\022\031\n\007vrfdata\030\001 \001"
  "(\0132\010.VrfData\022\027\n\007Vrfsign\030\002 \001(\0132\006.CSign\"F\n"
  "\010TxMsgAck\022\017\n\007version\030\001 \001(\t\022\014\n\004code\030\002 \001(\005"
  "\022\017\n\007message\030\003 \001(\t\022\n\n\002tx\030\004 \001(\014\"\302\001\n\026BuildB"
  "lockBroadcastMsg\022\017\n\007version\030\001 \001(\t\022\n\n\002id\030"
  "\002 \001(\t\022\020\n\010blockRaw\030\003 \001(\014\022\032\n\014blockVrfInfo\030"
  "\004 \001(\0132\004.Vrf\022\014\n\004flag\030\005 \001(\005\022\014\n\004type\030\006 \001(\005\022"
  "\021\n\tcastAddrs\030\007 \003(\t\022\025\n\007vrfInfo\030\010 \003(\0132\004.Vr"
  "f\022\027\n\ttxvrfInfo\030\t \003(\0132\004.Vrf\"b\n\020ContractTx"
  "MsgReq\022\017\n\007version\030\001 \001(\t\022\033\n\010txMsgReq\030\002 \001("
  "\0132\t.TxMsgReq\022 \n\030contractDependentAddress"
  "\030\003 \003(\t\"$\n\rVrfDataSource\022\023\n\013vrfNodelist\030\001"
  " \003(\t\"\227\001\n\023ContractPackagerMsg\022\017\n\007version\030"
  "\001 \001(\t\022\024\n\004sign\030\002 \001(\0132\006.CSign\022\033\n\010txMsgReq\030"
  "\003 \003(\0132\t.TxMsgReq\022\025\n\007vrfInfo\030\004 \001(\0132\004.Vrf\022"
  "%\n\rvrfDataSource\030\005 \001(\0132\016.VrfDataSourceb\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ca_5fprotomsg_2eproto_deps[1] = {
  &::descriptor_table_sign_2eproto,
};
static ::_pbi::once_flag descriptor_table_ca_5fprotomsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ca_5fprotomsg_2eproto = {
    false, false, 1126, descriptor_table_protodef_ca_5fprotomsg_2eproto,
    "ca_protomsg.proto",
    &descriptor_table_ca_5fprotomsg_2eproto_once, descriptor_table_ca_5fprotomsg_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_ca_5fprotomsg_2eproto::offsets,
    file_level_metadata_ca_5fprotomsg_2eproto, file_level_enum_descriptors_ca_5fprotomsg_2eproto,
    file_level_service_descriptors_ca_5fprotomsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ca_5fprotomsg_2eproto_getter() {
  return &descriptor_table_ca_5fprotomsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ca_5fprotomsg_2eproto(&descriptor_table_ca_5fprotomsg_2eproto);

// ===================================================================

class SignNodeMsg::_Internal {
 public:
};

SignNodeMsg::SignNodeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SignNodeMsg)
}
SignNodeMsg::SignNodeMsg(const SignNodeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignNodeMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.pub_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub().empty()) {
    _this->_impl_.pub_.Set(from._internal_pub(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SignNodeMsg)
}

inline void SignNodeMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.pub_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignNodeMsg::~SignNodeMsg() {
  // @@protoc_insertion_point(destructor:SignNodeMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignNodeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.pub_.Destroy();
}

void SignNodeMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignNodeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SignNodeMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _impl_.pub_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignNodeMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SignNodeMsg.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignNodeMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignNodeMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SignNodeMsg.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sign(), target);
  }

  // bytes pub = 3;
  if (!this->_internal_pub().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pub(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignNodeMsg)
  return target;
}

size_t SignNodeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignNodeMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes pub = 3;
  if (!this->_internal_pub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignNodeMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignNodeMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignNodeMsg::GetClassData() const { return &_class_data_; }


void SignNodeMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignNodeMsg*>(&to_msg);
  auto& from = static_cast<const SignNodeMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SignNodeMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_pub().empty()) {
    _this->_internal_set_pub(from._internal_pub());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignNodeMsg::CopyFrom(const SignNodeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignNodeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignNodeMsg::IsInitialized() const {
  return true;
}

void SignNodeMsg::InternalSwap(SignNodeMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pub_, lhs_arena,
      &other->_impl_.pub_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignNodeMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[0]);
}

// ===================================================================

class TxMsgInfo::_Internal {
 public:
};

TxMsgInfo::TxMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxMsgInfo)
}
TxMsgInfo::TxMsgInfo(const TxMsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contractstoragelist_){from._impl_.contractstoragelist_}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.nodeheight_){}
    , decltype(_impl_.txutxoheight_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nodeheight_, &from._impl_.nodeheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.nodeheight_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:TxMsgInfo)
}

inline void TxMsgInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contractstoragelist_){arena}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.nodeheight_){uint64_t{0u}}
    , decltype(_impl_.txutxoheight_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMsgInfo::~TxMsgInfo() {
  // @@protoc_insertion_point(destructor:TxMsgInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contractstoragelist_.~RepeatedPtrField();
  _impl_.tx_.Destroy();
}

void TxMsgInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsgInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contractstoragelist_.Clear();
  _impl_.tx_.ClearToEmpty();
  ::memset(&_impl_.nodeheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.nodeheight_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nodeHeight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.nodeheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 txUtxoHeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.txutxoheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string contractStorageList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contractstoragelist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "TxMsgInfo.contractStorageList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMsgInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsgInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes tx = 2;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx(), target);
  }

  // uint64 nodeHeight = 3;
  if (this->_internal_nodeheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nodeheight(), target);
  }

  // uint64 txUtxoHeight = 4;
  if (this->_internal_txutxoheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_txutxoheight(), target);
  }

  // repeated string contractStorageList = 5;
  for (int i = 0, n = this->_internal_contractstoragelist_size(); i < n; i++) {
    const auto& s = this->_internal_contractstoragelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgInfo.contractStorageList");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsgInfo)
  return target;
}

size_t TxMsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsgInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string contractStorageList = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.contractstoragelist_.size());
  for (int i = 0, n = _impl_.contractstoragelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.contractstoragelist_.Get(i));
  }

  // bytes tx = 2;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // uint64 nodeHeight = 3;
  if (this->_internal_nodeheight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nodeheight());
  }

  // uint64 txUtxoHeight = 4;
  if (this->_internal_txutxoheight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txutxoheight());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgInfo::GetClassData() const { return &_class_data_; }


void TxMsgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgInfo*>(&to_msg);
  auto& from = static_cast<const TxMsgInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxMsgInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contractstoragelist_.MergeFrom(from._impl_.contractstoragelist_);
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_nodeheight() != 0) {
    _this->_internal_set_nodeheight(from._internal_nodeheight());
  }
  if (from._internal_txutxoheight() != 0) {
    _this->_internal_set_txutxoheight(from._internal_txutxoheight());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgInfo::CopyFrom(const TxMsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgInfo::IsInitialized() const {
  return true;
}

void TxMsgInfo::InternalSwap(TxMsgInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contractstoragelist_.InternalSwap(&other->_impl_.contractstoragelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxMsgInfo, _impl_.type_)
      + sizeof(TxMsgInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TxMsgInfo, _impl_.nodeheight_)>(
          reinterpret_cast<char*>(&_impl_.nodeheight_),
          reinterpret_cast<char*>(&other->_impl_.nodeheight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[1]);
}

// ===================================================================

class TxMsgReq::_Internal {
 public:
  static const ::TxMsgInfo& txmsginfo(const TxMsgReq* msg);
  static const ::Vrf& vrfinfo(const TxMsgReq* msg);
  static const ::Vrf& txvrfinfo(const TxMsgReq* msg);
};

const ::TxMsgInfo&
TxMsgReq::_Internal::txmsginfo(const TxMsgReq* msg) {
  return *msg->_impl_.txmsginfo_;
}
const ::Vrf&
TxMsgReq::_Internal::vrfinfo(const TxMsgReq* msg) {
  return *msg->_impl_.vrfinfo_;
}
const ::Vrf&
TxMsgReq::_Internal::txvrfinfo(const TxMsgReq* msg) {
  return *msg->_impl_.txvrfinfo_;
}
TxMsgReq::TxMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxMsgReq)
}
TxMsgReq::TxMsgReq(const TxMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signnodemsg_){from._impl_.signnodemsg_}
    , decltype(_impl_.prevblkhashs_){from._impl_.prevblkhashs_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.txmsginfo_){nullptr}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.txvrfinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_txmsginfo()) {
    _this->_impl_.txmsginfo_ = new ::TxMsgInfo(*from._impl_.txmsginfo_);
  }
  if (from._internal_has_vrfinfo()) {
    _this->_impl_.vrfinfo_ = new ::Vrf(*from._impl_.vrfinfo_);
  }
  if (from._internal_has_txvrfinfo()) {
    _this->_impl_.txvrfinfo_ = new ::Vrf(*from._impl_.txvrfinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:TxMsgReq)
}

inline void TxMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signnodemsg_){arena}
    , decltype(_impl_.prevblkhashs_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.txmsginfo_){nullptr}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.txvrfinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMsgReq::~TxMsgReq() {
  // @@protoc_insertion_point(destructor:TxMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signnodemsg_.~RepeatedPtrField();
  _impl_.prevblkhashs_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.txmsginfo_;
  if (this != internal_default_instance()) delete _impl_.vrfinfo_;
  if (this != internal_default_instance()) delete _impl_.txvrfinfo_;
}

void TxMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signnodemsg_.Clear();
  _impl_.prevblkhashs_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.txmsginfo_ != nullptr) {
    delete _impl_.txmsginfo_;
  }
  _impl_.txmsginfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.txvrfinfo_ != nullptr) {
    delete _impl_.txvrfinfo_;
  }
  _impl_.txvrfinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxMsgReq.version"));
        } else
          goto handle_unusual;
        continue;
      // .TxMsgInfo txMsgInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_txmsginfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vrf vrfInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vrf txvrfInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_txvrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SignNodeMsg signNodeMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signnodemsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string prevBlkHashs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prevblkhashs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "TxMsgReq.prevBlkHashs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .TxMsgInfo txMsgInfo = 2;
  if (this->_internal_has_txmsginfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::txmsginfo(this),
        _Internal::txmsginfo(this).GetCachedSize(), target, stream);
  }

  // .Vrf vrfInfo = 3;
  if (this->_internal_has_vrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vrfinfo(this),
        _Internal::vrfinfo(this).GetCachedSize(), target, stream);
  }

  // .Vrf txvrfInfo = 4;
  if (this->_internal_has_txvrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::txvrfinfo(this),
        _Internal::txvrfinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .SignNodeMsg signNodeMsg = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signnodemsg_size()); i < n; i++) {
    const auto& repfield = this->_internal_signnodemsg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string prevBlkHashs = 6;
  for (int i = 0, n = this->_internal_prevblkhashs_size(); i < n; i++) {
    const auto& s = this->_internal_prevblkhashs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgReq.prevBlkHashs");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsgReq)
  return target;
}

size_t TxMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SignNodeMsg signNodeMsg = 5;
  total_size += 1UL * this->_internal_signnodemsg_size();
  for (const auto& msg : this->_impl_.signnodemsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string prevBlkHashs = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.prevblkhashs_.size());
  for (int i = 0, n = _impl_.prevblkhashs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.prevblkhashs_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .TxMsgInfo txMsgInfo = 2;
  if (this->_internal_has_txmsginfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txmsginfo_);
  }

  // .Vrf vrfInfo = 3;
  if (this->_internal_has_vrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfinfo_);
  }

  // .Vrf txvrfInfo = 4;
  if (this->_internal_has_txvrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txvrfinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgReq::GetClassData() const { return &_class_data_; }


void TxMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgReq*>(&to_msg);
  auto& from = static_cast<const TxMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signnodemsg_.MergeFrom(from._impl_.signnodemsg_);
  _this->_impl_.prevblkhashs_.MergeFrom(from._impl_.prevblkhashs_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_txmsginfo()) {
    _this->_internal_mutable_txmsginfo()->::TxMsgInfo::MergeFrom(
        from._internal_txmsginfo());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_internal_mutable_vrfinfo()->::Vrf::MergeFrom(
        from._internal_vrfinfo());
  }
  if (from._internal_has_txvrfinfo()) {
    _this->_internal_mutable_txvrfinfo()->::Vrf::MergeFrom(
        from._internal_txvrfinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgReq::CopyFrom(const TxMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgReq::IsInitialized() const {
  return true;
}

void TxMsgReq::InternalSwap(TxMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signnodemsg_.InternalSwap(&other->_impl_.signnodemsg_);
  _impl_.prevblkhashs_.InternalSwap(&other->_impl_.prevblkhashs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxMsgReq, _impl_.txvrfinfo_)
      + sizeof(TxMsgReq::_impl_.txvrfinfo_)
      - PROTOBUF_FIELD_OFFSET(TxMsgReq, _impl_.txmsginfo_)>(
          reinterpret_cast<char*>(&_impl_.txmsginfo_),
          reinterpret_cast<char*>(&other->_impl_.txmsginfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[2]);
}

// ===================================================================

class VrfData::_Internal {
 public:
};

VrfData::VrfData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VrfData)
}
VrfData::VrfData(const VrfData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VrfData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vrflist_){from._impl_.vrflist_}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.targetaddr_){}
    , decltype(_impl_.txvrfinfohash_){}
    , decltype(_impl_.range_){}
    , decltype(_impl_.percentage_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetaddr().empty()) {
    _this->_impl_.targetaddr_.Set(from._internal_targetaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.txvrfinfohash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txvrfinfohash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_txvrfinfohash().empty()) {
    _this->_impl_.txvrfinfohash_.Set(from._internal_txvrfinfohash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.range_, &from._impl_.range_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.range_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:VrfData)
}

inline void VrfData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vrflist_){arena}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.targetaddr_){}
    , decltype(_impl_.txvrfinfohash_){}
    , decltype(_impl_.range_){uint64_t{0u}}
    , decltype(_impl_.percentage_){uint64_t{0u}}
    , decltype(_impl_.height_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.txvrfinfohash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txvrfinfohash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VrfData::~VrfData() {
  // @@protoc_insertion_point(destructor:VrfData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VrfData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vrflist_.~RepeatedPtrField();
  _impl_.hash_.Destroy();
  _impl_.targetaddr_.Destroy();
  _impl_.txvrfinfohash_.Destroy();
}

void VrfData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VrfData::Clear() {
// @@protoc_insertion_point(message_clear_start:VrfData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vrflist_.Clear();
  _impl_.hash_.ClearToEmpty();
  _impl_.targetaddr_.ClearToEmpty();
  _impl_.txvrfinfohash_.ClearToEmpty();
  ::memset(&_impl_.range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.range_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VrfData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "VrfData.hash"));
        } else
          goto handle_unusual;
        continue;
      // uint64 range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string targetAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_targetaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "VrfData.targetAddr"));
        } else
          goto handle_unusual;
        continue;
      // repeated string vrfList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vrflist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "VrfData.vrfList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string txvrfinfohash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_txvrfinfohash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "VrfData.txvrfinfohash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VrfData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VrfData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VrfData.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint64 range = 2;
  if (this->_internal_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_range(), target);
  }

  // uint64 percentage = 3;
  if (this->_internal_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_percentage(), target);
  }

  // uint64 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  // string targetAddr = 5;
  if (!this->_internal_targetaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetaddr().data(), static_cast<int>(this->_internal_targetaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VrfData.targetAddr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_targetaddr(), target);
  }

  // repeated string vrfList = 6;
  for (int i = 0, n = this->_internal_vrflist_size(); i < n; i++) {
    const auto& s = this->_internal_vrflist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VrfData.vrfList");
    target = stream->WriteString(6, s, target);
  }

  // string txvrfinfohash = 7;
  if (!this->_internal_txvrfinfohash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txvrfinfohash().data(), static_cast<int>(this->_internal_txvrfinfohash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VrfData.txvrfinfohash");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_txvrfinfohash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VrfData)
  return target;
}

size_t VrfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VrfData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vrfList = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.vrflist_.size());
  for (int i = 0, n = _impl_.vrflist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.vrflist_.Get(i));
  }

  // string hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string targetAddr = 5;
  if (!this->_internal_targetaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetaddr());
  }

  // string txvrfinfohash = 7;
  if (!this->_internal_txvrfinfohash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txvrfinfohash());
  }

  // uint64 range = 2;
  if (this->_internal_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_range());
  }

  // uint64 percentage = 3;
  if (this->_internal_percentage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_percentage());
  }

  // uint64 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VrfData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VrfData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VrfData::GetClassData() const { return &_class_data_; }


void VrfData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VrfData*>(&to_msg);
  auto& from = static_cast<const VrfData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VrfData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vrflist_.MergeFrom(from._impl_.vrflist_);
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_targetaddr().empty()) {
    _this->_internal_set_targetaddr(from._internal_targetaddr());
  }
  if (!from._internal_txvrfinfohash().empty()) {
    _this->_internal_set_txvrfinfohash(from._internal_txvrfinfohash());
  }
  if (from._internal_range() != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  if (from._internal_percentage() != 0) {
    _this->_internal_set_percentage(from._internal_percentage());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VrfData::CopyFrom(const VrfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VrfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VrfData::IsInitialized() const {
  return true;
}

void VrfData::InternalSwap(VrfData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vrflist_.InternalSwap(&other->_impl_.vrflist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetaddr_, lhs_arena,
      &other->_impl_.targetaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.txvrfinfohash_, lhs_arena,
      &other->_impl_.txvrfinfohash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VrfData, _impl_.height_)
      + sizeof(VrfData::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(VrfData, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VrfData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[3]);
}

// ===================================================================

class Vrf::_Internal {
 public:
  static const ::VrfData& vrfdata(const Vrf* msg);
  static const ::CSign& vrfsign(const Vrf* msg);
};

const ::VrfData&
Vrf::_Internal::vrfdata(const Vrf* msg) {
  return *msg->_impl_.vrfdata_;
}
const ::CSign&
Vrf::_Internal::vrfsign(const Vrf* msg) {
  return *msg->_impl_.vrfsign_;
}
void Vrf::clear_vrfsign() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfsign_ != nullptr) {
    delete _impl_.vrfsign_;
  }
  _impl_.vrfsign_ = nullptr;
}
Vrf::Vrf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vrf)
}
Vrf::Vrf(const Vrf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vrf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vrfdata_){nullptr}
    , decltype(_impl_.vrfsign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vrfdata()) {
    _this->_impl_.vrfdata_ = new ::VrfData(*from._impl_.vrfdata_);
  }
  if (from._internal_has_vrfsign()) {
    _this->_impl_.vrfsign_ = new ::CSign(*from._impl_.vrfsign_);
  }
  // @@protoc_insertion_point(copy_constructor:Vrf)
}

inline void Vrf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vrfdata_){nullptr}
    , decltype(_impl_.vrfsign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:Vrf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vrf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vrfdata_;
  if (this != internal_default_instance()) delete _impl_.vrfsign_;
}

void Vrf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vrf::Clear() {
// @@protoc_insertion_point(message_clear_start:Vrf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vrfdata_ != nullptr) {
    delete _impl_.vrfdata_;
  }
  _impl_.vrfdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vrfsign_ != nullptr) {
    delete _impl_.vrfsign_;
  }
  _impl_.vrfsign_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vrf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .VrfData vrfdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CSign Vrfsign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vrf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vrf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .VrfData vrfdata = 1;
  if (this->_internal_has_vrfdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vrfdata(this),
        _Internal::vrfdata(this).GetCachedSize(), target, stream);
  }

  // .CSign Vrfsign = 2;
  if (this->_internal_has_vrfsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vrfsign(this),
        _Internal::vrfsign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vrf)
  return target;
}

size_t Vrf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vrf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VrfData vrfdata = 1;
  if (this->_internal_has_vrfdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfdata_);
  }

  // .CSign Vrfsign = 2;
  if (this->_internal_has_vrfsign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfsign_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vrf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vrf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vrf::GetClassData() const { return &_class_data_; }


void Vrf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vrf*>(&to_msg);
  auto& from = static_cast<const Vrf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vrf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vrfdata()) {
    _this->_internal_mutable_vrfdata()->::VrfData::MergeFrom(
        from._internal_vrfdata());
  }
  if (from._internal_has_vrfsign()) {
    _this->_internal_mutable_vrfsign()->::CSign::MergeFrom(
        from._internal_vrfsign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vrf::CopyFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {
  return true;
}

void Vrf::InternalSwap(Vrf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vrf, _impl_.vrfsign_)
      + sizeof(Vrf::_impl_.vrfsign_)
      - PROTOBUF_FIELD_OFFSET(Vrf, _impl_.vrfdata_)>(
          reinterpret_cast<char*>(&_impl_.vrfdata_),
          reinterpret_cast<char*>(&other->_impl_.vrfdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vrf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[4]);
}

// ===================================================================

class TxMsgAck::_Internal {
 public:
};

TxMsgAck::TxMsgAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxMsgAck)
}
TxMsgAck::TxMsgAck(const TxMsgAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:TxMsgAck)
}

inline void TxMsgAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMsgAck::~TxMsgAck() {
  // @@protoc_insertion_point(destructor:TxMsgAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.message_.Destroy();
  _impl_.tx_.Destroy();
}

void TxMsgAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsgAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxMsgAck.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxMsgAck.message"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMsgAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsgAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgAck.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsgAck)
  return target;
}

size_t TxMsgAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsgAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgAck::GetClassData() const { return &_class_data_; }


void TxMsgAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgAck*>(&to_msg);
  auto& from = static_cast<const TxMsgAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxMsgAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgAck::CopyFrom(const TxMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgAck::IsInitialized() const {
  return true;
}

void TxMsgAck::InternalSwap(TxMsgAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[5]);
}

// ===================================================================

class BuildBlockBroadcastMsg::_Internal {
 public:
  static const ::Vrf& blockvrfinfo(const BuildBlockBroadcastMsg* msg);
};

const ::Vrf&
BuildBlockBroadcastMsg::_Internal::blockvrfinfo(const BuildBlockBroadcastMsg* msg) {
  return *msg->_impl_.blockvrfinfo_;
}
BuildBlockBroadcastMsg::BuildBlockBroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BuildBlockBroadcastMsg)
}
BuildBlockBroadcastMsg::BuildBlockBroadcastMsg(const BuildBlockBroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildBlockBroadcastMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.castaddrs_){from._impl_.castaddrs_}
    , decltype(_impl_.vrfinfo_){from._impl_.vrfinfo_}
    , decltype(_impl_.txvrfinfo_){from._impl_.txvrfinfo_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.blockraw_){}
    , decltype(_impl_.blockvrfinfo_){nullptr}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blockraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockraw().empty()) {
    _this->_impl_.blockraw_.Set(from._internal_blockraw(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_blockvrfinfo()) {
    _this->_impl_.blockvrfinfo_ = new ::Vrf(*from._impl_.blockvrfinfo_);
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:BuildBlockBroadcastMsg)
}

inline void BuildBlockBroadcastMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.castaddrs_){arena}
    , decltype(_impl_.vrfinfo_){arena}
    , decltype(_impl_.txvrfinfo_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.blockraw_){}
    , decltype(_impl_.blockvrfinfo_){nullptr}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blockraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildBlockBroadcastMsg::~BuildBlockBroadcastMsg() {
  // @@protoc_insertion_point(destructor:BuildBlockBroadcastMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildBlockBroadcastMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.castaddrs_.~RepeatedPtrField();
  _impl_.vrfinfo_.~RepeatedPtrField();
  _impl_.txvrfinfo_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.blockraw_.Destroy();
  if (this != internal_default_instance()) delete _impl_.blockvrfinfo_;
}

void BuildBlockBroadcastMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildBlockBroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildBlockBroadcastMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.castaddrs_.Clear();
  _impl_.vrfinfo_.Clear();
  _impl_.txvrfinfo_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.blockraw_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.blockvrfinfo_ != nullptr) {
    delete _impl_.blockvrfinfo_;
  }
  _impl_.blockvrfinfo_ = nullptr;
  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildBlockBroadcastMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsg.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsg.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes blockRaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_blockraw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vrf blockVrfInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockvrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string castAddrs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_castaddrs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsg.castAddrs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Vrf vrfInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrfinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Vrf txvrfInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txvrfinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildBlockBroadcastMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildBlockBroadcastMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsg.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // bytes blockRaw = 3;
  if (!this->_internal_blockraw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blockraw(), target);
  }

  // .Vrf blockVrfInfo = 4;
  if (this->_internal_has_blockvrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::blockvrfinfo(this),
        _Internal::blockvrfinfo(this).GetCachedSize(), target, stream);
  }

  // int32 flag = 5;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_flag(), target);
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  // repeated string castAddrs = 7;
  for (int i = 0, n = this->_internal_castaddrs_size(); i < n; i++) {
    const auto& s = this->_internal_castaddrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsg.castAddrs");
    target = stream->WriteString(7, s, target);
  }

  // repeated .Vrf vrfInfo = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vrfinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_vrfinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Vrf txvrfInfo = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txvrfinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_txvrfinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildBlockBroadcastMsg)
  return target;
}

size_t BuildBlockBroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildBlockBroadcastMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string castAddrs = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.castaddrs_.size());
  for (int i = 0, n = _impl_.castaddrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.castaddrs_.Get(i));
  }

  // repeated .Vrf vrfInfo = 8;
  total_size += 1UL * this->_internal_vrfinfo_size();
  for (const auto& msg : this->_impl_.vrfinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Vrf txvrfInfo = 9;
  total_size += 1UL * this->_internal_txvrfinfo_size();
  for (const auto& msg : this->_impl_.txvrfinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes blockRaw = 3;
  if (!this->_internal_blockraw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockraw());
  }

  // .Vrf blockVrfInfo = 4;
  if (this->_internal_has_blockvrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockvrfinfo_);
  }

  // int32 flag = 5;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildBlockBroadcastMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildBlockBroadcastMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildBlockBroadcastMsg::GetClassData() const { return &_class_data_; }


void BuildBlockBroadcastMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildBlockBroadcastMsg*>(&to_msg);
  auto& from = static_cast<const BuildBlockBroadcastMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BuildBlockBroadcastMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.castaddrs_.MergeFrom(from._impl_.castaddrs_);
  _this->_impl_.vrfinfo_.MergeFrom(from._impl_.vrfinfo_);
  _this->_impl_.txvrfinfo_.MergeFrom(from._impl_.txvrfinfo_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_blockraw().empty()) {
    _this->_internal_set_blockraw(from._internal_blockraw());
  }
  if (from._internal_has_blockvrfinfo()) {
    _this->_internal_mutable_blockvrfinfo()->::Vrf::MergeFrom(
        from._internal_blockvrfinfo());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildBlockBroadcastMsg::CopyFrom(const BuildBlockBroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildBlockBroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildBlockBroadcastMsg::IsInitialized() const {
  return true;
}

void BuildBlockBroadcastMsg::InternalSwap(BuildBlockBroadcastMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.castaddrs_.InternalSwap(&other->_impl_.castaddrs_);
  _impl_.vrfinfo_.InternalSwap(&other->_impl_.vrfinfo_);
  _impl_.txvrfinfo_.InternalSwap(&other->_impl_.txvrfinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockraw_, lhs_arena,
      &other->_impl_.blockraw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildBlockBroadcastMsg, _impl_.type_)
      + sizeof(BuildBlockBroadcastMsg::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BuildBlockBroadcastMsg, _impl_.blockvrfinfo_)>(
          reinterpret_cast<char*>(&_impl_.blockvrfinfo_),
          reinterpret_cast<char*>(&other->_impl_.blockvrfinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildBlockBroadcastMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[6]);
}

// ===================================================================

class ContractTxMsgReq::_Internal {
 public:
  static const ::TxMsgReq& txmsgreq(const ContractTxMsgReq* msg);
};

const ::TxMsgReq&
ContractTxMsgReq::_Internal::txmsgreq(const ContractTxMsgReq* msg) {
  return *msg->_impl_.txmsgreq_;
}
ContractTxMsgReq::ContractTxMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContractTxMsgReq)
}
ContractTxMsgReq::ContractTxMsgReq(const ContractTxMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractTxMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contractdependentaddress_){from._impl_.contractdependentaddress_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.txmsgreq_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_txmsgreq()) {
    _this->_impl_.txmsgreq_ = new ::TxMsgReq(*from._impl_.txmsgreq_);
  }
  // @@protoc_insertion_point(copy_constructor:ContractTxMsgReq)
}

inline void ContractTxMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contractdependentaddress_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.txmsgreq_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractTxMsgReq::~ContractTxMsgReq() {
  // @@protoc_insertion_point(destructor:ContractTxMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractTxMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contractdependentaddress_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.txmsgreq_;
}

void ContractTxMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractTxMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ContractTxMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contractdependentaddress_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.txmsgreq_ != nullptr) {
    delete _impl_.txmsgreq_;
  }
  _impl_.txmsgreq_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractTxMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ContractTxMsgReq.version"));
        } else
          goto handle_unusual;
        continue;
      // .TxMsgReq txMsgReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_txmsgreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string contractDependentAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contractdependentaddress();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ContractTxMsgReq.contractDependentAddress"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractTxMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContractTxMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ContractTxMsgReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .TxMsgReq txMsgReq = 2;
  if (this->_internal_has_txmsgreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::txmsgreq(this),
        _Internal::txmsgreq(this).GetCachedSize(), target, stream);
  }

  // repeated string contractDependentAddress = 3;
  for (int i = 0, n = this->_internal_contractdependentaddress_size(); i < n; i++) {
    const auto& s = this->_internal_contractdependentaddress(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ContractTxMsgReq.contractDependentAddress");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContractTxMsgReq)
  return target;
}

size_t ContractTxMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContractTxMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string contractDependentAddress = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.contractdependentaddress_.size());
  for (int i = 0, n = _impl_.contractdependentaddress_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.contractdependentaddress_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .TxMsgReq txMsgReq = 2;
  if (this->_internal_has_txmsgreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txmsgreq_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractTxMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractTxMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractTxMsgReq::GetClassData() const { return &_class_data_; }


void ContractTxMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractTxMsgReq*>(&to_msg);
  auto& from = static_cast<const ContractTxMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContractTxMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contractdependentaddress_.MergeFrom(from._impl_.contractdependentaddress_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_txmsgreq()) {
    _this->_internal_mutable_txmsgreq()->::TxMsgReq::MergeFrom(
        from._internal_txmsgreq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractTxMsgReq::CopyFrom(const ContractTxMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContractTxMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractTxMsgReq::IsInitialized() const {
  return true;
}

void ContractTxMsgReq::InternalSwap(ContractTxMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contractdependentaddress_.InternalSwap(&other->_impl_.contractdependentaddress_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.txmsgreq_, other->_impl_.txmsgreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractTxMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[7]);
}

// ===================================================================

class VrfDataSource::_Internal {
 public:
};

VrfDataSource::VrfDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VrfDataSource)
}
VrfDataSource::VrfDataSource(const VrfDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VrfDataSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vrfnodelist_){from._impl_.vrfnodelist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VrfDataSource)
}

inline void VrfDataSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vrfnodelist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VrfDataSource::~VrfDataSource() {
  // @@protoc_insertion_point(destructor:VrfDataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VrfDataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vrfnodelist_.~RepeatedPtrField();
}

void VrfDataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VrfDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:VrfDataSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vrfnodelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VrfDataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string vrfNodelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vrfnodelist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "VrfDataSource.vrfNodelist"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VrfDataSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VrfDataSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string vrfNodelist = 1;
  for (int i = 0, n = this->_internal_vrfnodelist_size(); i < n; i++) {
    const auto& s = this->_internal_vrfnodelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VrfDataSource.vrfNodelist");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VrfDataSource)
  return target;
}

size_t VrfDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VrfDataSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vrfNodelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.vrfnodelist_.size());
  for (int i = 0, n = _impl_.vrfnodelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.vrfnodelist_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VrfDataSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VrfDataSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VrfDataSource::GetClassData() const { return &_class_data_; }


void VrfDataSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VrfDataSource*>(&to_msg);
  auto& from = static_cast<const VrfDataSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VrfDataSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vrfnodelist_.MergeFrom(from._impl_.vrfnodelist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VrfDataSource::CopyFrom(const VrfDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VrfDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VrfDataSource::IsInitialized() const {
  return true;
}

void VrfDataSource::InternalSwap(VrfDataSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vrfnodelist_.InternalSwap(&other->_impl_.vrfnodelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VrfDataSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[8]);
}

// ===================================================================

class ContractPackagerMsg::_Internal {
 public:
  static const ::CSign& sign(const ContractPackagerMsg* msg);
  static const ::Vrf& vrfinfo(const ContractPackagerMsg* msg);
  static const ::VrfDataSource& vrfdatasource(const ContractPackagerMsg* msg);
};

const ::CSign&
ContractPackagerMsg::_Internal::sign(const ContractPackagerMsg* msg) {
  return *msg->_impl_.sign_;
}
const ::Vrf&
ContractPackagerMsg::_Internal::vrfinfo(const ContractPackagerMsg* msg) {
  return *msg->_impl_.vrfinfo_;
}
const ::VrfDataSource&
ContractPackagerMsg::_Internal::vrfdatasource(const ContractPackagerMsg* msg) {
  return *msg->_impl_.vrfdatasource_;
}
void ContractPackagerMsg::clear_sign() {
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
}
ContractPackagerMsg::ContractPackagerMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContractPackagerMsg)
}
ContractPackagerMsg::ContractPackagerMsg(const ContractPackagerMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractPackagerMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txmsgreq_){from._impl_.txmsgreq_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.vrfdatasource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sign()) {
    _this->_impl_.sign_ = new ::CSign(*from._impl_.sign_);
  }
  if (from._internal_has_vrfinfo()) {
    _this->_impl_.vrfinfo_ = new ::Vrf(*from._impl_.vrfinfo_);
  }
  if (from._internal_has_vrfdatasource()) {
    _this->_impl_.vrfdatasource_ = new ::VrfDataSource(*from._impl_.vrfdatasource_);
  }
  // @@protoc_insertion_point(copy_constructor:ContractPackagerMsg)
}

inline void ContractPackagerMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txmsgreq_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.vrfdatasource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractPackagerMsg::~ContractPackagerMsg() {
  // @@protoc_insertion_point(destructor:ContractPackagerMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractPackagerMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txmsgreq_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sign_;
  if (this != internal_default_instance()) delete _impl_.vrfinfo_;
  if (this != internal_default_instance()) delete _impl_.vrfdatasource_;
}

void ContractPackagerMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractPackagerMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ContractPackagerMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txmsgreq_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vrfdatasource_ != nullptr) {
    delete _impl_.vrfdatasource_;
  }
  _impl_.vrfdatasource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractPackagerMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ContractPackagerMsg.version"));
        } else
          goto handle_unusual;
        continue;
      // .CSign sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TxMsgReq txMsgReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txmsgreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Vrf vrfInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .VrfDataSource vrfDataSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfdatasource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractPackagerMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContractPackagerMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ContractPackagerMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .CSign sign = 2;
  if (this->_internal_has_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sign(this),
        _Internal::sign(this).GetCachedSize(), target, stream);
  }

  // repeated .TxMsgReq txMsgReq = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txmsgreq_size()); i < n; i++) {
    const auto& repfield = this->_internal_txmsgreq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Vrf vrfInfo = 4;
  if (this->_internal_has_vrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vrfinfo(this),
        _Internal::vrfinfo(this).GetCachedSize(), target, stream);
  }

  // .VrfDataSource vrfDataSource = 5;
  if (this->_internal_has_vrfdatasource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::vrfdatasource(this),
        _Internal::vrfdatasource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContractPackagerMsg)
  return target;
}

size_t ContractPackagerMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContractPackagerMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TxMsgReq txMsgReq = 3;
  total_size += 1UL * this->_internal_txmsgreq_size();
  for (const auto& msg : this->_impl_.txmsgreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .CSign sign = 2;
  if (this->_internal_has_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sign_);
  }

  // .Vrf vrfInfo = 4;
  if (this->_internal_has_vrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfinfo_);
  }

  // .VrfDataSource vrfDataSource = 5;
  if (this->_internal_has_vrfdatasource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfdatasource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractPackagerMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractPackagerMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractPackagerMsg::GetClassData() const { return &_class_data_; }


void ContractPackagerMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractPackagerMsg*>(&to_msg);
  auto& from = static_cast<const ContractPackagerMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContractPackagerMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txmsgreq_.MergeFrom(from._impl_.txmsgreq_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_sign()) {
    _this->_internal_mutable_sign()->::CSign::MergeFrom(
        from._internal_sign());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_internal_mutable_vrfinfo()->::Vrf::MergeFrom(
        from._internal_vrfinfo());
  }
  if (from._internal_has_vrfdatasource()) {
    _this->_internal_mutable_vrfdatasource()->::VrfDataSource::MergeFrom(
        from._internal_vrfdatasource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractPackagerMsg::CopyFrom(const ContractPackagerMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContractPackagerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractPackagerMsg::IsInitialized() const {
  return true;
}

void ContractPackagerMsg::InternalSwap(ContractPackagerMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txmsgreq_.InternalSwap(&other->_impl_.txmsgreq_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractPackagerMsg, _impl_.vrfdatasource_)
      + sizeof(ContractPackagerMsg::_impl_.vrfdatasource_)
      - PROTOBUF_FIELD_OFFSET(ContractPackagerMsg, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractPackagerMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SignNodeMsg*
Arena::CreateMaybeMessage< ::SignNodeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SignNodeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsgInfo*
Arena::CreateMaybeMessage< ::TxMsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxMsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsgReq*
Arena::CreateMaybeMessage< ::TxMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::VrfData*
Arena::CreateMaybeMessage< ::VrfData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VrfData >(arena);
}
template<> PROTOBUF_NOINLINE ::Vrf*
Arena::CreateMaybeMessage< ::Vrf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vrf >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsgAck*
Arena::CreateMaybeMessage< ::TxMsgAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxMsgAck >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildBlockBroadcastMsg*
Arena::CreateMaybeMessage< ::BuildBlockBroadcastMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildBlockBroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ContractTxMsgReq*
Arena::CreateMaybeMessage< ::ContractTxMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContractTxMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::VrfDataSource*
Arena::CreateMaybeMessage< ::VrfDataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VrfDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::ContractPackagerMsg*
Arena::CreateMaybeMessage< ::ContractPackagerMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContractPackagerMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
