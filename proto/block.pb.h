// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
#include "ca_protomsg.pb.h"
#include "sign.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
class BlockMsg;
struct BlockMsgDefaultTypeInternal;
extern BlockMsgDefaultTypeInternal _BlockMsg_default_instance_;
class BlockStatus;
struct BlockStatusDefaultTypeInternal;
extern BlockStatusDefaultTypeInternal _BlockStatus_default_instance_;
class CBlock;
struct CBlockDefaultTypeInternal;
extern CBlockDefaultTypeInternal _CBlock_default_instance_;
class SeekPreHashByHightAck;
struct SeekPreHashByHightAckDefaultTypeInternal;
extern SeekPreHashByHightAckDefaultTypeInternal _SeekPreHashByHightAck_default_instance_;
class SeekPreHashByHightReq;
struct SeekPreHashByHightReqDefaultTypeInternal;
extern SeekPreHashByHightReqDefaultTypeInternal _SeekPreHashByHightReq_default_instance_;
class TxStatus;
struct TxStatusDefaultTypeInternal;
extern TxStatusDefaultTypeInternal _TxStatus_default_instance_;
class newSeekContractPreHashAck;
struct newSeekContractPreHashAckDefaultTypeInternal;
extern newSeekContractPreHashAckDefaultTypeInternal _newSeekContractPreHashAck_default_instance_;
class newSeekContractPreHashReq;
struct newSeekContractPreHashReqDefaultTypeInternal;
extern newSeekContractPreHashReqDefaultTypeInternal _newSeekContractPreHashReq_default_instance_;
class preHashPair;
struct preHashPairDefaultTypeInternal;
extern preHashPairDefaultTypeInternal _preHashPair_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BlockMsg* Arena::CreateMaybeMessage<::BlockMsg>(Arena*);
template<> ::BlockStatus* Arena::CreateMaybeMessage<::BlockStatus>(Arena*);
template<> ::CBlock* Arena::CreateMaybeMessage<::CBlock>(Arena*);
template<> ::SeekPreHashByHightAck* Arena::CreateMaybeMessage<::SeekPreHashByHightAck>(Arena*);
template<> ::SeekPreHashByHightReq* Arena::CreateMaybeMessage<::SeekPreHashByHightReq>(Arena*);
template<> ::TxStatus* Arena::CreateMaybeMessage<::TxStatus>(Arena*);
template<> ::newSeekContractPreHashAck* Arena::CreateMaybeMessage<::newSeekContractPreHashAck>(Arena*);
template<> ::newSeekContractPreHashReq* Arena::CreateMaybeMessage<::newSeekContractPreHashReq>(Arena*);
template<> ::preHashPair* Arena::CreateMaybeMessage<::preHashPair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBlock) */ {
 public:
  inline CBlock() : CBlock(nullptr) {}
  ~CBlock() override;
  explicit PROTOBUF_CONSTEXPR CBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBlock(const CBlock& from);
  CBlock(CBlock&& from) noexcept
    : CBlock() {
    *this = ::std::move(from);
  }

  inline CBlock& operator=(const CBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBlock& operator=(CBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBlock* internal_default_instance() {
    return reinterpret_cast<const CBlock*>(
               &_CBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBlock& a, CBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(CBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CBlock& from) {
    CBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBlock";
  }
  protected:
  explicit CBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 7,
    kSignFieldNumber = 10,
    kHashFieldNumber = 3,
    kPrevHashFieldNumber = 4,
    kMerkleRootFieldNumber = 6,
    kDataFieldNumber = 8,
    kInfoFieldNumber = 9,
    kReserve0FieldNumber = 11,
    kReserve1FieldNumber = 12,
    kTimeFieldNumber = 2,
    kHeightFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // repeated .CTransaction txs = 7;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::CTransaction* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >*
      mutable_txs();
  private:
  const ::CTransaction& _internal_txs(int index) const;
  ::CTransaction* _internal_add_txs();
  public:
  const ::CTransaction& txs(int index) const;
  ::CTransaction* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >&
      txs() const;

  // repeated .CSign sign = 10;
  int sign_size() const;
  private:
  int _internal_sign_size() const;
  public:
  void clear_sign();
  ::CSign* mutable_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >*
      mutable_sign();
  private:
  const ::CSign& _internal_sign(int index) const;
  ::CSign* _internal_add_sign();
  public:
  const ::CSign& sign(int index) const;
  ::CSign* add_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >&
      sign() const;

  // string hash = 3;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string prevHash = 4;
  void clear_prevhash();
  const std::string& prevhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prevhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prevhash();
  PROTOBUF_NODISCARD std::string* release_prevhash();
  void set_allocated_prevhash(std::string* prevhash);
  private:
  const std::string& _internal_prevhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prevhash(const std::string& value);
  std::string* _internal_mutable_prevhash();
  public:

  // string merkleRoot = 6;
  void clear_merkleroot();
  const std::string& merkleroot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merkleroot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merkleroot();
  PROTOBUF_NODISCARD std::string* release_merkleroot();
  void set_allocated_merkleroot(std::string* merkleroot);
  private:
  const std::string& _internal_merkleroot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merkleroot(const std::string& value);
  std::string* _internal_mutable_merkleroot();
  public:

  // string data = 8;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string info = 9;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string reserve0 = 11;
  void clear_reserve0();
  const std::string& reserve0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve0();
  PROTOBUF_NODISCARD std::string* release_reserve0();
  void set_allocated_reserve0(std::string* reserve0);
  private:
  const std::string& _internal_reserve0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve0(const std::string& value);
  std::string* _internal_mutable_reserve0();
  public:

  // string reserve1 = 12;
  void clear_reserve1();
  const std::string& reserve1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve1();
  PROTOBUF_NODISCARD std::string* release_reserve1();
  void set_allocated_reserve1(std::string* reserve1);
  private:
  const std::string& _internal_reserve1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve1(const std::string& value);
  std::string* _internal_mutable_reserve1();
  public:

  // uint64 time = 2;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // int64 height = 5;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction > txs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign > sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkleroot_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve1_;
    uint64_t time_;
    int64_t height_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class BlockMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockMsg) */ {
 public:
  inline BlockMsg() : BlockMsg(nullptr) {}
  ~BlockMsg() override;
  explicit PROTOBUF_CONSTEXPR BlockMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMsg(const BlockMsg& from);
  BlockMsg(BlockMsg&& from) noexcept
    : BlockMsg() {
    *this = ::std::move(from);
  }

  inline BlockMsg& operator=(const BlockMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMsg& operator=(BlockMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMsg* internal_default_instance() {
    return reinterpret_cast<const BlockMsg*>(
               &_BlockMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockMsg& a, BlockMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockMsg& from) {
    BlockMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockMsg";
  }
  protected:
  explicit BlockMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfInfoFieldNumber = 7,
    kTxvrfInfoFieldNumber = 8,
    kVersionFieldNumber = 2,
    kMessageFieldNumber = 4,
    kBlockFieldNumber = 6,
    kSignFieldNumber = 9,
    kNonceFieldNumber = 1,
    kTimeFieldNumber = 5,
    kCodeFieldNumber = 3,
  };
  // repeated .Vrf vrfInfo = 7;
  int vrfinfo_size() const;
  private:
  int _internal_vrfinfo_size() const;
  public:
  void clear_vrfinfo();
  ::Vrf* mutable_vrfinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
      mutable_vrfinfo();
  private:
  const ::Vrf& _internal_vrfinfo(int index) const;
  ::Vrf* _internal_add_vrfinfo();
  public:
  const ::Vrf& vrfinfo(int index) const;
  ::Vrf* add_vrfinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
      vrfinfo() const;

  // repeated .Vrf txvrfInfo = 8;
  int txvrfinfo_size() const;
  private:
  int _internal_txvrfinfo_size() const;
  public:
  void clear_txvrfinfo();
  ::Vrf* mutable_txvrfinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
      mutable_txvrfinfo();
  private:
  const ::Vrf& _internal_txvrfinfo(int index) const;
  ::Vrf* _internal_add_txvrfinfo();
  public:
  const ::Vrf& txvrfinfo(int index) const;
  ::Vrf* add_txvrfinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
      txvrfinfo() const;

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes block = 6;
  void clear_block();
  const std::string& block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block();
  PROTOBUF_NODISCARD std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // .CSign sign = 9;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const ::CSign& sign() const;
  PROTOBUF_NODISCARD ::CSign* release_sign();
  ::CSign* mutable_sign();
  void set_allocated_sign(::CSign* sign);
  private:
  const ::CSign& _internal_sign() const;
  ::CSign* _internal_mutable_sign();
  public:
  void unsafe_arena_set_allocated_sign(
      ::CSign* sign);
  ::CSign* unsafe_arena_release_sign();

  // uint64 nonce = 1;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint64 time = 5;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // sint32 code = 3;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BlockMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf > vrfinfo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf > txvrfinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
    ::CSign* sign_;
    uint64_t nonce_;
    uint64_t time_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class TxStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxStatus) */ {
 public:
  inline TxStatus() : TxStatus(nullptr) {}
  ~TxStatus() override;
  explicit PROTOBUF_CONSTEXPR TxStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxStatus(const TxStatus& from);
  TxStatus(TxStatus&& from) noexcept
    : TxStatus() {
    *this = ::std::move(from);
  }

  inline TxStatus& operator=(const TxStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxStatus& operator=(TxStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxStatus* internal_default_instance() {
    return reinterpret_cast<const TxStatus*>(
               &_TxStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TxStatus& a, TxStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TxStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxStatus& from) {
    TxStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxStatus";
  }
  protected:
  explicit TxStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHashFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string txHash = 1;
  void clear_txhash();
  const std::string& txhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_txhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_txhash();
  PROTOBUF_NODISCARD std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // int32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TxStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class BlockStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockStatus) */ {
 public:
  inline BlockStatus() : BlockStatus(nullptr) {}
  ~BlockStatus() override;
  explicit PROTOBUF_CONSTEXPR BlockStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockStatus(const BlockStatus& from);
  BlockStatus(BlockStatus&& from) noexcept
    : BlockStatus() {
    *this = ::std::move(from);
  }

  inline BlockStatus& operator=(const BlockStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockStatus& operator=(BlockStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockStatus* internal_default_instance() {
    return reinterpret_cast<const BlockStatus*>(
               &_BlockStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockStatus& a, BlockStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockStatus& from) {
    BlockStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockStatus";
  }
  protected:
  explicit BlockStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxStatusFieldNumber = 3,
    kBlockHashFieldNumber = 1,
    kIdFieldNumber = 4,
    kStatusFieldNumber = 2,
  };
  // repeated .TxStatus txStatus = 3;
  int txstatus_size() const;
  private:
  int _internal_txstatus_size() const;
  public:
  void clear_txstatus();
  ::TxStatus* mutable_txstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxStatus >*
      mutable_txstatus();
  private:
  const ::TxStatus& _internal_txstatus(int index) const;
  ::TxStatus* _internal_add_txstatus();
  public:
  const ::TxStatus& txstatus(int index) const;
  ::TxStatus* add_txstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxStatus >&
      txstatus() const;

  // string blockHash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockhash();
  PROTOBUF_NODISCARD std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BlockStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxStatus > txstatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class SeekPreHashByHightReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SeekPreHashByHightReq) */ {
 public:
  inline SeekPreHashByHightReq() : SeekPreHashByHightReq(nullptr) {}
  ~SeekPreHashByHightReq() override;
  explicit PROTOBUF_CONSTEXPR SeekPreHashByHightReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekPreHashByHightReq(const SeekPreHashByHightReq& from);
  SeekPreHashByHightReq(SeekPreHashByHightReq&& from) noexcept
    : SeekPreHashByHightReq() {
    *this = ::std::move(from);
  }

  inline SeekPreHashByHightReq& operator=(const SeekPreHashByHightReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekPreHashByHightReq& operator=(SeekPreHashByHightReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekPreHashByHightReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekPreHashByHightReq* internal_default_instance() {
    return reinterpret_cast<const SeekPreHashByHightReq*>(
               &_SeekPreHashByHightReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SeekPreHashByHightReq& a, SeekPreHashByHightReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekPreHashByHightReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekPreHashByHightReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekPreHashByHightReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekPreHashByHightReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekPreHashByHightReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeekPreHashByHightReq& from) {
    SeekPreHashByHightReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekPreHashByHightReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SeekPreHashByHightReq";
  }
  protected:
  explicit SeekPreHashByHightReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kSeekHeightFieldNumber = 3,
  };
  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 seek_height = 3;
  void clear_seek_height();
  uint64_t seek_height() const;
  void set_seek_height(uint64_t value);
  private:
  uint64_t _internal_seek_height() const;
  void _internal_set_seek_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SeekPreHashByHightReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t seek_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class SeekPreHashByHightAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SeekPreHashByHightAck) */ {
 public:
  inline SeekPreHashByHightAck() : SeekPreHashByHightAck(nullptr) {}
  ~SeekPreHashByHightAck() override;
  explicit PROTOBUF_CONSTEXPR SeekPreHashByHightAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekPreHashByHightAck(const SeekPreHashByHightAck& from);
  SeekPreHashByHightAck(SeekPreHashByHightAck&& from) noexcept
    : SeekPreHashByHightAck() {
    *this = ::std::move(from);
  }

  inline SeekPreHashByHightAck& operator=(const SeekPreHashByHightAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekPreHashByHightAck& operator=(SeekPreHashByHightAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekPreHashByHightAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekPreHashByHightAck* internal_default_instance() {
    return reinterpret_cast<const SeekPreHashByHightAck*>(
               &_SeekPreHashByHightAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SeekPreHashByHightAck& a, SeekPreHashByHightAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekPreHashByHightAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekPreHashByHightAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekPreHashByHightAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekPreHashByHightAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekPreHashByHightAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeekPreHashByHightAck& from) {
    SeekPreHashByHightAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekPreHashByHightAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SeekPreHashByHightAck";
  }
  protected:
  explicit SeekPreHashByHightAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrehashesFieldNumber = 4,
    kSelfNodeIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kSeekHeightFieldNumber = 3,
  };
  // repeated string prehashes = 4;
  int prehashes_size() const;
  private:
  int _internal_prehashes_size() const;
  public:
  void clear_prehashes();
  const std::string& prehashes(int index) const;
  std::string* mutable_prehashes(int index);
  void set_prehashes(int index, const std::string& value);
  void set_prehashes(int index, std::string&& value);
  void set_prehashes(int index, const char* value);
  void set_prehashes(int index, const char* value, size_t size);
  std::string* add_prehashes();
  void add_prehashes(const std::string& value);
  void add_prehashes(std::string&& value);
  void add_prehashes(const char* value);
  void add_prehashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prehashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prehashes();
  private:
  const std::string& _internal_prehashes(int index) const;
  std::string* _internal_add_prehashes();
  public:

  // string self_node_id = 1;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // uint64 seek_height = 3;
  void clear_seek_height();
  uint64_t seek_height() const;
  void set_seek_height(uint64_t value);
  private:
  uint64_t _internal_seek_height() const;
  void _internal_set_seek_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SeekPreHashByHightAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prehashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    uint64_t seek_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class preHashPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:preHashPair) */ {
 public:
  inline preHashPair() : preHashPair(nullptr) {}
  ~preHashPair() override;
  explicit PROTOBUF_CONSTEXPR preHashPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  preHashPair(const preHashPair& from);
  preHashPair(preHashPair&& from) noexcept
    : preHashPair() {
    *this = ::std::move(from);
  }

  inline preHashPair& operator=(const preHashPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline preHashPair& operator=(preHashPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const preHashPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const preHashPair* internal_default_instance() {
    return reinterpret_cast<const preHashPair*>(
               &_preHashPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(preHashPair& a, preHashPair& b) {
    a.Swap(&b);
  }
  inline void Swap(preHashPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(preHashPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  preHashPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<preHashPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const preHashPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const preHashPair& from) {
    preHashPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(preHashPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "preHashPair";
  }
  protected:
  explicit preHashPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddrFieldNumber = 1,
    kRootHashFieldNumber = 2,
    kBlockRawFieldNumber = 3,
  };
  // string ContractAddr = 1;
  void clear_contractaddr();
  const std::string& contractaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contractaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contractaddr();
  PROTOBUF_NODISCARD std::string* release_contractaddr();
  void set_allocated_contractaddr(std::string* contractaddr);
  private:
  const std::string& _internal_contractaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contractaddr(const std::string& value);
  std::string* _internal_mutable_contractaddr();
  public:

  // string RootHash = 2;
  void clear_roothash();
  const std::string& roothash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roothash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roothash();
  PROTOBUF_NODISCARD std::string* release_roothash();
  void set_allocated_roothash(std::string* roothash);
  private:
  const std::string& _internal_roothash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roothash(const std::string& value);
  std::string* _internal_mutable_roothash();
  public:

  // bytes blockRaw = 3;
  void clear_blockraw();
  const std::string& blockraw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockraw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockraw();
  PROTOBUF_NODISCARD std::string* release_blockraw();
  void set_allocated_blockraw(std::string* blockraw);
  private:
  const std::string& _internal_blockraw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockraw(const std::string& value);
  std::string* _internal_mutable_blockraw();
  public:

  // @@protoc_insertion_point(class_scope:preHashPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roothash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockraw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class newSeekContractPreHashReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:newSeekContractPreHashReq) */ {
 public:
  inline newSeekContractPreHashReq() : newSeekContractPreHashReq(nullptr) {}
  ~newSeekContractPreHashReq() override;
  explicit PROTOBUF_CONSTEXPR newSeekContractPreHashReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  newSeekContractPreHashReq(const newSeekContractPreHashReq& from);
  newSeekContractPreHashReq(newSeekContractPreHashReq&& from) noexcept
    : newSeekContractPreHashReq() {
    *this = ::std::move(from);
  }

  inline newSeekContractPreHashReq& operator=(const newSeekContractPreHashReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline newSeekContractPreHashReq& operator=(newSeekContractPreHashReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const newSeekContractPreHashReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const newSeekContractPreHashReq* internal_default_instance() {
    return reinterpret_cast<const newSeekContractPreHashReq*>(
               &_newSeekContractPreHashReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(newSeekContractPreHashReq& a, newSeekContractPreHashReq& b) {
    a.Swap(&b);
  }
  inline void Swap(newSeekContractPreHashReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(newSeekContractPreHashReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  newSeekContractPreHashReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<newSeekContractPreHashReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const newSeekContractPreHashReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const newSeekContractPreHashReq& from) {
    newSeekContractPreHashReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(newSeekContractPreHashReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "newSeekContractPreHashReq";
  }
  protected:
  explicit newSeekContractPreHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeekRootHashFieldNumber = 4,
    kVersionFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kSelfNodeIdFieldNumber = 3,
  };
  // repeated .preHashPair seekRootHash = 4;
  int seekroothash_size() const;
  private:
  int _internal_seekroothash_size() const;
  public:
  void clear_seekroothash();
  ::preHashPair* mutable_seekroothash(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >*
      mutable_seekroothash();
  private:
  const ::preHashPair& _internal_seekroothash(int index) const;
  ::preHashPair* _internal_add_seekroothash();
  public:
  const ::preHashPair& seekroothash(int index) const;
  ::preHashPair* add_seekroothash();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >&
      seekroothash() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string self_node_id = 3;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // @@protoc_insertion_point(class_scope:newSeekContractPreHashReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair > seekroothash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class newSeekContractPreHashAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:newSeekContractPreHashAck) */ {
 public:
  inline newSeekContractPreHashAck() : newSeekContractPreHashAck(nullptr) {}
  ~newSeekContractPreHashAck() override;
  explicit PROTOBUF_CONSTEXPR newSeekContractPreHashAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  newSeekContractPreHashAck(const newSeekContractPreHashAck& from);
  newSeekContractPreHashAck(newSeekContractPreHashAck&& from) noexcept
    : newSeekContractPreHashAck() {
    *this = ::std::move(from);
  }

  inline newSeekContractPreHashAck& operator=(const newSeekContractPreHashAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline newSeekContractPreHashAck& operator=(newSeekContractPreHashAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const newSeekContractPreHashAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const newSeekContractPreHashAck* internal_default_instance() {
    return reinterpret_cast<const newSeekContractPreHashAck*>(
               &_newSeekContractPreHashAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(newSeekContractPreHashAck& a, newSeekContractPreHashAck& b) {
    a.Swap(&b);
  }
  inline void Swap(newSeekContractPreHashAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(newSeekContractPreHashAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  newSeekContractPreHashAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<newSeekContractPreHashAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const newSeekContractPreHashAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const newSeekContractPreHashAck& from) {
    newSeekContractPreHashAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(newSeekContractPreHashAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "newSeekContractPreHashAck";
  }
  protected:
  explicit newSeekContractPreHashAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeekContractBlockFieldNumber = 4,
    kVersionFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kSelfNodeIdFieldNumber = 3,
  };
  // repeated .preHashPair seekContractBlock = 4;
  int seekcontractblock_size() const;
  private:
  int _internal_seekcontractblock_size() const;
  public:
  void clear_seekcontractblock();
  ::preHashPair* mutable_seekcontractblock(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >*
      mutable_seekcontractblock();
  private:
  const ::preHashPair& _internal_seekcontractblock(int index) const;
  ::preHashPair* _internal_add_seekcontractblock();
  public:
  const ::preHashPair& seekcontractblock(int index) const;
  ::preHashPair* add_seekcontractblock();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >&
      seekcontractblock() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string msg_id = 2;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_NODISCARD std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string self_node_id = 3;
  void clear_self_node_id();
  const std::string& self_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_node_id();
  PROTOBUF_NODISCARD std::string* release_self_node_id();
  void set_allocated_self_node_id(std::string* self_node_id);
  private:
  const std::string& _internal_self_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_node_id(const std::string& value);
  std::string* _internal_mutable_self_node_id();
  public:

  // @@protoc_insertion_point(class_scope:newSeekContractPreHashAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair > seekcontractblock_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_node_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBlock

// uint32 version = 1;
inline void CBlock::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t CBlock::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CBlock::version() const {
  // @@protoc_insertion_point(field_get:CBlock.version)
  return _internal_version();
}
inline void CBlock::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void CBlock::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CBlock.version)
}

// uint64 time = 2;
inline void CBlock::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t CBlock::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t CBlock::time() const {
  // @@protoc_insertion_point(field_get:CBlock.time)
  return _internal_time();
}
inline void CBlock::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void CBlock::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBlock.time)
}

// string hash = 3;
inline void CBlock::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& CBlock::hash() const {
  // @@protoc_insertion_point(field_get:CBlock.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.hash)
}
inline std::string* CBlock::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:CBlock.hash)
  return _s;
}
inline const std::string& CBlock::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void CBlock::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_hash() {
  // @@protoc_insertion_point(field_release:CBlock.hash)
  return _impl_.hash_.Release();
}
inline void CBlock::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.hash)
}

// string prevHash = 4;
inline void CBlock::clear_prevhash() {
  _impl_.prevhash_.ClearToEmpty();
}
inline const std::string& CBlock::prevhash() const {
  // @@protoc_insertion_point(field_get:CBlock.prevHash)
  return _internal_prevhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_prevhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prevhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.prevHash)
}
inline std::string* CBlock::mutable_prevhash() {
  std::string* _s = _internal_mutable_prevhash();
  // @@protoc_insertion_point(field_mutable:CBlock.prevHash)
  return _s;
}
inline const std::string& CBlock::_internal_prevhash() const {
  return _impl_.prevhash_.Get();
}
inline void CBlock::_internal_set_prevhash(const std::string& value) {
  
  _impl_.prevhash_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_prevhash() {
  
  return _impl_.prevhash_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_prevhash() {
  // @@protoc_insertion_point(field_release:CBlock.prevHash)
  return _impl_.prevhash_.Release();
}
inline void CBlock::set_allocated_prevhash(std::string* prevhash) {
  if (prevhash != nullptr) {
    
  } else {
    
  }
  _impl_.prevhash_.SetAllocated(prevhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prevhash_.IsDefault()) {
    _impl_.prevhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.prevHash)
}

// int64 height = 5;
inline void CBlock::clear_height() {
  _impl_.height_ = int64_t{0};
}
inline int64_t CBlock::_internal_height() const {
  return _impl_.height_;
}
inline int64_t CBlock::height() const {
  // @@protoc_insertion_point(field_get:CBlock.height)
  return _internal_height();
}
inline void CBlock::_internal_set_height(int64_t value) {
  
  _impl_.height_ = value;
}
inline void CBlock::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CBlock.height)
}

// string merkleRoot = 6;
inline void CBlock::clear_merkleroot() {
  _impl_.merkleroot_.ClearToEmpty();
}
inline const std::string& CBlock::merkleroot() const {
  // @@protoc_insertion_point(field_get:CBlock.merkleRoot)
  return _internal_merkleroot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_merkleroot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.merkleroot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.merkleRoot)
}
inline std::string* CBlock::mutable_merkleroot() {
  std::string* _s = _internal_mutable_merkleroot();
  // @@protoc_insertion_point(field_mutable:CBlock.merkleRoot)
  return _s;
}
inline const std::string& CBlock::_internal_merkleroot() const {
  return _impl_.merkleroot_.Get();
}
inline void CBlock::_internal_set_merkleroot(const std::string& value) {
  
  _impl_.merkleroot_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_merkleroot() {
  
  return _impl_.merkleroot_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_merkleroot() {
  // @@protoc_insertion_point(field_release:CBlock.merkleRoot)
  return _impl_.merkleroot_.Release();
}
inline void CBlock::set_allocated_merkleroot(std::string* merkleroot) {
  if (merkleroot != nullptr) {
    
  } else {
    
  }
  _impl_.merkleroot_.SetAllocated(merkleroot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.merkleroot_.IsDefault()) {
    _impl_.merkleroot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.merkleRoot)
}

// repeated .CTransaction txs = 7;
inline int CBlock::_internal_txs_size() const {
  return _impl_.txs_.size();
}
inline int CBlock::txs_size() const {
  return _internal_txs_size();
}
inline ::CTransaction* CBlock::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:CBlock.txs)
  return _impl_.txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >*
CBlock::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:CBlock.txs)
  return &_impl_.txs_;
}
inline const ::CTransaction& CBlock::_internal_txs(int index) const {
  return _impl_.txs_.Get(index);
}
inline const ::CTransaction& CBlock::txs(int index) const {
  // @@protoc_insertion_point(field_get:CBlock.txs)
  return _internal_txs(index);
}
inline ::CTransaction* CBlock::_internal_add_txs() {
  return _impl_.txs_.Add();
}
inline ::CTransaction* CBlock::add_txs() {
  ::CTransaction* _add = _internal_add_txs();
  // @@protoc_insertion_point(field_add:CBlock.txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >&
CBlock::txs() const {
  // @@protoc_insertion_point(field_list:CBlock.txs)
  return _impl_.txs_;
}

// string data = 8;
inline void CBlock::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CBlock::data() const {
  // @@protoc_insertion_point(field_get:CBlock.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.data)
}
inline std::string* CBlock::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CBlock.data)
  return _s;
}
inline const std::string& CBlock::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CBlock::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_data() {
  // @@protoc_insertion_point(field_release:CBlock.data)
  return _impl_.data_.Release();
}
inline void CBlock::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.data)
}

// string info = 9;
inline void CBlock::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& CBlock::info() const {
  // @@protoc_insertion_point(field_get:CBlock.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.info)
}
inline std::string* CBlock::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:CBlock.info)
  return _s;
}
inline const std::string& CBlock::_internal_info() const {
  return _impl_.info_.Get();
}
inline void CBlock::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_info() {
  // @@protoc_insertion_point(field_release:CBlock.info)
  return _impl_.info_.Release();
}
inline void CBlock::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.info)
}

// repeated .CSign sign = 10;
inline int CBlock::_internal_sign_size() const {
  return _impl_.sign_.size();
}
inline int CBlock::sign_size() const {
  return _internal_sign_size();
}
inline ::CSign* CBlock::mutable_sign(int index) {
  // @@protoc_insertion_point(field_mutable:CBlock.sign)
  return _impl_.sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >*
CBlock::mutable_sign() {
  // @@protoc_insertion_point(field_mutable_list:CBlock.sign)
  return &_impl_.sign_;
}
inline const ::CSign& CBlock::_internal_sign(int index) const {
  return _impl_.sign_.Get(index);
}
inline const ::CSign& CBlock::sign(int index) const {
  // @@protoc_insertion_point(field_get:CBlock.sign)
  return _internal_sign(index);
}
inline ::CSign* CBlock::_internal_add_sign() {
  return _impl_.sign_.Add();
}
inline ::CSign* CBlock::add_sign() {
  ::CSign* _add = _internal_add_sign();
  // @@protoc_insertion_point(field_add:CBlock.sign)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >&
CBlock::sign() const {
  // @@protoc_insertion_point(field_list:CBlock.sign)
  return _impl_.sign_;
}

// string reserve0 = 11;
inline void CBlock::clear_reserve0() {
  _impl_.reserve0_.ClearToEmpty();
}
inline const std::string& CBlock::reserve0() const {
  // @@protoc_insertion_point(field_get:CBlock.reserve0)
  return _internal_reserve0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_reserve0(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reserve0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.reserve0)
}
inline std::string* CBlock::mutable_reserve0() {
  std::string* _s = _internal_mutable_reserve0();
  // @@protoc_insertion_point(field_mutable:CBlock.reserve0)
  return _s;
}
inline const std::string& CBlock::_internal_reserve0() const {
  return _impl_.reserve0_.Get();
}
inline void CBlock::_internal_set_reserve0(const std::string& value) {
  
  _impl_.reserve0_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_reserve0() {
  
  return _impl_.reserve0_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_reserve0() {
  // @@protoc_insertion_point(field_release:CBlock.reserve0)
  return _impl_.reserve0_.Release();
}
inline void CBlock::set_allocated_reserve0(std::string* reserve0) {
  if (reserve0 != nullptr) {
    
  } else {
    
  }
  _impl_.reserve0_.SetAllocated(reserve0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserve0_.IsDefault()) {
    _impl_.reserve0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.reserve0)
}

// string reserve1 = 12;
inline void CBlock::clear_reserve1() {
  _impl_.reserve1_.ClearToEmpty();
}
inline const std::string& CBlock::reserve1() const {
  // @@protoc_insertion_point(field_get:CBlock.reserve1)
  return _internal_reserve1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_reserve1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reserve1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.reserve1)
}
inline std::string* CBlock::mutable_reserve1() {
  std::string* _s = _internal_mutable_reserve1();
  // @@protoc_insertion_point(field_mutable:CBlock.reserve1)
  return _s;
}
inline const std::string& CBlock::_internal_reserve1() const {
  return _impl_.reserve1_.Get();
}
inline void CBlock::_internal_set_reserve1(const std::string& value) {
  
  _impl_.reserve1_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_reserve1() {
  
  return _impl_.reserve1_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_reserve1() {
  // @@protoc_insertion_point(field_release:CBlock.reserve1)
  return _impl_.reserve1_.Release();
}
inline void CBlock::set_allocated_reserve1(std::string* reserve1) {
  if (reserve1 != nullptr) {
    
  } else {
    
  }
  _impl_.reserve1_.SetAllocated(reserve1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserve1_.IsDefault()) {
    _impl_.reserve1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.reserve1)
}

// -------------------------------------------------------------------

// BlockMsg

// uint64 nonce = 1;
inline void BlockMsg::clear_nonce() {
  _impl_.nonce_ = uint64_t{0u};
}
inline uint64_t BlockMsg::_internal_nonce() const {
  return _impl_.nonce_;
}
inline uint64_t BlockMsg::nonce() const {
  // @@protoc_insertion_point(field_get:BlockMsg.nonce)
  return _internal_nonce();
}
inline void BlockMsg::_internal_set_nonce(uint64_t value) {
  
  _impl_.nonce_ = value;
}
inline void BlockMsg::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:BlockMsg.nonce)
}

// string version = 2;
inline void BlockMsg::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& BlockMsg::version() const {
  // @@protoc_insertion_point(field_get:BlockMsg.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockMsg::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockMsg.version)
}
inline std::string* BlockMsg::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:BlockMsg.version)
  return _s;
}
inline const std::string& BlockMsg::_internal_version() const {
  return _impl_.version_.Get();
}
inline void BlockMsg::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockMsg::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockMsg::release_version() {
  // @@protoc_insertion_point(field_release:BlockMsg.version)
  return _impl_.version_.Release();
}
inline void BlockMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.version)
}

// sint32 code = 3;
inline void BlockMsg::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t BlockMsg::_internal_code() const {
  return _impl_.code_;
}
inline int32_t BlockMsg::code() const {
  // @@protoc_insertion_point(field_get:BlockMsg.code)
  return _internal_code();
}
inline void BlockMsg::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void BlockMsg::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BlockMsg.code)
}

// string message = 4;
inline void BlockMsg::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& BlockMsg::message() const {
  // @@protoc_insertion_point(field_get:BlockMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockMsg::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockMsg.message)
}
inline std::string* BlockMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:BlockMsg.message)
  return _s;
}
inline const std::string& BlockMsg::_internal_message() const {
  return _impl_.message_.Get();
}
inline void BlockMsg::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockMsg::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockMsg::release_message() {
  // @@protoc_insertion_point(field_release:BlockMsg.message)
  return _impl_.message_.Release();
}
inline void BlockMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.message)
}

// uint64 time = 5;
inline void BlockMsg::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t BlockMsg::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t BlockMsg::time() const {
  // @@protoc_insertion_point(field_get:BlockMsg.time)
  return _internal_time();
}
inline void BlockMsg::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void BlockMsg::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BlockMsg.time)
}

// bytes block = 6;
inline void BlockMsg::clear_block() {
  _impl_.block_.ClearToEmpty();
}
inline const std::string& BlockMsg::block() const {
  // @@protoc_insertion_point(field_get:BlockMsg.block)
  return _internal_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockMsg::set_block(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockMsg.block)
}
inline std::string* BlockMsg::mutable_block() {
  std::string* _s = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:BlockMsg.block)
  return _s;
}
inline const std::string& BlockMsg::_internal_block() const {
  return _impl_.block_.Get();
}
inline void BlockMsg::_internal_set_block(const std::string& value) {
  
  _impl_.block_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockMsg::_internal_mutable_block() {
  
  return _impl_.block_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockMsg::release_block() {
  // @@protoc_insertion_point(field_release:BlockMsg.block)
  return _impl_.block_.Release();
}
inline void BlockMsg::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  _impl_.block_.SetAllocated(block, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_.IsDefault()) {
    _impl_.block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.block)
}

// repeated .Vrf vrfInfo = 7;
inline int BlockMsg::_internal_vrfinfo_size() const {
  return _impl_.vrfinfo_.size();
}
inline int BlockMsg::vrfinfo_size() const {
  return _internal_vrfinfo_size();
}
inline ::Vrf* BlockMsg::mutable_vrfinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BlockMsg.vrfInfo)
  return _impl_.vrfinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
BlockMsg::mutable_vrfinfo() {
  // @@protoc_insertion_point(field_mutable_list:BlockMsg.vrfInfo)
  return &_impl_.vrfinfo_;
}
inline const ::Vrf& BlockMsg::_internal_vrfinfo(int index) const {
  return _impl_.vrfinfo_.Get(index);
}
inline const ::Vrf& BlockMsg::vrfinfo(int index) const {
  // @@protoc_insertion_point(field_get:BlockMsg.vrfInfo)
  return _internal_vrfinfo(index);
}
inline ::Vrf* BlockMsg::_internal_add_vrfinfo() {
  return _impl_.vrfinfo_.Add();
}
inline ::Vrf* BlockMsg::add_vrfinfo() {
  ::Vrf* _add = _internal_add_vrfinfo();
  // @@protoc_insertion_point(field_add:BlockMsg.vrfInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
BlockMsg::vrfinfo() const {
  // @@protoc_insertion_point(field_list:BlockMsg.vrfInfo)
  return _impl_.vrfinfo_;
}

// repeated .Vrf txvrfInfo = 8;
inline int BlockMsg::_internal_txvrfinfo_size() const {
  return _impl_.txvrfinfo_.size();
}
inline int BlockMsg::txvrfinfo_size() const {
  return _internal_txvrfinfo_size();
}
inline ::Vrf* BlockMsg::mutable_txvrfinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BlockMsg.txvrfInfo)
  return _impl_.txvrfinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
BlockMsg::mutable_txvrfinfo() {
  // @@protoc_insertion_point(field_mutable_list:BlockMsg.txvrfInfo)
  return &_impl_.txvrfinfo_;
}
inline const ::Vrf& BlockMsg::_internal_txvrfinfo(int index) const {
  return _impl_.txvrfinfo_.Get(index);
}
inline const ::Vrf& BlockMsg::txvrfinfo(int index) const {
  // @@protoc_insertion_point(field_get:BlockMsg.txvrfInfo)
  return _internal_txvrfinfo(index);
}
inline ::Vrf* BlockMsg::_internal_add_txvrfinfo() {
  return _impl_.txvrfinfo_.Add();
}
inline ::Vrf* BlockMsg::add_txvrfinfo() {
  ::Vrf* _add = _internal_add_txvrfinfo();
  // @@protoc_insertion_point(field_add:BlockMsg.txvrfInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
BlockMsg::txvrfinfo() const {
  // @@protoc_insertion_point(field_list:BlockMsg.txvrfInfo)
  return _impl_.txvrfinfo_;
}

// .CSign sign = 9;
inline bool BlockMsg::_internal_has_sign() const {
  return this != internal_default_instance() && _impl_.sign_ != nullptr;
}
inline bool BlockMsg::has_sign() const {
  return _internal_has_sign();
}
inline const ::CSign& BlockMsg::_internal_sign() const {
  const ::CSign* p = _impl_.sign_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSign&>(
      ::_CSign_default_instance_);
}
inline const ::CSign& BlockMsg::sign() const {
  // @@protoc_insertion_point(field_get:BlockMsg.sign)
  return _internal_sign();
}
inline void BlockMsg::unsafe_arena_set_allocated_sign(
    ::CSign* sign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sign_);
  }
  _impl_.sign_ = sign;
  if (sign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockMsg.sign)
}
inline ::CSign* BlockMsg::release_sign() {
  
  ::CSign* temp = _impl_.sign_;
  _impl_.sign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSign* BlockMsg::unsafe_arena_release_sign() {
  // @@protoc_insertion_point(field_release:BlockMsg.sign)
  
  ::CSign* temp = _impl_.sign_;
  _impl_.sign_ = nullptr;
  return temp;
}
inline ::CSign* BlockMsg::_internal_mutable_sign() {
  
  if (_impl_.sign_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSign>(GetArenaForAllocation());
    _impl_.sign_ = p;
  }
  return _impl_.sign_;
}
inline ::CSign* BlockMsg::mutable_sign() {
  ::CSign* _msg = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:BlockMsg.sign)
  return _msg;
}
inline void BlockMsg::set_allocated_sign(::CSign* sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sign_);
  }
  if (sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sign));
    if (message_arena != submessage_arena) {
      sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sign_ = sign;
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.sign)
}

// -------------------------------------------------------------------

// TxStatus

// string txHash = 1;
inline void TxStatus::clear_txhash() {
  _impl_.txhash_.ClearToEmpty();
}
inline const std::string& TxStatus::txhash() const {
  // @@protoc_insertion_point(field_get:TxStatus.txHash)
  return _internal_txhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxStatus::set_txhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.txhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TxStatus.txHash)
}
inline std::string* TxStatus::mutable_txhash() {
  std::string* _s = _internal_mutable_txhash();
  // @@protoc_insertion_point(field_mutable:TxStatus.txHash)
  return _s;
}
inline const std::string& TxStatus::_internal_txhash() const {
  return _impl_.txhash_.Get();
}
inline void TxStatus::_internal_set_txhash(const std::string& value) {
  
  _impl_.txhash_.Set(value, GetArenaForAllocation());
}
inline std::string* TxStatus::_internal_mutable_txhash() {
  
  return _impl_.txhash_.Mutable(GetArenaForAllocation());
}
inline std::string* TxStatus::release_txhash() {
  // @@protoc_insertion_point(field_release:TxStatus.txHash)
  return _impl_.txhash_.Release();
}
inline void TxStatus::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  _impl_.txhash_.SetAllocated(txhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.txhash_.IsDefault()) {
    _impl_.txhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TxStatus.txHash)
}

// int32 status = 2;
inline void TxStatus::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t TxStatus::_internal_status() const {
  return _impl_.status_;
}
inline int32_t TxStatus::status() const {
  // @@protoc_insertion_point(field_get:TxStatus.status)
  return _internal_status();
}
inline void TxStatus::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void TxStatus::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:TxStatus.status)
}

// -------------------------------------------------------------------

// BlockStatus

// string blockHash = 1;
inline void BlockStatus::clear_blockhash() {
  _impl_.blockhash_.ClearToEmpty();
}
inline const std::string& BlockStatus::blockhash() const {
  // @@protoc_insertion_point(field_get:BlockStatus.blockHash)
  return _internal_blockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockStatus::set_blockhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blockhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockStatus.blockHash)
}
inline std::string* BlockStatus::mutable_blockhash() {
  std::string* _s = _internal_mutable_blockhash();
  // @@protoc_insertion_point(field_mutable:BlockStatus.blockHash)
  return _s;
}
inline const std::string& BlockStatus::_internal_blockhash() const {
  return _impl_.blockhash_.Get();
}
inline void BlockStatus::_internal_set_blockhash(const std::string& value) {
  
  _impl_.blockhash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockStatus::_internal_mutable_blockhash() {
  
  return _impl_.blockhash_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockStatus::release_blockhash() {
  // @@protoc_insertion_point(field_release:BlockStatus.blockHash)
  return _impl_.blockhash_.Release();
}
inline void BlockStatus::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  _impl_.blockhash_.SetAllocated(blockhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blockhash_.IsDefault()) {
    _impl_.blockhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockStatus.blockHash)
}

// int32 status = 2;
inline void BlockStatus::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t BlockStatus::_internal_status() const {
  return _impl_.status_;
}
inline int32_t BlockStatus::status() const {
  // @@protoc_insertion_point(field_get:BlockStatus.status)
  return _internal_status();
}
inline void BlockStatus::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void BlockStatus::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BlockStatus.status)
}

// repeated .TxStatus txStatus = 3;
inline int BlockStatus::_internal_txstatus_size() const {
  return _impl_.txstatus_.size();
}
inline int BlockStatus::txstatus_size() const {
  return _internal_txstatus_size();
}
inline void BlockStatus::clear_txstatus() {
  _impl_.txstatus_.Clear();
}
inline ::TxStatus* BlockStatus::mutable_txstatus(int index) {
  // @@protoc_insertion_point(field_mutable:BlockStatus.txStatus)
  return _impl_.txstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxStatus >*
BlockStatus::mutable_txstatus() {
  // @@protoc_insertion_point(field_mutable_list:BlockStatus.txStatus)
  return &_impl_.txstatus_;
}
inline const ::TxStatus& BlockStatus::_internal_txstatus(int index) const {
  return _impl_.txstatus_.Get(index);
}
inline const ::TxStatus& BlockStatus::txstatus(int index) const {
  // @@protoc_insertion_point(field_get:BlockStatus.txStatus)
  return _internal_txstatus(index);
}
inline ::TxStatus* BlockStatus::_internal_add_txstatus() {
  return _impl_.txstatus_.Add();
}
inline ::TxStatus* BlockStatus::add_txstatus() {
  ::TxStatus* _add = _internal_add_txstatus();
  // @@protoc_insertion_point(field_add:BlockStatus.txStatus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxStatus >&
BlockStatus::txstatus() const {
  // @@protoc_insertion_point(field_list:BlockStatus.txStatus)
  return _impl_.txstatus_;
}

// string id = 4;
inline void BlockStatus::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BlockStatus::id() const {
  // @@protoc_insertion_point(field_get:BlockStatus.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockStatus::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockStatus.id)
}
inline std::string* BlockStatus::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:BlockStatus.id)
  return _s;
}
inline const std::string& BlockStatus::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BlockStatus::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockStatus::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockStatus::release_id() {
  // @@protoc_insertion_point(field_release:BlockStatus.id)
  return _impl_.id_.Release();
}
inline void BlockStatus::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockStatus.id)
}

// -------------------------------------------------------------------

// SeekPreHashByHightReq

// string self_node_id = 1;
inline void SeekPreHashByHightReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SeekPreHashByHightReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekPreHashByHightReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SeekPreHashByHightReq.self_node_id)
}
inline std::string* SeekPreHashByHightReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SeekPreHashByHightReq.self_node_id)
  return _s;
}
inline const std::string& SeekPreHashByHightReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SeekPreHashByHightReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SeekPreHashByHightReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SeekPreHashByHightReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SeekPreHashByHightReq.self_node_id)
}

// string msg_id = 2;
inline void SeekPreHashByHightReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SeekPreHashByHightReq::msg_id() const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekPreHashByHightReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SeekPreHashByHightReq.msg_id)
}
inline std::string* SeekPreHashByHightReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SeekPreHashByHightReq.msg_id)
  return _s;
}
inline const std::string& SeekPreHashByHightReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SeekPreHashByHightReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:SeekPreHashByHightReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SeekPreHashByHightReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SeekPreHashByHightReq.msg_id)
}

// uint64 seek_height = 3;
inline void SeekPreHashByHightReq::clear_seek_height() {
  _impl_.seek_height_ = uint64_t{0u};
}
inline uint64_t SeekPreHashByHightReq::_internal_seek_height() const {
  return _impl_.seek_height_;
}
inline uint64_t SeekPreHashByHightReq::seek_height() const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightReq.seek_height)
  return _internal_seek_height();
}
inline void SeekPreHashByHightReq::_internal_set_seek_height(uint64_t value) {
  
  _impl_.seek_height_ = value;
}
inline void SeekPreHashByHightReq::set_seek_height(uint64_t value) {
  _internal_set_seek_height(value);
  // @@protoc_insertion_point(field_set:SeekPreHashByHightReq.seek_height)
}

// -------------------------------------------------------------------

// SeekPreHashByHightAck

// string self_node_id = 1;
inline void SeekPreHashByHightAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& SeekPreHashByHightAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekPreHashByHightAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SeekPreHashByHightAck.self_node_id)
}
inline std::string* SeekPreHashByHightAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:SeekPreHashByHightAck.self_node_id)
  return _s;
}
inline const std::string& SeekPreHashByHightAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void SeekPreHashByHightAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:SeekPreHashByHightAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void SeekPreHashByHightAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SeekPreHashByHightAck.self_node_id)
}

// string msg_id = 2;
inline void SeekPreHashByHightAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& SeekPreHashByHightAck::msg_id() const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekPreHashByHightAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SeekPreHashByHightAck.msg_id)
}
inline std::string* SeekPreHashByHightAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:SeekPreHashByHightAck.msg_id)
  return _s;
}
inline const std::string& SeekPreHashByHightAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void SeekPreHashByHightAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekPreHashByHightAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:SeekPreHashByHightAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void SeekPreHashByHightAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SeekPreHashByHightAck.msg_id)
}

// uint64 seek_height = 3;
inline void SeekPreHashByHightAck::clear_seek_height() {
  _impl_.seek_height_ = uint64_t{0u};
}
inline uint64_t SeekPreHashByHightAck::_internal_seek_height() const {
  return _impl_.seek_height_;
}
inline uint64_t SeekPreHashByHightAck::seek_height() const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightAck.seek_height)
  return _internal_seek_height();
}
inline void SeekPreHashByHightAck::_internal_set_seek_height(uint64_t value) {
  
  _impl_.seek_height_ = value;
}
inline void SeekPreHashByHightAck::set_seek_height(uint64_t value) {
  _internal_set_seek_height(value);
  // @@protoc_insertion_point(field_set:SeekPreHashByHightAck.seek_height)
}

// repeated string prehashes = 4;
inline int SeekPreHashByHightAck::_internal_prehashes_size() const {
  return _impl_.prehashes_.size();
}
inline int SeekPreHashByHightAck::prehashes_size() const {
  return _internal_prehashes_size();
}
inline void SeekPreHashByHightAck::clear_prehashes() {
  _impl_.prehashes_.Clear();
}
inline std::string* SeekPreHashByHightAck::add_prehashes() {
  std::string* _s = _internal_add_prehashes();
  // @@protoc_insertion_point(field_add_mutable:SeekPreHashByHightAck.prehashes)
  return _s;
}
inline const std::string& SeekPreHashByHightAck::_internal_prehashes(int index) const {
  return _impl_.prehashes_.Get(index);
}
inline const std::string& SeekPreHashByHightAck::prehashes(int index) const {
  // @@protoc_insertion_point(field_get:SeekPreHashByHightAck.prehashes)
  return _internal_prehashes(index);
}
inline std::string* SeekPreHashByHightAck::mutable_prehashes(int index) {
  // @@protoc_insertion_point(field_mutable:SeekPreHashByHightAck.prehashes)
  return _impl_.prehashes_.Mutable(index);
}
inline void SeekPreHashByHightAck::set_prehashes(int index, const std::string& value) {
  _impl_.prehashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SeekPreHashByHightAck.prehashes)
}
inline void SeekPreHashByHightAck::set_prehashes(int index, std::string&& value) {
  _impl_.prehashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SeekPreHashByHightAck.prehashes)
}
inline void SeekPreHashByHightAck::set_prehashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prehashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SeekPreHashByHightAck.prehashes)
}
inline void SeekPreHashByHightAck::set_prehashes(int index, const char* value, size_t size) {
  _impl_.prehashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SeekPreHashByHightAck.prehashes)
}
inline std::string* SeekPreHashByHightAck::_internal_add_prehashes() {
  return _impl_.prehashes_.Add();
}
inline void SeekPreHashByHightAck::add_prehashes(const std::string& value) {
  _impl_.prehashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SeekPreHashByHightAck.prehashes)
}
inline void SeekPreHashByHightAck::add_prehashes(std::string&& value) {
  _impl_.prehashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SeekPreHashByHightAck.prehashes)
}
inline void SeekPreHashByHightAck::add_prehashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prehashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SeekPreHashByHightAck.prehashes)
}
inline void SeekPreHashByHightAck::add_prehashes(const char* value, size_t size) {
  _impl_.prehashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SeekPreHashByHightAck.prehashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SeekPreHashByHightAck::prehashes() const {
  // @@protoc_insertion_point(field_list:SeekPreHashByHightAck.prehashes)
  return _impl_.prehashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SeekPreHashByHightAck::mutable_prehashes() {
  // @@protoc_insertion_point(field_mutable_list:SeekPreHashByHightAck.prehashes)
  return &_impl_.prehashes_;
}

// -------------------------------------------------------------------

// preHashPair

// string ContractAddr = 1;
inline void preHashPair::clear_contractaddr() {
  _impl_.contractaddr_.ClearToEmpty();
}
inline const std::string& preHashPair::contractaddr() const {
  // @@protoc_insertion_point(field_get:preHashPair.ContractAddr)
  return _internal_contractaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void preHashPair::set_contractaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contractaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:preHashPair.ContractAddr)
}
inline std::string* preHashPair::mutable_contractaddr() {
  std::string* _s = _internal_mutable_contractaddr();
  // @@protoc_insertion_point(field_mutable:preHashPair.ContractAddr)
  return _s;
}
inline const std::string& preHashPair::_internal_contractaddr() const {
  return _impl_.contractaddr_.Get();
}
inline void preHashPair::_internal_set_contractaddr(const std::string& value) {
  
  _impl_.contractaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* preHashPair::_internal_mutable_contractaddr() {
  
  return _impl_.contractaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* preHashPair::release_contractaddr() {
  // @@protoc_insertion_point(field_release:preHashPair.ContractAddr)
  return _impl_.contractaddr_.Release();
}
inline void preHashPair::set_allocated_contractaddr(std::string* contractaddr) {
  if (contractaddr != nullptr) {
    
  } else {
    
  }
  _impl_.contractaddr_.SetAllocated(contractaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contractaddr_.IsDefault()) {
    _impl_.contractaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:preHashPair.ContractAddr)
}

// string RootHash = 2;
inline void preHashPair::clear_roothash() {
  _impl_.roothash_.ClearToEmpty();
}
inline const std::string& preHashPair::roothash() const {
  // @@protoc_insertion_point(field_get:preHashPair.RootHash)
  return _internal_roothash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void preHashPair::set_roothash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roothash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:preHashPair.RootHash)
}
inline std::string* preHashPair::mutable_roothash() {
  std::string* _s = _internal_mutable_roothash();
  // @@protoc_insertion_point(field_mutable:preHashPair.RootHash)
  return _s;
}
inline const std::string& preHashPair::_internal_roothash() const {
  return _impl_.roothash_.Get();
}
inline void preHashPair::_internal_set_roothash(const std::string& value) {
  
  _impl_.roothash_.Set(value, GetArenaForAllocation());
}
inline std::string* preHashPair::_internal_mutable_roothash() {
  
  return _impl_.roothash_.Mutable(GetArenaForAllocation());
}
inline std::string* preHashPair::release_roothash() {
  // @@protoc_insertion_point(field_release:preHashPair.RootHash)
  return _impl_.roothash_.Release();
}
inline void preHashPair::set_allocated_roothash(std::string* roothash) {
  if (roothash != nullptr) {
    
  } else {
    
  }
  _impl_.roothash_.SetAllocated(roothash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roothash_.IsDefault()) {
    _impl_.roothash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:preHashPair.RootHash)
}

// bytes blockRaw = 3;
inline void preHashPair::clear_blockraw() {
  _impl_.blockraw_.ClearToEmpty();
}
inline const std::string& preHashPair::blockraw() const {
  // @@protoc_insertion_point(field_get:preHashPair.blockRaw)
  return _internal_blockraw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void preHashPair::set_blockraw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blockraw_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:preHashPair.blockRaw)
}
inline std::string* preHashPair::mutable_blockraw() {
  std::string* _s = _internal_mutable_blockraw();
  // @@protoc_insertion_point(field_mutable:preHashPair.blockRaw)
  return _s;
}
inline const std::string& preHashPair::_internal_blockraw() const {
  return _impl_.blockraw_.Get();
}
inline void preHashPair::_internal_set_blockraw(const std::string& value) {
  
  _impl_.blockraw_.Set(value, GetArenaForAllocation());
}
inline std::string* preHashPair::_internal_mutable_blockraw() {
  
  return _impl_.blockraw_.Mutable(GetArenaForAllocation());
}
inline std::string* preHashPair::release_blockraw() {
  // @@protoc_insertion_point(field_release:preHashPair.blockRaw)
  return _impl_.blockraw_.Release();
}
inline void preHashPair::set_allocated_blockraw(std::string* blockraw) {
  if (blockraw != nullptr) {
    
  } else {
    
  }
  _impl_.blockraw_.SetAllocated(blockraw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blockraw_.IsDefault()) {
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:preHashPair.blockRaw)
}

// -------------------------------------------------------------------

// newSeekContractPreHashReq

// string version = 1;
inline void newSeekContractPreHashReq::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& newSeekContractPreHashReq::version() const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashReq.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newSeekContractPreHashReq::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:newSeekContractPreHashReq.version)
}
inline std::string* newSeekContractPreHashReq::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashReq.version)
  return _s;
}
inline const std::string& newSeekContractPreHashReq::_internal_version() const {
  return _impl_.version_.Get();
}
inline void newSeekContractPreHashReq::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashReq::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashReq::release_version() {
  // @@protoc_insertion_point(field_release:newSeekContractPreHashReq.version)
  return _impl_.version_.Release();
}
inline void newSeekContractPreHashReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:newSeekContractPreHashReq.version)
}

// string msg_id = 2;
inline void newSeekContractPreHashReq::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& newSeekContractPreHashReq::msg_id() const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashReq.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newSeekContractPreHashReq::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:newSeekContractPreHashReq.msg_id)
}
inline std::string* newSeekContractPreHashReq::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashReq.msg_id)
  return _s;
}
inline const std::string& newSeekContractPreHashReq::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void newSeekContractPreHashReq::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashReq::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashReq::release_msg_id() {
  // @@protoc_insertion_point(field_release:newSeekContractPreHashReq.msg_id)
  return _impl_.msg_id_.Release();
}
inline void newSeekContractPreHashReq::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:newSeekContractPreHashReq.msg_id)
}

// string self_node_id = 3;
inline void newSeekContractPreHashReq::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& newSeekContractPreHashReq::self_node_id() const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashReq.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newSeekContractPreHashReq::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:newSeekContractPreHashReq.self_node_id)
}
inline std::string* newSeekContractPreHashReq::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashReq.self_node_id)
  return _s;
}
inline const std::string& newSeekContractPreHashReq::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void newSeekContractPreHashReq::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashReq::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashReq::release_self_node_id() {
  // @@protoc_insertion_point(field_release:newSeekContractPreHashReq.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void newSeekContractPreHashReq::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:newSeekContractPreHashReq.self_node_id)
}

// repeated .preHashPair seekRootHash = 4;
inline int newSeekContractPreHashReq::_internal_seekroothash_size() const {
  return _impl_.seekroothash_.size();
}
inline int newSeekContractPreHashReq::seekroothash_size() const {
  return _internal_seekroothash_size();
}
inline void newSeekContractPreHashReq::clear_seekroothash() {
  _impl_.seekroothash_.Clear();
}
inline ::preHashPair* newSeekContractPreHashReq::mutable_seekroothash(int index) {
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashReq.seekRootHash)
  return _impl_.seekroothash_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >*
newSeekContractPreHashReq::mutable_seekroothash() {
  // @@protoc_insertion_point(field_mutable_list:newSeekContractPreHashReq.seekRootHash)
  return &_impl_.seekroothash_;
}
inline const ::preHashPair& newSeekContractPreHashReq::_internal_seekroothash(int index) const {
  return _impl_.seekroothash_.Get(index);
}
inline const ::preHashPair& newSeekContractPreHashReq::seekroothash(int index) const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashReq.seekRootHash)
  return _internal_seekroothash(index);
}
inline ::preHashPair* newSeekContractPreHashReq::_internal_add_seekroothash() {
  return _impl_.seekroothash_.Add();
}
inline ::preHashPair* newSeekContractPreHashReq::add_seekroothash() {
  ::preHashPair* _add = _internal_add_seekroothash();
  // @@protoc_insertion_point(field_add:newSeekContractPreHashReq.seekRootHash)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >&
newSeekContractPreHashReq::seekroothash() const {
  // @@protoc_insertion_point(field_list:newSeekContractPreHashReq.seekRootHash)
  return _impl_.seekroothash_;
}

// -------------------------------------------------------------------

// newSeekContractPreHashAck

// string version = 1;
inline void newSeekContractPreHashAck::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& newSeekContractPreHashAck::version() const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashAck.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newSeekContractPreHashAck::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:newSeekContractPreHashAck.version)
}
inline std::string* newSeekContractPreHashAck::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashAck.version)
  return _s;
}
inline const std::string& newSeekContractPreHashAck::_internal_version() const {
  return _impl_.version_.Get();
}
inline void newSeekContractPreHashAck::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashAck::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashAck::release_version() {
  // @@protoc_insertion_point(field_release:newSeekContractPreHashAck.version)
  return _impl_.version_.Release();
}
inline void newSeekContractPreHashAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:newSeekContractPreHashAck.version)
}

// string msg_id = 2;
inline void newSeekContractPreHashAck::clear_msg_id() {
  _impl_.msg_id_.ClearToEmpty();
}
inline const std::string& newSeekContractPreHashAck::msg_id() const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashAck.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newSeekContractPreHashAck::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:newSeekContractPreHashAck.msg_id)
}
inline std::string* newSeekContractPreHashAck::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashAck.msg_id)
  return _s;
}
inline const std::string& newSeekContractPreHashAck::_internal_msg_id() const {
  return _impl_.msg_id_.Get();
}
inline void newSeekContractPreHashAck::_internal_set_msg_id(const std::string& value) {
  
  _impl_.msg_id_.Set(value, GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashAck::_internal_mutable_msg_id() {
  
  return _impl_.msg_id_.Mutable(GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashAck::release_msg_id() {
  // @@protoc_insertion_point(field_release:newSeekContractPreHashAck.msg_id)
  return _impl_.msg_id_.Release();
}
inline void newSeekContractPreHashAck::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  _impl_.msg_id_.SetAllocated(msg_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_id_.IsDefault()) {
    _impl_.msg_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:newSeekContractPreHashAck.msg_id)
}

// string self_node_id = 3;
inline void newSeekContractPreHashAck::clear_self_node_id() {
  _impl_.self_node_id_.ClearToEmpty();
}
inline const std::string& newSeekContractPreHashAck::self_node_id() const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashAck.self_node_id)
  return _internal_self_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newSeekContractPreHashAck::set_self_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:newSeekContractPreHashAck.self_node_id)
}
inline std::string* newSeekContractPreHashAck::mutable_self_node_id() {
  std::string* _s = _internal_mutable_self_node_id();
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashAck.self_node_id)
  return _s;
}
inline const std::string& newSeekContractPreHashAck::_internal_self_node_id() const {
  return _impl_.self_node_id_.Get();
}
inline void newSeekContractPreHashAck::_internal_set_self_node_id(const std::string& value) {
  
  _impl_.self_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashAck::_internal_mutable_self_node_id() {
  
  return _impl_.self_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* newSeekContractPreHashAck::release_self_node_id() {
  // @@protoc_insertion_point(field_release:newSeekContractPreHashAck.self_node_id)
  return _impl_.self_node_id_.Release();
}
inline void newSeekContractPreHashAck::set_allocated_self_node_id(std::string* self_node_id) {
  if (self_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.self_node_id_.SetAllocated(self_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_node_id_.IsDefault()) {
    _impl_.self_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:newSeekContractPreHashAck.self_node_id)
}

// repeated .preHashPair seekContractBlock = 4;
inline int newSeekContractPreHashAck::_internal_seekcontractblock_size() const {
  return _impl_.seekcontractblock_.size();
}
inline int newSeekContractPreHashAck::seekcontractblock_size() const {
  return _internal_seekcontractblock_size();
}
inline void newSeekContractPreHashAck::clear_seekcontractblock() {
  _impl_.seekcontractblock_.Clear();
}
inline ::preHashPair* newSeekContractPreHashAck::mutable_seekcontractblock(int index) {
  // @@protoc_insertion_point(field_mutable:newSeekContractPreHashAck.seekContractBlock)
  return _impl_.seekcontractblock_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >*
newSeekContractPreHashAck::mutable_seekcontractblock() {
  // @@protoc_insertion_point(field_mutable_list:newSeekContractPreHashAck.seekContractBlock)
  return &_impl_.seekcontractblock_;
}
inline const ::preHashPair& newSeekContractPreHashAck::_internal_seekcontractblock(int index) const {
  return _impl_.seekcontractblock_.Get(index);
}
inline const ::preHashPair& newSeekContractPreHashAck::seekcontractblock(int index) const {
  // @@protoc_insertion_point(field_get:newSeekContractPreHashAck.seekContractBlock)
  return _internal_seekcontractblock(index);
}
inline ::preHashPair* newSeekContractPreHashAck::_internal_add_seekcontractblock() {
  return _impl_.seekcontractblock_.Add();
}
inline ::preHashPair* newSeekContractPreHashAck::add_seekcontractblock() {
  ::preHashPair* _add = _internal_add_seekcontractblock();
  // @@protoc_insertion_point(field_add:newSeekContractPreHashAck.seekContractBlock)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::preHashPair >&
newSeekContractPreHashAck::seekcontractblock() const {
  // @@protoc_insertion_point(field_list:newSeekContractPreHashAck.seekContractBlock)
  return _impl_.seekcontractblock_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
