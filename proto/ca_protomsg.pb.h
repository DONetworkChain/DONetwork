// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_protomsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ca_5fprotomsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ca_5fprotomsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sign.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ca_5fprotomsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ca_5fprotomsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ca_5fprotomsg_2eproto;
class BuildBlockBroadcastMsg;
struct BuildBlockBroadcastMsgDefaultTypeInternal;
extern BuildBlockBroadcastMsgDefaultTypeInternal _BuildBlockBroadcastMsg_default_instance_;
class ContractPackagerMsg;
struct ContractPackagerMsgDefaultTypeInternal;
extern ContractPackagerMsgDefaultTypeInternal _ContractPackagerMsg_default_instance_;
class ContractTxMsgReq;
struct ContractTxMsgReqDefaultTypeInternal;
extern ContractTxMsgReqDefaultTypeInternal _ContractTxMsgReq_default_instance_;
class SignNodeMsg;
struct SignNodeMsgDefaultTypeInternal;
extern SignNodeMsgDefaultTypeInternal _SignNodeMsg_default_instance_;
class TxMsgAck;
struct TxMsgAckDefaultTypeInternal;
extern TxMsgAckDefaultTypeInternal _TxMsgAck_default_instance_;
class TxMsgInfo;
struct TxMsgInfoDefaultTypeInternal;
extern TxMsgInfoDefaultTypeInternal _TxMsgInfo_default_instance_;
class TxMsgReq;
struct TxMsgReqDefaultTypeInternal;
extern TxMsgReqDefaultTypeInternal _TxMsgReq_default_instance_;
class Vrf;
struct VrfDefaultTypeInternal;
extern VrfDefaultTypeInternal _Vrf_default_instance_;
class VrfData;
struct VrfDataDefaultTypeInternal;
extern VrfDataDefaultTypeInternal _VrfData_default_instance_;
class VrfDataSource;
struct VrfDataSourceDefaultTypeInternal;
extern VrfDataSourceDefaultTypeInternal _VrfDataSource_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BuildBlockBroadcastMsg* Arena::CreateMaybeMessage<::BuildBlockBroadcastMsg>(Arena*);
template<> ::ContractPackagerMsg* Arena::CreateMaybeMessage<::ContractPackagerMsg>(Arena*);
template<> ::ContractTxMsgReq* Arena::CreateMaybeMessage<::ContractTxMsgReq>(Arena*);
template<> ::SignNodeMsg* Arena::CreateMaybeMessage<::SignNodeMsg>(Arena*);
template<> ::TxMsgAck* Arena::CreateMaybeMessage<::TxMsgAck>(Arena*);
template<> ::TxMsgInfo* Arena::CreateMaybeMessage<::TxMsgInfo>(Arena*);
template<> ::TxMsgReq* Arena::CreateMaybeMessage<::TxMsgReq>(Arena*);
template<> ::Vrf* Arena::CreateMaybeMessage<::Vrf>(Arena*);
template<> ::VrfData* Arena::CreateMaybeMessage<::VrfData>(Arena*);
template<> ::VrfDataSource* Arena::CreateMaybeMessage<::VrfDataSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SignNodeMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SignNodeMsg) */ {
 public:
  inline SignNodeMsg() : SignNodeMsg(nullptr) {}
  ~SignNodeMsg() override;
  explicit PROTOBUF_CONSTEXPR SignNodeMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignNodeMsg(const SignNodeMsg& from);
  SignNodeMsg(SignNodeMsg&& from) noexcept
    : SignNodeMsg() {
    *this = ::std::move(from);
  }

  inline SignNodeMsg& operator=(const SignNodeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignNodeMsg& operator=(SignNodeMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignNodeMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignNodeMsg* internal_default_instance() {
    return reinterpret_cast<const SignNodeMsg*>(
               &_SignNodeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignNodeMsg& a, SignNodeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SignNodeMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignNodeMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignNodeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignNodeMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignNodeMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignNodeMsg& from) {
    SignNodeMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignNodeMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SignNodeMsg";
  }
  protected:
  explicit SignNodeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignFieldNumber = 2,
    kPubFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes sign = 2;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bytes pub = 3;
  void clear_pub();
  const std::string& pub() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pub(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pub();
  PROTOBUF_NODISCARD std::string* release_pub();
  void set_allocated_pub(std::string* pub);
  private:
  const std::string& _internal_pub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pub(const std::string& value);
  std::string* _internal_mutable_pub();
  public:

  // @@protoc_insertion_point(class_scope:SignNodeMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class TxMsgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxMsgInfo) */ {
 public:
  inline TxMsgInfo() : TxMsgInfo(nullptr) {}
  ~TxMsgInfo() override;
  explicit PROTOBUF_CONSTEXPR TxMsgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxMsgInfo(const TxMsgInfo& from);
  TxMsgInfo(TxMsgInfo&& from) noexcept
    : TxMsgInfo() {
    *this = ::std::move(from);
  }

  inline TxMsgInfo& operator=(const TxMsgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgInfo& operator=(TxMsgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxMsgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMsgInfo* internal_default_instance() {
    return reinterpret_cast<const TxMsgInfo*>(
               &_TxMsgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxMsgInfo& a, TxMsgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsgInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMsgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxMsgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxMsgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxMsgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxMsgInfo& from) {
    TxMsgInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsgInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxMsgInfo";
  }
  protected:
  explicit TxMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractStorageListFieldNumber = 5,
    kTxFieldNumber = 2,
    kNodeHeightFieldNumber = 3,
    kTxUtxoHeightFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // repeated string contractStorageList = 5;
  int contractstoragelist_size() const;
  private:
  int _internal_contractstoragelist_size() const;
  public:
  void clear_contractstoragelist();
  const std::string& contractstoragelist(int index) const;
  std::string* mutable_contractstoragelist(int index);
  void set_contractstoragelist(int index, const std::string& value);
  void set_contractstoragelist(int index, std::string&& value);
  void set_contractstoragelist(int index, const char* value);
  void set_contractstoragelist(int index, const char* value, size_t size);
  std::string* add_contractstoragelist();
  void add_contractstoragelist(const std::string& value);
  void add_contractstoragelist(std::string&& value);
  void add_contractstoragelist(const char* value);
  void add_contractstoragelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contractstoragelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contractstoragelist();
  private:
  const std::string& _internal_contractstoragelist(int index) const;
  std::string* _internal_add_contractstoragelist();
  public:

  // bytes tx = 2;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // uint64 nodeHeight = 3;
  void clear_nodeheight();
  uint64_t nodeheight() const;
  void set_nodeheight(uint64_t value);
  private:
  uint64_t _internal_nodeheight() const;
  void _internal_set_nodeheight(uint64_t value);
  public:

  // uint64 txUtxoHeight = 4;
  void clear_txutxoheight();
  uint64_t txutxoheight() const;
  void set_txutxoheight(uint64_t value);
  private:
  uint64_t _internal_txutxoheight() const;
  void _internal_set_txutxoheight(uint64_t value);
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TxMsgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contractstoragelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    uint64_t nodeheight_;
    uint64_t txutxoheight_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class TxMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxMsgReq) */ {
 public:
  inline TxMsgReq() : TxMsgReq(nullptr) {}
  ~TxMsgReq() override;
  explicit PROTOBUF_CONSTEXPR TxMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxMsgReq(const TxMsgReq& from);
  TxMsgReq(TxMsgReq&& from) noexcept
    : TxMsgReq() {
    *this = ::std::move(from);
  }

  inline TxMsgReq& operator=(const TxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgReq& operator=(TxMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMsgReq* internal_default_instance() {
    return reinterpret_cast<const TxMsgReq*>(
               &_TxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TxMsgReq& a, TxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxMsgReq& from) {
    TxMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxMsgReq";
  }
  protected:
  explicit TxMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignNodeMsgFieldNumber = 5,
    kPrevBlkHashsFieldNumber = 6,
    kVersionFieldNumber = 1,
    kTxMsgInfoFieldNumber = 2,
    kVrfInfoFieldNumber = 3,
    kTxvrfInfoFieldNumber = 4,
  };
  // repeated .SignNodeMsg signNodeMsg = 5;
  int signnodemsg_size() const;
  private:
  int _internal_signnodemsg_size() const;
  public:
  void clear_signnodemsg();
  ::SignNodeMsg* mutable_signnodemsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >*
      mutable_signnodemsg();
  private:
  const ::SignNodeMsg& _internal_signnodemsg(int index) const;
  ::SignNodeMsg* _internal_add_signnodemsg();
  public:
  const ::SignNodeMsg& signnodemsg(int index) const;
  ::SignNodeMsg* add_signnodemsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >&
      signnodemsg() const;

  // repeated string prevBlkHashs = 6;
  int prevblkhashs_size() const;
  private:
  int _internal_prevblkhashs_size() const;
  public:
  void clear_prevblkhashs();
  const std::string& prevblkhashs(int index) const;
  std::string* mutable_prevblkhashs(int index);
  void set_prevblkhashs(int index, const std::string& value);
  void set_prevblkhashs(int index, std::string&& value);
  void set_prevblkhashs(int index, const char* value);
  void set_prevblkhashs(int index, const char* value, size_t size);
  std::string* add_prevblkhashs();
  void add_prevblkhashs(const std::string& value);
  void add_prevblkhashs(std::string&& value);
  void add_prevblkhashs(const char* value);
  void add_prevblkhashs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prevblkhashs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prevblkhashs();
  private:
  const std::string& _internal_prevblkhashs(int index) const;
  std::string* _internal_add_prevblkhashs();
  public:

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .TxMsgInfo txMsgInfo = 2;
  bool has_txmsginfo() const;
  private:
  bool _internal_has_txmsginfo() const;
  public:
  void clear_txmsginfo();
  const ::TxMsgInfo& txmsginfo() const;
  PROTOBUF_NODISCARD ::TxMsgInfo* release_txmsginfo();
  ::TxMsgInfo* mutable_txmsginfo();
  void set_allocated_txmsginfo(::TxMsgInfo* txmsginfo);
  private:
  const ::TxMsgInfo& _internal_txmsginfo() const;
  ::TxMsgInfo* _internal_mutable_txmsginfo();
  public:
  void unsafe_arena_set_allocated_txmsginfo(
      ::TxMsgInfo* txmsginfo);
  ::TxMsgInfo* unsafe_arena_release_txmsginfo();

  // .Vrf vrfInfo = 3;
  bool has_vrfinfo() const;
  private:
  bool _internal_has_vrfinfo() const;
  public:
  void clear_vrfinfo();
  const ::Vrf& vrfinfo() const;
  PROTOBUF_NODISCARD ::Vrf* release_vrfinfo();
  ::Vrf* mutable_vrfinfo();
  void set_allocated_vrfinfo(::Vrf* vrfinfo);
  private:
  const ::Vrf& _internal_vrfinfo() const;
  ::Vrf* _internal_mutable_vrfinfo();
  public:
  void unsafe_arena_set_allocated_vrfinfo(
      ::Vrf* vrfinfo);
  ::Vrf* unsafe_arena_release_vrfinfo();

  // .Vrf txvrfInfo = 4;
  bool has_txvrfinfo() const;
  private:
  bool _internal_has_txvrfinfo() const;
  public:
  void clear_txvrfinfo();
  const ::Vrf& txvrfinfo() const;
  PROTOBUF_NODISCARD ::Vrf* release_txvrfinfo();
  ::Vrf* mutable_txvrfinfo();
  void set_allocated_txvrfinfo(::Vrf* txvrfinfo);
  private:
  const ::Vrf& _internal_txvrfinfo() const;
  ::Vrf* _internal_mutable_txvrfinfo();
  public:
  void unsafe_arena_set_allocated_txvrfinfo(
      ::Vrf* txvrfinfo);
  ::Vrf* unsafe_arena_release_txvrfinfo();

  // @@protoc_insertion_point(class_scope:TxMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg > signnodemsg_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prevblkhashs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::TxMsgInfo* txmsginfo_;
    ::Vrf* vrfinfo_;
    ::Vrf* txvrfinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class VrfData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VrfData) */ {
 public:
  inline VrfData() : VrfData(nullptr) {}
  ~VrfData() override;
  explicit PROTOBUF_CONSTEXPR VrfData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VrfData(const VrfData& from);
  VrfData(VrfData&& from) noexcept
    : VrfData() {
    *this = ::std::move(from);
  }

  inline VrfData& operator=(const VrfData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VrfData& operator=(VrfData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VrfData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VrfData* internal_default_instance() {
    return reinterpret_cast<const VrfData*>(
               &_VrfData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VrfData& a, VrfData& b) {
    a.Swap(&b);
  }
  inline void Swap(VrfData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VrfData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VrfData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VrfData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VrfData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VrfData& from) {
    VrfData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VrfData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VrfData";
  }
  protected:
  explicit VrfData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfListFieldNumber = 6,
    kHashFieldNumber = 1,
    kTargetAddrFieldNumber = 5,
    kTxvrfinfohashFieldNumber = 7,
    kRangeFieldNumber = 2,
    kPercentageFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // repeated string vrfList = 6;
  int vrflist_size() const;
  private:
  int _internal_vrflist_size() const;
  public:
  void clear_vrflist();
  const std::string& vrflist(int index) const;
  std::string* mutable_vrflist(int index);
  void set_vrflist(int index, const std::string& value);
  void set_vrflist(int index, std::string&& value);
  void set_vrflist(int index, const char* value);
  void set_vrflist(int index, const char* value, size_t size);
  std::string* add_vrflist();
  void add_vrflist(const std::string& value);
  void add_vrflist(std::string&& value);
  void add_vrflist(const char* value);
  void add_vrflist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vrflist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vrflist();
  private:
  const std::string& _internal_vrflist(int index) const;
  std::string* _internal_add_vrflist();
  public:

  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string targetAddr = 5;
  void clear_targetaddr();
  const std::string& targetaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetaddr();
  PROTOBUF_NODISCARD std::string* release_targetaddr();
  void set_allocated_targetaddr(std::string* targetaddr);
  private:
  const std::string& _internal_targetaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetaddr(const std::string& value);
  std::string* _internal_mutable_targetaddr();
  public:

  // string txvrfinfohash = 7;
  void clear_txvrfinfohash();
  const std::string& txvrfinfohash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_txvrfinfohash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_txvrfinfohash();
  PROTOBUF_NODISCARD std::string* release_txvrfinfohash();
  void set_allocated_txvrfinfohash(std::string* txvrfinfohash);
  private:
  const std::string& _internal_txvrfinfohash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txvrfinfohash(const std::string& value);
  std::string* _internal_mutable_txvrfinfohash();
  public:

  // uint64 range = 2;
  void clear_range();
  uint64_t range() const;
  void set_range(uint64_t value);
  private:
  uint64_t _internal_range() const;
  void _internal_set_range(uint64_t value);
  public:

  // uint64 percentage = 3;
  void clear_percentage();
  uint64_t percentage() const;
  void set_percentage(uint64_t value);
  private:
  uint64_t _internal_percentage() const;
  void _internal_set_percentage(uint64_t value);
  public:

  // uint64 height = 4;
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:VrfData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vrflist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txvrfinfohash_;
    uint64_t range_;
    uint64_t percentage_;
    uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class Vrf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vrf) */ {
 public:
  inline Vrf() : Vrf(nullptr) {}
  ~Vrf() override;
  explicit PROTOBUF_CONSTEXPR Vrf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vrf(const Vrf& from);
  Vrf(Vrf&& from) noexcept
    : Vrf() {
    *this = ::std::move(from);
  }

  inline Vrf& operator=(const Vrf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vrf& operator=(Vrf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vrf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vrf* internal_default_instance() {
    return reinterpret_cast<const Vrf*>(
               &_Vrf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vrf& a, Vrf& b) {
    a.Swap(&b);
  }
  inline void Swap(Vrf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vrf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vrf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vrf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vrf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vrf& from) {
    Vrf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vrf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vrf";
  }
  protected:
  explicit Vrf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfdataFieldNumber = 1,
    kVrfsignFieldNumber = 2,
  };
  // .VrfData vrfdata = 1;
  bool has_vrfdata() const;
  private:
  bool _internal_has_vrfdata() const;
  public:
  void clear_vrfdata();
  const ::VrfData& vrfdata() const;
  PROTOBUF_NODISCARD ::VrfData* release_vrfdata();
  ::VrfData* mutable_vrfdata();
  void set_allocated_vrfdata(::VrfData* vrfdata);
  private:
  const ::VrfData& _internal_vrfdata() const;
  ::VrfData* _internal_mutable_vrfdata();
  public:
  void unsafe_arena_set_allocated_vrfdata(
      ::VrfData* vrfdata);
  ::VrfData* unsafe_arena_release_vrfdata();

  // .CSign Vrfsign = 2;
  bool has_vrfsign() const;
  private:
  bool _internal_has_vrfsign() const;
  public:
  void clear_vrfsign();
  const ::CSign& vrfsign() const;
  PROTOBUF_NODISCARD ::CSign* release_vrfsign();
  ::CSign* mutable_vrfsign();
  void set_allocated_vrfsign(::CSign* vrfsign);
  private:
  const ::CSign& _internal_vrfsign() const;
  ::CSign* _internal_mutable_vrfsign();
  public:
  void unsafe_arena_set_allocated_vrfsign(
      ::CSign* vrfsign);
  ::CSign* unsafe_arena_release_vrfsign();

  // @@protoc_insertion_point(class_scope:Vrf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::VrfData* vrfdata_;
    ::CSign* vrfsign_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class TxMsgAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxMsgAck) */ {
 public:
  inline TxMsgAck() : TxMsgAck(nullptr) {}
  ~TxMsgAck() override;
  explicit PROTOBUF_CONSTEXPR TxMsgAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxMsgAck(const TxMsgAck& from);
  TxMsgAck(TxMsgAck&& from) noexcept
    : TxMsgAck() {
    *this = ::std::move(from);
  }

  inline TxMsgAck& operator=(const TxMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgAck& operator=(TxMsgAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxMsgAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMsgAck* internal_default_instance() {
    return reinterpret_cast<const TxMsgAck*>(
               &_TxMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TxMsgAck& a, TxMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsgAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMsgAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxMsgAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxMsgAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxMsgAck& from) {
    TxMsgAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsgAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxMsgAck";
  }
  protected:
  explicit TxMsgAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTxFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes tx = 4;
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TxMsgAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class BuildBlockBroadcastMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildBlockBroadcastMsg) */ {
 public:
  inline BuildBlockBroadcastMsg() : BuildBlockBroadcastMsg(nullptr) {}
  ~BuildBlockBroadcastMsg() override;
  explicit PROTOBUF_CONSTEXPR BuildBlockBroadcastMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildBlockBroadcastMsg(const BuildBlockBroadcastMsg& from);
  BuildBlockBroadcastMsg(BuildBlockBroadcastMsg&& from) noexcept
    : BuildBlockBroadcastMsg() {
    *this = ::std::move(from);
  }

  inline BuildBlockBroadcastMsg& operator=(const BuildBlockBroadcastMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildBlockBroadcastMsg& operator=(BuildBlockBroadcastMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildBlockBroadcastMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildBlockBroadcastMsg* internal_default_instance() {
    return reinterpret_cast<const BuildBlockBroadcastMsg*>(
               &_BuildBlockBroadcastMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BuildBlockBroadcastMsg& a, BuildBlockBroadcastMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildBlockBroadcastMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildBlockBroadcastMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuildBlockBroadcastMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuildBlockBroadcastMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildBlockBroadcastMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuildBlockBroadcastMsg& from) {
    BuildBlockBroadcastMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildBlockBroadcastMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildBlockBroadcastMsg";
  }
  protected:
  explicit BuildBlockBroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCastAddrsFieldNumber = 7,
    kVrfInfoFieldNumber = 8,
    kTxvrfInfoFieldNumber = 9,
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
    kBlockRawFieldNumber = 3,
    kBlockVrfInfoFieldNumber = 4,
    kFlagFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // repeated string castAddrs = 7;
  int castaddrs_size() const;
  private:
  int _internal_castaddrs_size() const;
  public:
  void clear_castaddrs();
  const std::string& castaddrs(int index) const;
  std::string* mutable_castaddrs(int index);
  void set_castaddrs(int index, const std::string& value);
  void set_castaddrs(int index, std::string&& value);
  void set_castaddrs(int index, const char* value);
  void set_castaddrs(int index, const char* value, size_t size);
  std::string* add_castaddrs();
  void add_castaddrs(const std::string& value);
  void add_castaddrs(std::string&& value);
  void add_castaddrs(const char* value);
  void add_castaddrs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& castaddrs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_castaddrs();
  private:
  const std::string& _internal_castaddrs(int index) const;
  std::string* _internal_add_castaddrs();
  public:

  // repeated .Vrf vrfInfo = 8;
  int vrfinfo_size() const;
  private:
  int _internal_vrfinfo_size() const;
  public:
  void clear_vrfinfo();
  ::Vrf* mutable_vrfinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
      mutable_vrfinfo();
  private:
  const ::Vrf& _internal_vrfinfo(int index) const;
  ::Vrf* _internal_add_vrfinfo();
  public:
  const ::Vrf& vrfinfo(int index) const;
  ::Vrf* add_vrfinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
      vrfinfo() const;

  // repeated .Vrf txvrfInfo = 9;
  int txvrfinfo_size() const;
  private:
  int _internal_txvrfinfo_size() const;
  public:
  void clear_txvrfinfo();
  ::Vrf* mutable_txvrfinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
      mutable_txvrfinfo();
  private:
  const ::Vrf& _internal_txvrfinfo(int index) const;
  ::Vrf* _internal_add_txvrfinfo();
  public:
  const ::Vrf& txvrfinfo(int index) const;
  ::Vrf* add_txvrfinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
      txvrfinfo() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes blockRaw = 3;
  void clear_blockraw();
  const std::string& blockraw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockraw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockraw();
  PROTOBUF_NODISCARD std::string* release_blockraw();
  void set_allocated_blockraw(std::string* blockraw);
  private:
  const std::string& _internal_blockraw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockraw(const std::string& value);
  std::string* _internal_mutable_blockraw();
  public:

  // .Vrf blockVrfInfo = 4;
  bool has_blockvrfinfo() const;
  private:
  bool _internal_has_blockvrfinfo() const;
  public:
  void clear_blockvrfinfo();
  const ::Vrf& blockvrfinfo() const;
  PROTOBUF_NODISCARD ::Vrf* release_blockvrfinfo();
  ::Vrf* mutable_blockvrfinfo();
  void set_allocated_blockvrfinfo(::Vrf* blockvrfinfo);
  private:
  const ::Vrf& _internal_blockvrfinfo() const;
  ::Vrf* _internal_mutable_blockvrfinfo();
  public:
  void unsafe_arena_set_allocated_blockvrfinfo(
      ::Vrf* blockvrfinfo);
  ::Vrf* unsafe_arena_release_blockvrfinfo();

  // int32 flag = 5;
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // int32 type = 6;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BuildBlockBroadcastMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> castaddrs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf > vrfinfo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf > txvrfinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockraw_;
    ::Vrf* blockvrfinfo_;
    int32_t flag_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class ContractTxMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContractTxMsgReq) */ {
 public:
  inline ContractTxMsgReq() : ContractTxMsgReq(nullptr) {}
  ~ContractTxMsgReq() override;
  explicit PROTOBUF_CONSTEXPR ContractTxMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractTxMsgReq(const ContractTxMsgReq& from);
  ContractTxMsgReq(ContractTxMsgReq&& from) noexcept
    : ContractTxMsgReq() {
    *this = ::std::move(from);
  }

  inline ContractTxMsgReq& operator=(const ContractTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractTxMsgReq& operator=(ContractTxMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractTxMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const ContractTxMsgReq*>(
               &_ContractTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContractTxMsgReq& a, ContractTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractTxMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractTxMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractTxMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractTxMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractTxMsgReq& from) {
    ContractTxMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractTxMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContractTxMsgReq";
  }
  protected:
  explicit ContractTxMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractDependentAddressFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTxMsgReqFieldNumber = 2,
  };
  // repeated string contractDependentAddress = 3;
  int contractdependentaddress_size() const;
  private:
  int _internal_contractdependentaddress_size() const;
  public:
  void clear_contractdependentaddress();
  const std::string& contractdependentaddress(int index) const;
  std::string* mutable_contractdependentaddress(int index);
  void set_contractdependentaddress(int index, const std::string& value);
  void set_contractdependentaddress(int index, std::string&& value);
  void set_contractdependentaddress(int index, const char* value);
  void set_contractdependentaddress(int index, const char* value, size_t size);
  std::string* add_contractdependentaddress();
  void add_contractdependentaddress(const std::string& value);
  void add_contractdependentaddress(std::string&& value);
  void add_contractdependentaddress(const char* value);
  void add_contractdependentaddress(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contractdependentaddress() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contractdependentaddress();
  private:
  const std::string& _internal_contractdependentaddress(int index) const;
  std::string* _internal_add_contractdependentaddress();
  public:

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .TxMsgReq txMsgReq = 2;
  bool has_txmsgreq() const;
  private:
  bool _internal_has_txmsgreq() const;
  public:
  void clear_txmsgreq();
  const ::TxMsgReq& txmsgreq() const;
  PROTOBUF_NODISCARD ::TxMsgReq* release_txmsgreq();
  ::TxMsgReq* mutable_txmsgreq();
  void set_allocated_txmsgreq(::TxMsgReq* txmsgreq);
  private:
  const ::TxMsgReq& _internal_txmsgreq() const;
  ::TxMsgReq* _internal_mutable_txmsgreq();
  public:
  void unsafe_arena_set_allocated_txmsgreq(
      ::TxMsgReq* txmsgreq);
  ::TxMsgReq* unsafe_arena_release_txmsgreq();

  // @@protoc_insertion_point(class_scope:ContractTxMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contractdependentaddress_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::TxMsgReq* txmsgreq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class VrfDataSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VrfDataSource) */ {
 public:
  inline VrfDataSource() : VrfDataSource(nullptr) {}
  ~VrfDataSource() override;
  explicit PROTOBUF_CONSTEXPR VrfDataSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VrfDataSource(const VrfDataSource& from);
  VrfDataSource(VrfDataSource&& from) noexcept
    : VrfDataSource() {
    *this = ::std::move(from);
  }

  inline VrfDataSource& operator=(const VrfDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline VrfDataSource& operator=(VrfDataSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VrfDataSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const VrfDataSource* internal_default_instance() {
    return reinterpret_cast<const VrfDataSource*>(
               &_VrfDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VrfDataSource& a, VrfDataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(VrfDataSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VrfDataSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VrfDataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VrfDataSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VrfDataSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VrfDataSource& from) {
    VrfDataSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VrfDataSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VrfDataSource";
  }
  protected:
  explicit VrfDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfNodelistFieldNumber = 1,
  };
  // repeated string vrfNodelist = 1;
  int vrfnodelist_size() const;
  private:
  int _internal_vrfnodelist_size() const;
  public:
  void clear_vrfnodelist();
  const std::string& vrfnodelist(int index) const;
  std::string* mutable_vrfnodelist(int index);
  void set_vrfnodelist(int index, const std::string& value);
  void set_vrfnodelist(int index, std::string&& value);
  void set_vrfnodelist(int index, const char* value);
  void set_vrfnodelist(int index, const char* value, size_t size);
  std::string* add_vrfnodelist();
  void add_vrfnodelist(const std::string& value);
  void add_vrfnodelist(std::string&& value);
  void add_vrfnodelist(const char* value);
  void add_vrfnodelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vrfnodelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vrfnodelist();
  private:
  const std::string& _internal_vrfnodelist(int index) const;
  std::string* _internal_add_vrfnodelist();
  public:

  // @@protoc_insertion_point(class_scope:VrfDataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vrfnodelist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class ContractPackagerMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContractPackagerMsg) */ {
 public:
  inline ContractPackagerMsg() : ContractPackagerMsg(nullptr) {}
  ~ContractPackagerMsg() override;
  explicit PROTOBUF_CONSTEXPR ContractPackagerMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractPackagerMsg(const ContractPackagerMsg& from);
  ContractPackagerMsg(ContractPackagerMsg&& from) noexcept
    : ContractPackagerMsg() {
    *this = ::std::move(from);
  }

  inline ContractPackagerMsg& operator=(const ContractPackagerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractPackagerMsg& operator=(ContractPackagerMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractPackagerMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractPackagerMsg* internal_default_instance() {
    return reinterpret_cast<const ContractPackagerMsg*>(
               &_ContractPackagerMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ContractPackagerMsg& a, ContractPackagerMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractPackagerMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractPackagerMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractPackagerMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractPackagerMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractPackagerMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractPackagerMsg& from) {
    ContractPackagerMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractPackagerMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContractPackagerMsg";
  }
  protected:
  explicit ContractPackagerMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxMsgReqFieldNumber = 3,
    kVersionFieldNumber = 1,
    kSignFieldNumber = 2,
    kVrfInfoFieldNumber = 4,
    kVrfDataSourceFieldNumber = 5,
  };
  // repeated .TxMsgReq txMsgReq = 3;
  int txmsgreq_size() const;
  private:
  int _internal_txmsgreq_size() const;
  public:
  void clear_txmsgreq();
  ::TxMsgReq* mutable_txmsgreq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxMsgReq >*
      mutable_txmsgreq();
  private:
  const ::TxMsgReq& _internal_txmsgreq(int index) const;
  ::TxMsgReq* _internal_add_txmsgreq();
  public:
  const ::TxMsgReq& txmsgreq(int index) const;
  ::TxMsgReq* add_txmsgreq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxMsgReq >&
      txmsgreq() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .CSign sign = 2;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const ::CSign& sign() const;
  PROTOBUF_NODISCARD ::CSign* release_sign();
  ::CSign* mutable_sign();
  void set_allocated_sign(::CSign* sign);
  private:
  const ::CSign& _internal_sign() const;
  ::CSign* _internal_mutable_sign();
  public:
  void unsafe_arena_set_allocated_sign(
      ::CSign* sign);
  ::CSign* unsafe_arena_release_sign();

  // .Vrf vrfInfo = 4;
  bool has_vrfinfo() const;
  private:
  bool _internal_has_vrfinfo() const;
  public:
  void clear_vrfinfo();
  const ::Vrf& vrfinfo() const;
  PROTOBUF_NODISCARD ::Vrf* release_vrfinfo();
  ::Vrf* mutable_vrfinfo();
  void set_allocated_vrfinfo(::Vrf* vrfinfo);
  private:
  const ::Vrf& _internal_vrfinfo() const;
  ::Vrf* _internal_mutable_vrfinfo();
  public:
  void unsafe_arena_set_allocated_vrfinfo(
      ::Vrf* vrfinfo);
  ::Vrf* unsafe_arena_release_vrfinfo();

  // .VrfDataSource vrfDataSource = 5;
  bool has_vrfdatasource() const;
  private:
  bool _internal_has_vrfdatasource() const;
  public:
  void clear_vrfdatasource();
  const ::VrfDataSource& vrfdatasource() const;
  PROTOBUF_NODISCARD ::VrfDataSource* release_vrfdatasource();
  ::VrfDataSource* mutable_vrfdatasource();
  void set_allocated_vrfdatasource(::VrfDataSource* vrfdatasource);
  private:
  const ::VrfDataSource& _internal_vrfdatasource() const;
  ::VrfDataSource* _internal_mutable_vrfdatasource();
  public:
  void unsafe_arena_set_allocated_vrfdatasource(
      ::VrfDataSource* vrfdatasource);
  ::VrfDataSource* unsafe_arena_release_vrfdatasource();

  // @@protoc_insertion_point(class_scope:ContractPackagerMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxMsgReq > txmsgreq_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::CSign* sign_;
    ::Vrf* vrfinfo_;
    ::VrfDataSource* vrfdatasource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignNodeMsg

// string id = 1;
inline void SignNodeMsg::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SignNodeMsg::id() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignNodeMsg::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SignNodeMsg.id)
}
inline std::string* SignNodeMsg::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.id)
  return _s;
}
inline const std::string& SignNodeMsg::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SignNodeMsg::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignNodeMsg::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SignNodeMsg::release_id() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.id)
  return _impl_.id_.Release();
}
inline void SignNodeMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.id)
}

// bytes sign = 2;
inline void SignNodeMsg::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& SignNodeMsg::sign() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignNodeMsg::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SignNodeMsg.sign)
}
inline std::string* SignNodeMsg::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.sign)
  return _s;
}
inline const std::string& SignNodeMsg::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void SignNodeMsg::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* SignNodeMsg::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* SignNodeMsg::release_sign() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.sign)
  return _impl_.sign_.Release();
}
inline void SignNodeMsg::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.sign)
}

// bytes pub = 3;
inline void SignNodeMsg::clear_pub() {
  _impl_.pub_.ClearToEmpty();
}
inline const std::string& SignNodeMsg::pub() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.pub)
  return _internal_pub();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignNodeMsg::set_pub(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pub_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SignNodeMsg.pub)
}
inline std::string* SignNodeMsg::mutable_pub() {
  std::string* _s = _internal_mutable_pub();
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.pub)
  return _s;
}
inline const std::string& SignNodeMsg::_internal_pub() const {
  return _impl_.pub_.Get();
}
inline void SignNodeMsg::_internal_set_pub(const std::string& value) {
  
  _impl_.pub_.Set(value, GetArenaForAllocation());
}
inline std::string* SignNodeMsg::_internal_mutable_pub() {
  
  return _impl_.pub_.Mutable(GetArenaForAllocation());
}
inline std::string* SignNodeMsg::release_pub() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.pub)
  return _impl_.pub_.Release();
}
inline void SignNodeMsg::set_allocated_pub(std::string* pub) {
  if (pub != nullptr) {
    
  } else {
    
  }
  _impl_.pub_.SetAllocated(pub, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pub_.IsDefault()) {
    _impl_.pub_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.pub)
}

// -------------------------------------------------------------------

// TxMsgInfo

// uint32 type = 1;
inline void TxMsgInfo::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TxMsgInfo::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TxMsgInfo::type() const {
  // @@protoc_insertion_point(field_get:TxMsgInfo.type)
  return _internal_type();
}
inline void TxMsgInfo::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TxMsgInfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TxMsgInfo.type)
}

// bytes tx = 2;
inline void TxMsgInfo::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& TxMsgInfo::tx() const {
  // @@protoc_insertion_point(field_get:TxMsgInfo.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMsgInfo::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TxMsgInfo.tx)
}
inline std::string* TxMsgInfo::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:TxMsgInfo.tx)
  return _s;
}
inline const std::string& TxMsgInfo::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void TxMsgInfo::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMsgInfo::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMsgInfo::release_tx() {
  // @@protoc_insertion_point(field_release:TxMsgInfo.tx)
  return _impl_.tx_.Release();
}
inline void TxMsgInfo::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TxMsgInfo.tx)
}

// uint64 nodeHeight = 3;
inline void TxMsgInfo::clear_nodeheight() {
  _impl_.nodeheight_ = uint64_t{0u};
}
inline uint64_t TxMsgInfo::_internal_nodeheight() const {
  return _impl_.nodeheight_;
}
inline uint64_t TxMsgInfo::nodeheight() const {
  // @@protoc_insertion_point(field_get:TxMsgInfo.nodeHeight)
  return _internal_nodeheight();
}
inline void TxMsgInfo::_internal_set_nodeheight(uint64_t value) {
  
  _impl_.nodeheight_ = value;
}
inline void TxMsgInfo::set_nodeheight(uint64_t value) {
  _internal_set_nodeheight(value);
  // @@protoc_insertion_point(field_set:TxMsgInfo.nodeHeight)
}

// uint64 txUtxoHeight = 4;
inline void TxMsgInfo::clear_txutxoheight() {
  _impl_.txutxoheight_ = uint64_t{0u};
}
inline uint64_t TxMsgInfo::_internal_txutxoheight() const {
  return _impl_.txutxoheight_;
}
inline uint64_t TxMsgInfo::txutxoheight() const {
  // @@protoc_insertion_point(field_get:TxMsgInfo.txUtxoHeight)
  return _internal_txutxoheight();
}
inline void TxMsgInfo::_internal_set_txutxoheight(uint64_t value) {
  
  _impl_.txutxoheight_ = value;
}
inline void TxMsgInfo::set_txutxoheight(uint64_t value) {
  _internal_set_txutxoheight(value);
  // @@protoc_insertion_point(field_set:TxMsgInfo.txUtxoHeight)
}

// repeated string contractStorageList = 5;
inline int TxMsgInfo::_internal_contractstoragelist_size() const {
  return _impl_.contractstoragelist_.size();
}
inline int TxMsgInfo::contractstoragelist_size() const {
  return _internal_contractstoragelist_size();
}
inline void TxMsgInfo::clear_contractstoragelist() {
  _impl_.contractstoragelist_.Clear();
}
inline std::string* TxMsgInfo::add_contractstoragelist() {
  std::string* _s = _internal_add_contractstoragelist();
  // @@protoc_insertion_point(field_add_mutable:TxMsgInfo.contractStorageList)
  return _s;
}
inline const std::string& TxMsgInfo::_internal_contractstoragelist(int index) const {
  return _impl_.contractstoragelist_.Get(index);
}
inline const std::string& TxMsgInfo::contractstoragelist(int index) const {
  // @@protoc_insertion_point(field_get:TxMsgInfo.contractStorageList)
  return _internal_contractstoragelist(index);
}
inline std::string* TxMsgInfo::mutable_contractstoragelist(int index) {
  // @@protoc_insertion_point(field_mutable:TxMsgInfo.contractStorageList)
  return _impl_.contractstoragelist_.Mutable(index);
}
inline void TxMsgInfo::set_contractstoragelist(int index, const std::string& value) {
  _impl_.contractstoragelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TxMsgInfo.contractStorageList)
}
inline void TxMsgInfo::set_contractstoragelist(int index, std::string&& value) {
  _impl_.contractstoragelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TxMsgInfo.contractStorageList)
}
inline void TxMsgInfo::set_contractstoragelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.contractstoragelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxMsgInfo.contractStorageList)
}
inline void TxMsgInfo::set_contractstoragelist(int index, const char* value, size_t size) {
  _impl_.contractstoragelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxMsgInfo.contractStorageList)
}
inline std::string* TxMsgInfo::_internal_add_contractstoragelist() {
  return _impl_.contractstoragelist_.Add();
}
inline void TxMsgInfo::add_contractstoragelist(const std::string& value) {
  _impl_.contractstoragelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxMsgInfo.contractStorageList)
}
inline void TxMsgInfo::add_contractstoragelist(std::string&& value) {
  _impl_.contractstoragelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxMsgInfo.contractStorageList)
}
inline void TxMsgInfo::add_contractstoragelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.contractstoragelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxMsgInfo.contractStorageList)
}
inline void TxMsgInfo::add_contractstoragelist(const char* value, size_t size) {
  _impl_.contractstoragelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxMsgInfo.contractStorageList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxMsgInfo::contractstoragelist() const {
  // @@protoc_insertion_point(field_list:TxMsgInfo.contractStorageList)
  return _impl_.contractstoragelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxMsgInfo::mutable_contractstoragelist() {
  // @@protoc_insertion_point(field_mutable_list:TxMsgInfo.contractStorageList)
  return &_impl_.contractstoragelist_;
}

// -------------------------------------------------------------------

// TxMsgReq

// string version = 1;
inline void TxMsgReq::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& TxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMsgReq::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TxMsgReq.version)
}
inline std::string* TxMsgReq::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:TxMsgReq.version)
  return _s;
}
inline const std::string& TxMsgReq::_internal_version() const {
  return _impl_.version_.Get();
}
inline void TxMsgReq::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMsgReq::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:TxMsgReq.version)
  return _impl_.version_.Release();
}
inline void TxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.version)
}

// .TxMsgInfo txMsgInfo = 2;
inline bool TxMsgReq::_internal_has_txmsginfo() const {
  return this != internal_default_instance() && _impl_.txmsginfo_ != nullptr;
}
inline bool TxMsgReq::has_txmsginfo() const {
  return _internal_has_txmsginfo();
}
inline void TxMsgReq::clear_txmsginfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.txmsginfo_ != nullptr) {
    delete _impl_.txmsginfo_;
  }
  _impl_.txmsginfo_ = nullptr;
}
inline const ::TxMsgInfo& TxMsgReq::_internal_txmsginfo() const {
  const ::TxMsgInfo* p = _impl_.txmsginfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TxMsgInfo&>(
      ::_TxMsgInfo_default_instance_);
}
inline const ::TxMsgInfo& TxMsgReq::txmsginfo() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.txMsgInfo)
  return _internal_txmsginfo();
}
inline void TxMsgReq::unsafe_arena_set_allocated_txmsginfo(
    ::TxMsgInfo* txmsginfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.txmsginfo_);
  }
  _impl_.txmsginfo_ = txmsginfo;
  if (txmsginfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TxMsgReq.txMsgInfo)
}
inline ::TxMsgInfo* TxMsgReq::release_txmsginfo() {
  
  ::TxMsgInfo* temp = _impl_.txmsginfo_;
  _impl_.txmsginfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TxMsgInfo* TxMsgReq::unsafe_arena_release_txmsginfo() {
  // @@protoc_insertion_point(field_release:TxMsgReq.txMsgInfo)
  
  ::TxMsgInfo* temp = _impl_.txmsginfo_;
  _impl_.txmsginfo_ = nullptr;
  return temp;
}
inline ::TxMsgInfo* TxMsgReq::_internal_mutable_txmsginfo() {
  
  if (_impl_.txmsginfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TxMsgInfo>(GetArenaForAllocation());
    _impl_.txmsginfo_ = p;
  }
  return _impl_.txmsginfo_;
}
inline ::TxMsgInfo* TxMsgReq::mutable_txmsginfo() {
  ::TxMsgInfo* _msg = _internal_mutable_txmsginfo();
  // @@protoc_insertion_point(field_mutable:TxMsgReq.txMsgInfo)
  return _msg;
}
inline void TxMsgReq::set_allocated_txmsginfo(::TxMsgInfo* txmsginfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.txmsginfo_;
  }
  if (txmsginfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(txmsginfo);
    if (message_arena != submessage_arena) {
      txmsginfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txmsginfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.txmsginfo_ = txmsginfo;
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.txMsgInfo)
}

// .Vrf vrfInfo = 3;
inline bool TxMsgReq::_internal_has_vrfinfo() const {
  return this != internal_default_instance() && _impl_.vrfinfo_ != nullptr;
}
inline bool TxMsgReq::has_vrfinfo() const {
  return _internal_has_vrfinfo();
}
inline void TxMsgReq::clear_vrfinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
}
inline const ::Vrf& TxMsgReq::_internal_vrfinfo() const {
  const ::Vrf* p = _impl_.vrfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vrf&>(
      ::_Vrf_default_instance_);
}
inline const ::Vrf& TxMsgReq::vrfinfo() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.vrfInfo)
  return _internal_vrfinfo();
}
inline void TxMsgReq::unsafe_arena_set_allocated_vrfinfo(
    ::Vrf* vrfinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfinfo_);
  }
  _impl_.vrfinfo_ = vrfinfo;
  if (vrfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TxMsgReq.vrfInfo)
}
inline ::Vrf* TxMsgReq::release_vrfinfo() {
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vrf* TxMsgReq::unsafe_arena_release_vrfinfo() {
  // @@protoc_insertion_point(field_release:TxMsgReq.vrfInfo)
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
  return temp;
}
inline ::Vrf* TxMsgReq::_internal_mutable_vrfinfo() {
  
  if (_impl_.vrfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vrf>(GetArenaForAllocation());
    _impl_.vrfinfo_ = p;
  }
  return _impl_.vrfinfo_;
}
inline ::Vrf* TxMsgReq::mutable_vrfinfo() {
  ::Vrf* _msg = _internal_mutable_vrfinfo();
  // @@protoc_insertion_point(field_mutable:TxMsgReq.vrfInfo)
  return _msg;
}
inline void TxMsgReq::set_allocated_vrfinfo(::Vrf* vrfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vrfinfo_;
  }
  if (vrfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vrfinfo);
    if (message_arena != submessage_arena) {
      vrfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfinfo_ = vrfinfo;
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.vrfInfo)
}

// .Vrf txvrfInfo = 4;
inline bool TxMsgReq::_internal_has_txvrfinfo() const {
  return this != internal_default_instance() && _impl_.txvrfinfo_ != nullptr;
}
inline bool TxMsgReq::has_txvrfinfo() const {
  return _internal_has_txvrfinfo();
}
inline void TxMsgReq::clear_txvrfinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.txvrfinfo_ != nullptr) {
    delete _impl_.txvrfinfo_;
  }
  _impl_.txvrfinfo_ = nullptr;
}
inline const ::Vrf& TxMsgReq::_internal_txvrfinfo() const {
  const ::Vrf* p = _impl_.txvrfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vrf&>(
      ::_Vrf_default_instance_);
}
inline const ::Vrf& TxMsgReq::txvrfinfo() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.txvrfInfo)
  return _internal_txvrfinfo();
}
inline void TxMsgReq::unsafe_arena_set_allocated_txvrfinfo(
    ::Vrf* txvrfinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.txvrfinfo_);
  }
  _impl_.txvrfinfo_ = txvrfinfo;
  if (txvrfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TxMsgReq.txvrfInfo)
}
inline ::Vrf* TxMsgReq::release_txvrfinfo() {
  
  ::Vrf* temp = _impl_.txvrfinfo_;
  _impl_.txvrfinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vrf* TxMsgReq::unsafe_arena_release_txvrfinfo() {
  // @@protoc_insertion_point(field_release:TxMsgReq.txvrfInfo)
  
  ::Vrf* temp = _impl_.txvrfinfo_;
  _impl_.txvrfinfo_ = nullptr;
  return temp;
}
inline ::Vrf* TxMsgReq::_internal_mutable_txvrfinfo() {
  
  if (_impl_.txvrfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vrf>(GetArenaForAllocation());
    _impl_.txvrfinfo_ = p;
  }
  return _impl_.txvrfinfo_;
}
inline ::Vrf* TxMsgReq::mutable_txvrfinfo() {
  ::Vrf* _msg = _internal_mutable_txvrfinfo();
  // @@protoc_insertion_point(field_mutable:TxMsgReq.txvrfInfo)
  return _msg;
}
inline void TxMsgReq::set_allocated_txvrfinfo(::Vrf* txvrfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.txvrfinfo_;
  }
  if (txvrfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(txvrfinfo);
    if (message_arena != submessage_arena) {
      txvrfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txvrfinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.txvrfinfo_ = txvrfinfo;
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.txvrfInfo)
}

// repeated .SignNodeMsg signNodeMsg = 5;
inline int TxMsgReq::_internal_signnodemsg_size() const {
  return _impl_.signnodemsg_.size();
}
inline int TxMsgReq::signnodemsg_size() const {
  return _internal_signnodemsg_size();
}
inline void TxMsgReq::clear_signnodemsg() {
  _impl_.signnodemsg_.Clear();
}
inline ::SignNodeMsg* TxMsgReq::mutable_signnodemsg(int index) {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.signNodeMsg)
  return _impl_.signnodemsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >*
TxMsgReq::mutable_signnodemsg() {
  // @@protoc_insertion_point(field_mutable_list:TxMsgReq.signNodeMsg)
  return &_impl_.signnodemsg_;
}
inline const ::SignNodeMsg& TxMsgReq::_internal_signnodemsg(int index) const {
  return _impl_.signnodemsg_.Get(index);
}
inline const ::SignNodeMsg& TxMsgReq::signnodemsg(int index) const {
  // @@protoc_insertion_point(field_get:TxMsgReq.signNodeMsg)
  return _internal_signnodemsg(index);
}
inline ::SignNodeMsg* TxMsgReq::_internal_add_signnodemsg() {
  return _impl_.signnodemsg_.Add();
}
inline ::SignNodeMsg* TxMsgReq::add_signnodemsg() {
  ::SignNodeMsg* _add = _internal_add_signnodemsg();
  // @@protoc_insertion_point(field_add:TxMsgReq.signNodeMsg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >&
TxMsgReq::signnodemsg() const {
  // @@protoc_insertion_point(field_list:TxMsgReq.signNodeMsg)
  return _impl_.signnodemsg_;
}

// repeated string prevBlkHashs = 6;
inline int TxMsgReq::_internal_prevblkhashs_size() const {
  return _impl_.prevblkhashs_.size();
}
inline int TxMsgReq::prevblkhashs_size() const {
  return _internal_prevblkhashs_size();
}
inline void TxMsgReq::clear_prevblkhashs() {
  _impl_.prevblkhashs_.Clear();
}
inline std::string* TxMsgReq::add_prevblkhashs() {
  std::string* _s = _internal_add_prevblkhashs();
  // @@protoc_insertion_point(field_add_mutable:TxMsgReq.prevBlkHashs)
  return _s;
}
inline const std::string& TxMsgReq::_internal_prevblkhashs(int index) const {
  return _impl_.prevblkhashs_.Get(index);
}
inline const std::string& TxMsgReq::prevblkhashs(int index) const {
  // @@protoc_insertion_point(field_get:TxMsgReq.prevBlkHashs)
  return _internal_prevblkhashs(index);
}
inline std::string* TxMsgReq::mutable_prevblkhashs(int index) {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.prevBlkHashs)
  return _impl_.prevblkhashs_.Mutable(index);
}
inline void TxMsgReq::set_prevblkhashs(int index, const std::string& value) {
  _impl_.prevblkhashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TxMsgReq.prevBlkHashs)
}
inline void TxMsgReq::set_prevblkhashs(int index, std::string&& value) {
  _impl_.prevblkhashs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TxMsgReq.prevBlkHashs)
}
inline void TxMsgReq::set_prevblkhashs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prevblkhashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxMsgReq.prevBlkHashs)
}
inline void TxMsgReq::set_prevblkhashs(int index, const char* value, size_t size) {
  _impl_.prevblkhashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxMsgReq.prevBlkHashs)
}
inline std::string* TxMsgReq::_internal_add_prevblkhashs() {
  return _impl_.prevblkhashs_.Add();
}
inline void TxMsgReq::add_prevblkhashs(const std::string& value) {
  _impl_.prevblkhashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxMsgReq.prevBlkHashs)
}
inline void TxMsgReq::add_prevblkhashs(std::string&& value) {
  _impl_.prevblkhashs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxMsgReq.prevBlkHashs)
}
inline void TxMsgReq::add_prevblkhashs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.prevblkhashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxMsgReq.prevBlkHashs)
}
inline void TxMsgReq::add_prevblkhashs(const char* value, size_t size) {
  _impl_.prevblkhashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxMsgReq.prevBlkHashs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxMsgReq::prevblkhashs() const {
  // @@protoc_insertion_point(field_list:TxMsgReq.prevBlkHashs)
  return _impl_.prevblkhashs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxMsgReq::mutable_prevblkhashs() {
  // @@protoc_insertion_point(field_mutable_list:TxMsgReq.prevBlkHashs)
  return &_impl_.prevblkhashs_;
}

// -------------------------------------------------------------------

// VrfData

// string hash = 1;
inline void VrfData::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& VrfData::hash() const {
  // @@protoc_insertion_point(field_get:VrfData.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VrfData::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VrfData.hash)
}
inline std::string* VrfData::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:VrfData.hash)
  return _s;
}
inline const std::string& VrfData::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void VrfData::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* VrfData::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* VrfData::release_hash() {
  // @@protoc_insertion_point(field_release:VrfData.hash)
  return _impl_.hash_.Release();
}
inline void VrfData::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VrfData.hash)
}

// uint64 range = 2;
inline void VrfData::clear_range() {
  _impl_.range_ = uint64_t{0u};
}
inline uint64_t VrfData::_internal_range() const {
  return _impl_.range_;
}
inline uint64_t VrfData::range() const {
  // @@protoc_insertion_point(field_get:VrfData.range)
  return _internal_range();
}
inline void VrfData::_internal_set_range(uint64_t value) {
  
  _impl_.range_ = value;
}
inline void VrfData::set_range(uint64_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:VrfData.range)
}

// uint64 percentage = 3;
inline void VrfData::clear_percentage() {
  _impl_.percentage_ = uint64_t{0u};
}
inline uint64_t VrfData::_internal_percentage() const {
  return _impl_.percentage_;
}
inline uint64_t VrfData::percentage() const {
  // @@protoc_insertion_point(field_get:VrfData.percentage)
  return _internal_percentage();
}
inline void VrfData::_internal_set_percentage(uint64_t value) {
  
  _impl_.percentage_ = value;
}
inline void VrfData::set_percentage(uint64_t value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:VrfData.percentage)
}

// uint64 height = 4;
inline void VrfData::clear_height() {
  _impl_.height_ = uint64_t{0u};
}
inline uint64_t VrfData::_internal_height() const {
  return _impl_.height_;
}
inline uint64_t VrfData::height() const {
  // @@protoc_insertion_point(field_get:VrfData.height)
  return _internal_height();
}
inline void VrfData::_internal_set_height(uint64_t value) {
  
  _impl_.height_ = value;
}
inline void VrfData::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:VrfData.height)
}

// string targetAddr = 5;
inline void VrfData::clear_targetaddr() {
  _impl_.targetaddr_.ClearToEmpty();
}
inline const std::string& VrfData::targetaddr() const {
  // @@protoc_insertion_point(field_get:VrfData.targetAddr)
  return _internal_targetaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VrfData::set_targetaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VrfData.targetAddr)
}
inline std::string* VrfData::mutable_targetaddr() {
  std::string* _s = _internal_mutable_targetaddr();
  // @@protoc_insertion_point(field_mutable:VrfData.targetAddr)
  return _s;
}
inline const std::string& VrfData::_internal_targetaddr() const {
  return _impl_.targetaddr_.Get();
}
inline void VrfData::_internal_set_targetaddr(const std::string& value) {
  
  _impl_.targetaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* VrfData::_internal_mutable_targetaddr() {
  
  return _impl_.targetaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* VrfData::release_targetaddr() {
  // @@protoc_insertion_point(field_release:VrfData.targetAddr)
  return _impl_.targetaddr_.Release();
}
inline void VrfData::set_allocated_targetaddr(std::string* targetaddr) {
  if (targetaddr != nullptr) {
    
  } else {
    
  }
  _impl_.targetaddr_.SetAllocated(targetaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetaddr_.IsDefault()) {
    _impl_.targetaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VrfData.targetAddr)
}

// repeated string vrfList = 6;
inline int VrfData::_internal_vrflist_size() const {
  return _impl_.vrflist_.size();
}
inline int VrfData::vrflist_size() const {
  return _internal_vrflist_size();
}
inline void VrfData::clear_vrflist() {
  _impl_.vrflist_.Clear();
}
inline std::string* VrfData::add_vrflist() {
  std::string* _s = _internal_add_vrflist();
  // @@protoc_insertion_point(field_add_mutable:VrfData.vrfList)
  return _s;
}
inline const std::string& VrfData::_internal_vrflist(int index) const {
  return _impl_.vrflist_.Get(index);
}
inline const std::string& VrfData::vrflist(int index) const {
  // @@protoc_insertion_point(field_get:VrfData.vrfList)
  return _internal_vrflist(index);
}
inline std::string* VrfData::mutable_vrflist(int index) {
  // @@protoc_insertion_point(field_mutable:VrfData.vrfList)
  return _impl_.vrflist_.Mutable(index);
}
inline void VrfData::set_vrflist(int index, const std::string& value) {
  _impl_.vrflist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:VrfData.vrfList)
}
inline void VrfData::set_vrflist(int index, std::string&& value) {
  _impl_.vrflist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:VrfData.vrfList)
}
inline void VrfData::set_vrflist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.vrflist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VrfData.vrfList)
}
inline void VrfData::set_vrflist(int index, const char* value, size_t size) {
  _impl_.vrflist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VrfData.vrfList)
}
inline std::string* VrfData::_internal_add_vrflist() {
  return _impl_.vrflist_.Add();
}
inline void VrfData::add_vrflist(const std::string& value) {
  _impl_.vrflist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VrfData.vrfList)
}
inline void VrfData::add_vrflist(std::string&& value) {
  _impl_.vrflist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VrfData.vrfList)
}
inline void VrfData::add_vrflist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.vrflist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VrfData.vrfList)
}
inline void VrfData::add_vrflist(const char* value, size_t size) {
  _impl_.vrflist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VrfData.vrfList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VrfData::vrflist() const {
  // @@protoc_insertion_point(field_list:VrfData.vrfList)
  return _impl_.vrflist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VrfData::mutable_vrflist() {
  // @@protoc_insertion_point(field_mutable_list:VrfData.vrfList)
  return &_impl_.vrflist_;
}

// string txvrfinfohash = 7;
inline void VrfData::clear_txvrfinfohash() {
  _impl_.txvrfinfohash_.ClearToEmpty();
}
inline const std::string& VrfData::txvrfinfohash() const {
  // @@protoc_insertion_point(field_get:VrfData.txvrfinfohash)
  return _internal_txvrfinfohash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VrfData::set_txvrfinfohash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.txvrfinfohash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VrfData.txvrfinfohash)
}
inline std::string* VrfData::mutable_txvrfinfohash() {
  std::string* _s = _internal_mutable_txvrfinfohash();
  // @@protoc_insertion_point(field_mutable:VrfData.txvrfinfohash)
  return _s;
}
inline const std::string& VrfData::_internal_txvrfinfohash() const {
  return _impl_.txvrfinfohash_.Get();
}
inline void VrfData::_internal_set_txvrfinfohash(const std::string& value) {
  
  _impl_.txvrfinfohash_.Set(value, GetArenaForAllocation());
}
inline std::string* VrfData::_internal_mutable_txvrfinfohash() {
  
  return _impl_.txvrfinfohash_.Mutable(GetArenaForAllocation());
}
inline std::string* VrfData::release_txvrfinfohash() {
  // @@protoc_insertion_point(field_release:VrfData.txvrfinfohash)
  return _impl_.txvrfinfohash_.Release();
}
inline void VrfData::set_allocated_txvrfinfohash(std::string* txvrfinfohash) {
  if (txvrfinfohash != nullptr) {
    
  } else {
    
  }
  _impl_.txvrfinfohash_.SetAllocated(txvrfinfohash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.txvrfinfohash_.IsDefault()) {
    _impl_.txvrfinfohash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VrfData.txvrfinfohash)
}

// -------------------------------------------------------------------

// Vrf

// .VrfData vrfdata = 1;
inline bool Vrf::_internal_has_vrfdata() const {
  return this != internal_default_instance() && _impl_.vrfdata_ != nullptr;
}
inline bool Vrf::has_vrfdata() const {
  return _internal_has_vrfdata();
}
inline void Vrf::clear_vrfdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfdata_ != nullptr) {
    delete _impl_.vrfdata_;
  }
  _impl_.vrfdata_ = nullptr;
}
inline const ::VrfData& Vrf::_internal_vrfdata() const {
  const ::VrfData* p = _impl_.vrfdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::VrfData&>(
      ::_VrfData_default_instance_);
}
inline const ::VrfData& Vrf::vrfdata() const {
  // @@protoc_insertion_point(field_get:Vrf.vrfdata)
  return _internal_vrfdata();
}
inline void Vrf::unsafe_arena_set_allocated_vrfdata(
    ::VrfData* vrfdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfdata_);
  }
  _impl_.vrfdata_ = vrfdata;
  if (vrfdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Vrf.vrfdata)
}
inline ::VrfData* Vrf::release_vrfdata() {
  
  ::VrfData* temp = _impl_.vrfdata_;
  _impl_.vrfdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VrfData* Vrf::unsafe_arena_release_vrfdata() {
  // @@protoc_insertion_point(field_release:Vrf.vrfdata)
  
  ::VrfData* temp = _impl_.vrfdata_;
  _impl_.vrfdata_ = nullptr;
  return temp;
}
inline ::VrfData* Vrf::_internal_mutable_vrfdata() {
  
  if (_impl_.vrfdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::VrfData>(GetArenaForAllocation());
    _impl_.vrfdata_ = p;
  }
  return _impl_.vrfdata_;
}
inline ::VrfData* Vrf::mutable_vrfdata() {
  ::VrfData* _msg = _internal_mutable_vrfdata();
  // @@protoc_insertion_point(field_mutable:Vrf.vrfdata)
  return _msg;
}
inline void Vrf::set_allocated_vrfdata(::VrfData* vrfdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vrfdata_;
  }
  if (vrfdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vrfdata);
    if (message_arena != submessage_arena) {
      vrfdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfdata_ = vrfdata;
  // @@protoc_insertion_point(field_set_allocated:Vrf.vrfdata)
}

// .CSign Vrfsign = 2;
inline bool Vrf::_internal_has_vrfsign() const {
  return this != internal_default_instance() && _impl_.vrfsign_ != nullptr;
}
inline bool Vrf::has_vrfsign() const {
  return _internal_has_vrfsign();
}
inline const ::CSign& Vrf::_internal_vrfsign() const {
  const ::CSign* p = _impl_.vrfsign_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSign&>(
      ::_CSign_default_instance_);
}
inline const ::CSign& Vrf::vrfsign() const {
  // @@protoc_insertion_point(field_get:Vrf.Vrfsign)
  return _internal_vrfsign();
}
inline void Vrf::unsafe_arena_set_allocated_vrfsign(
    ::CSign* vrfsign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfsign_);
  }
  _impl_.vrfsign_ = vrfsign;
  if (vrfsign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Vrf.Vrfsign)
}
inline ::CSign* Vrf::release_vrfsign() {
  
  ::CSign* temp = _impl_.vrfsign_;
  _impl_.vrfsign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSign* Vrf::unsafe_arena_release_vrfsign() {
  // @@protoc_insertion_point(field_release:Vrf.Vrfsign)
  
  ::CSign* temp = _impl_.vrfsign_;
  _impl_.vrfsign_ = nullptr;
  return temp;
}
inline ::CSign* Vrf::_internal_mutable_vrfsign() {
  
  if (_impl_.vrfsign_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSign>(GetArenaForAllocation());
    _impl_.vrfsign_ = p;
  }
  return _impl_.vrfsign_;
}
inline ::CSign* Vrf::mutable_vrfsign() {
  ::CSign* _msg = _internal_mutable_vrfsign();
  // @@protoc_insertion_point(field_mutable:Vrf.Vrfsign)
  return _msg;
}
inline void Vrf::set_allocated_vrfsign(::CSign* vrfsign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfsign_);
  }
  if (vrfsign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrfsign));
    if (message_arena != submessage_arena) {
      vrfsign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfsign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfsign_ = vrfsign;
  // @@protoc_insertion_point(field_set_allocated:Vrf.Vrfsign)
}

// -------------------------------------------------------------------

// TxMsgAck

// string version = 1;
inline void TxMsgAck::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& TxMsgAck::version() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMsgAck::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TxMsgAck.version)
}
inline std::string* TxMsgAck::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:TxMsgAck.version)
  return _s;
}
inline const std::string& TxMsgAck::_internal_version() const {
  return _impl_.version_.Get();
}
inline void TxMsgAck::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMsgAck::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMsgAck::release_version() {
  // @@protoc_insertion_point(field_release:TxMsgAck.version)
  return _impl_.version_.Release();
}
inline void TxMsgAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TxMsgAck.version)
}

// int32 code = 2;
inline void TxMsgAck::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t TxMsgAck::_internal_code() const {
  return _impl_.code_;
}
inline int32_t TxMsgAck::code() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.code)
  return _internal_code();
}
inline void TxMsgAck::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void TxMsgAck::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TxMsgAck.code)
}

// string message = 3;
inline void TxMsgAck::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TxMsgAck::message() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMsgAck::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TxMsgAck.message)
}
inline std::string* TxMsgAck::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:TxMsgAck.message)
  return _s;
}
inline const std::string& TxMsgAck::_internal_message() const {
  return _impl_.message_.Get();
}
inline void TxMsgAck::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMsgAck::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMsgAck::release_message() {
  // @@protoc_insertion_point(field_release:TxMsgAck.message)
  return _impl_.message_.Release();
}
inline void TxMsgAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TxMsgAck.message)
}

// bytes tx = 4;
inline void TxMsgAck::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& TxMsgAck::tx() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMsgAck::set_tx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TxMsgAck.tx)
}
inline std::string* TxMsgAck::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:TxMsgAck.tx)
  return _s;
}
inline const std::string& TxMsgAck::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void TxMsgAck::_internal_set_tx(const std::string& value) {
  
  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMsgAck::_internal_mutable_tx() {
  
  return _impl_.tx_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMsgAck::release_tx() {
  // @@protoc_insertion_point(field_release:TxMsgAck.tx)
  return _impl_.tx_.Release();
}
inline void TxMsgAck::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  _impl_.tx_.SetAllocated(tx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TxMsgAck.tx)
}

// -------------------------------------------------------------------

// BuildBlockBroadcastMsg

// string version = 1;
inline void BuildBlockBroadcastMsg::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& BuildBlockBroadcastMsg::version() const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildBlockBroadcastMsg::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.version)
}
inline std::string* BuildBlockBroadcastMsg::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.version)
  return _s;
}
inline const std::string& BuildBlockBroadcastMsg::_internal_version() const {
  return _impl_.version_.Get();
}
inline void BuildBlockBroadcastMsg::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildBlockBroadcastMsg::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildBlockBroadcastMsg::release_version() {
  // @@protoc_insertion_point(field_release:BuildBlockBroadcastMsg.version)
  return _impl_.version_.Release();
}
inline void BuildBlockBroadcastMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BuildBlockBroadcastMsg.version)
}

// string id = 2;
inline void BuildBlockBroadcastMsg::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BuildBlockBroadcastMsg::id() const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildBlockBroadcastMsg::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.id)
}
inline std::string* BuildBlockBroadcastMsg::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.id)
  return _s;
}
inline const std::string& BuildBlockBroadcastMsg::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BuildBlockBroadcastMsg::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildBlockBroadcastMsg::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildBlockBroadcastMsg::release_id() {
  // @@protoc_insertion_point(field_release:BuildBlockBroadcastMsg.id)
  return _impl_.id_.Release();
}
inline void BuildBlockBroadcastMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BuildBlockBroadcastMsg.id)
}

// bytes blockRaw = 3;
inline void BuildBlockBroadcastMsg::clear_blockraw() {
  _impl_.blockraw_.ClearToEmpty();
}
inline const std::string& BuildBlockBroadcastMsg::blockraw() const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.blockRaw)
  return _internal_blockraw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildBlockBroadcastMsg::set_blockraw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blockraw_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.blockRaw)
}
inline std::string* BuildBlockBroadcastMsg::mutable_blockraw() {
  std::string* _s = _internal_mutable_blockraw();
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.blockRaw)
  return _s;
}
inline const std::string& BuildBlockBroadcastMsg::_internal_blockraw() const {
  return _impl_.blockraw_.Get();
}
inline void BuildBlockBroadcastMsg::_internal_set_blockraw(const std::string& value) {
  
  _impl_.blockraw_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildBlockBroadcastMsg::_internal_mutable_blockraw() {
  
  return _impl_.blockraw_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildBlockBroadcastMsg::release_blockraw() {
  // @@protoc_insertion_point(field_release:BuildBlockBroadcastMsg.blockRaw)
  return _impl_.blockraw_.Release();
}
inline void BuildBlockBroadcastMsg::set_allocated_blockraw(std::string* blockraw) {
  if (blockraw != nullptr) {
    
  } else {
    
  }
  _impl_.blockraw_.SetAllocated(blockraw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blockraw_.IsDefault()) {
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BuildBlockBroadcastMsg.blockRaw)
}

// .Vrf blockVrfInfo = 4;
inline bool BuildBlockBroadcastMsg::_internal_has_blockvrfinfo() const {
  return this != internal_default_instance() && _impl_.blockvrfinfo_ != nullptr;
}
inline bool BuildBlockBroadcastMsg::has_blockvrfinfo() const {
  return _internal_has_blockvrfinfo();
}
inline void BuildBlockBroadcastMsg::clear_blockvrfinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockvrfinfo_ != nullptr) {
    delete _impl_.blockvrfinfo_;
  }
  _impl_.blockvrfinfo_ = nullptr;
}
inline const ::Vrf& BuildBlockBroadcastMsg::_internal_blockvrfinfo() const {
  const ::Vrf* p = _impl_.blockvrfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vrf&>(
      ::_Vrf_default_instance_);
}
inline const ::Vrf& BuildBlockBroadcastMsg::blockvrfinfo() const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.blockVrfInfo)
  return _internal_blockvrfinfo();
}
inline void BuildBlockBroadcastMsg::unsafe_arena_set_allocated_blockvrfinfo(
    ::Vrf* blockvrfinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockvrfinfo_);
  }
  _impl_.blockvrfinfo_ = blockvrfinfo;
  if (blockvrfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildBlockBroadcastMsg.blockVrfInfo)
}
inline ::Vrf* BuildBlockBroadcastMsg::release_blockvrfinfo() {
  
  ::Vrf* temp = _impl_.blockvrfinfo_;
  _impl_.blockvrfinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vrf* BuildBlockBroadcastMsg::unsafe_arena_release_blockvrfinfo() {
  // @@protoc_insertion_point(field_release:BuildBlockBroadcastMsg.blockVrfInfo)
  
  ::Vrf* temp = _impl_.blockvrfinfo_;
  _impl_.blockvrfinfo_ = nullptr;
  return temp;
}
inline ::Vrf* BuildBlockBroadcastMsg::_internal_mutable_blockvrfinfo() {
  
  if (_impl_.blockvrfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vrf>(GetArenaForAllocation());
    _impl_.blockvrfinfo_ = p;
  }
  return _impl_.blockvrfinfo_;
}
inline ::Vrf* BuildBlockBroadcastMsg::mutable_blockvrfinfo() {
  ::Vrf* _msg = _internal_mutable_blockvrfinfo();
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.blockVrfInfo)
  return _msg;
}
inline void BuildBlockBroadcastMsg::set_allocated_blockvrfinfo(::Vrf* blockvrfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blockvrfinfo_;
  }
  if (blockvrfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blockvrfinfo);
    if (message_arena != submessage_arena) {
      blockvrfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockvrfinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockvrfinfo_ = blockvrfinfo;
  // @@protoc_insertion_point(field_set_allocated:BuildBlockBroadcastMsg.blockVrfInfo)
}

// int32 flag = 5;
inline void BuildBlockBroadcastMsg::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t BuildBlockBroadcastMsg::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t BuildBlockBroadcastMsg::flag() const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.flag)
  return _internal_flag();
}
inline void BuildBlockBroadcastMsg::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void BuildBlockBroadcastMsg::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.flag)
}

// int32 type = 6;
inline void BuildBlockBroadcastMsg::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t BuildBlockBroadcastMsg::_internal_type() const {
  return _impl_.type_;
}
inline int32_t BuildBlockBroadcastMsg::type() const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.type)
  return _internal_type();
}
inline void BuildBlockBroadcastMsg::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void BuildBlockBroadcastMsg::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.type)
}

// repeated string castAddrs = 7;
inline int BuildBlockBroadcastMsg::_internal_castaddrs_size() const {
  return _impl_.castaddrs_.size();
}
inline int BuildBlockBroadcastMsg::castaddrs_size() const {
  return _internal_castaddrs_size();
}
inline void BuildBlockBroadcastMsg::clear_castaddrs() {
  _impl_.castaddrs_.Clear();
}
inline std::string* BuildBlockBroadcastMsg::add_castaddrs() {
  std::string* _s = _internal_add_castaddrs();
  // @@protoc_insertion_point(field_add_mutable:BuildBlockBroadcastMsg.castAddrs)
  return _s;
}
inline const std::string& BuildBlockBroadcastMsg::_internal_castaddrs(int index) const {
  return _impl_.castaddrs_.Get(index);
}
inline const std::string& BuildBlockBroadcastMsg::castaddrs(int index) const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.castAddrs)
  return _internal_castaddrs(index);
}
inline std::string* BuildBlockBroadcastMsg::mutable_castaddrs(int index) {
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.castAddrs)
  return _impl_.castaddrs_.Mutable(index);
}
inline void BuildBlockBroadcastMsg::set_castaddrs(int index, const std::string& value) {
  _impl_.castaddrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.castAddrs)
}
inline void BuildBlockBroadcastMsg::set_castaddrs(int index, std::string&& value) {
  _impl_.castaddrs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:BuildBlockBroadcastMsg.castAddrs)
}
inline void BuildBlockBroadcastMsg::set_castaddrs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.castaddrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BuildBlockBroadcastMsg.castAddrs)
}
inline void BuildBlockBroadcastMsg::set_castaddrs(int index, const char* value, size_t size) {
  _impl_.castaddrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BuildBlockBroadcastMsg.castAddrs)
}
inline std::string* BuildBlockBroadcastMsg::_internal_add_castaddrs() {
  return _impl_.castaddrs_.Add();
}
inline void BuildBlockBroadcastMsg::add_castaddrs(const std::string& value) {
  _impl_.castaddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BuildBlockBroadcastMsg.castAddrs)
}
inline void BuildBlockBroadcastMsg::add_castaddrs(std::string&& value) {
  _impl_.castaddrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BuildBlockBroadcastMsg.castAddrs)
}
inline void BuildBlockBroadcastMsg::add_castaddrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.castaddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BuildBlockBroadcastMsg.castAddrs)
}
inline void BuildBlockBroadcastMsg::add_castaddrs(const char* value, size_t size) {
  _impl_.castaddrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BuildBlockBroadcastMsg.castAddrs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BuildBlockBroadcastMsg::castaddrs() const {
  // @@protoc_insertion_point(field_list:BuildBlockBroadcastMsg.castAddrs)
  return _impl_.castaddrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BuildBlockBroadcastMsg::mutable_castaddrs() {
  // @@protoc_insertion_point(field_mutable_list:BuildBlockBroadcastMsg.castAddrs)
  return &_impl_.castaddrs_;
}

// repeated .Vrf vrfInfo = 8;
inline int BuildBlockBroadcastMsg::_internal_vrfinfo_size() const {
  return _impl_.vrfinfo_.size();
}
inline int BuildBlockBroadcastMsg::vrfinfo_size() const {
  return _internal_vrfinfo_size();
}
inline void BuildBlockBroadcastMsg::clear_vrfinfo() {
  _impl_.vrfinfo_.Clear();
}
inline ::Vrf* BuildBlockBroadcastMsg::mutable_vrfinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.vrfInfo)
  return _impl_.vrfinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
BuildBlockBroadcastMsg::mutable_vrfinfo() {
  // @@protoc_insertion_point(field_mutable_list:BuildBlockBroadcastMsg.vrfInfo)
  return &_impl_.vrfinfo_;
}
inline const ::Vrf& BuildBlockBroadcastMsg::_internal_vrfinfo(int index) const {
  return _impl_.vrfinfo_.Get(index);
}
inline const ::Vrf& BuildBlockBroadcastMsg::vrfinfo(int index) const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.vrfInfo)
  return _internal_vrfinfo(index);
}
inline ::Vrf* BuildBlockBroadcastMsg::_internal_add_vrfinfo() {
  return _impl_.vrfinfo_.Add();
}
inline ::Vrf* BuildBlockBroadcastMsg::add_vrfinfo() {
  ::Vrf* _add = _internal_add_vrfinfo();
  // @@protoc_insertion_point(field_add:BuildBlockBroadcastMsg.vrfInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
BuildBlockBroadcastMsg::vrfinfo() const {
  // @@protoc_insertion_point(field_list:BuildBlockBroadcastMsg.vrfInfo)
  return _impl_.vrfinfo_;
}

// repeated .Vrf txvrfInfo = 9;
inline int BuildBlockBroadcastMsg::_internal_txvrfinfo_size() const {
  return _impl_.txvrfinfo_.size();
}
inline int BuildBlockBroadcastMsg::txvrfinfo_size() const {
  return _internal_txvrfinfo_size();
}
inline void BuildBlockBroadcastMsg::clear_txvrfinfo() {
  _impl_.txvrfinfo_.Clear();
}
inline ::Vrf* BuildBlockBroadcastMsg::mutable_txvrfinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BuildBlockBroadcastMsg.txvrfInfo)
  return _impl_.txvrfinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
BuildBlockBroadcastMsg::mutable_txvrfinfo() {
  // @@protoc_insertion_point(field_mutable_list:BuildBlockBroadcastMsg.txvrfInfo)
  return &_impl_.txvrfinfo_;
}
inline const ::Vrf& BuildBlockBroadcastMsg::_internal_txvrfinfo(int index) const {
  return _impl_.txvrfinfo_.Get(index);
}
inline const ::Vrf& BuildBlockBroadcastMsg::txvrfinfo(int index) const {
  // @@protoc_insertion_point(field_get:BuildBlockBroadcastMsg.txvrfInfo)
  return _internal_txvrfinfo(index);
}
inline ::Vrf* BuildBlockBroadcastMsg::_internal_add_txvrfinfo() {
  return _impl_.txvrfinfo_.Add();
}
inline ::Vrf* BuildBlockBroadcastMsg::add_txvrfinfo() {
  ::Vrf* _add = _internal_add_txvrfinfo();
  // @@protoc_insertion_point(field_add:BuildBlockBroadcastMsg.txvrfInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
BuildBlockBroadcastMsg::txvrfinfo() const {
  // @@protoc_insertion_point(field_list:BuildBlockBroadcastMsg.txvrfInfo)
  return _impl_.txvrfinfo_;
}

// -------------------------------------------------------------------

// ContractTxMsgReq

// string version = 1;
inline void ContractTxMsgReq::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ContractTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:ContractTxMsgReq.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractTxMsgReq::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContractTxMsgReq.version)
}
inline std::string* ContractTxMsgReq::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ContractTxMsgReq.version)
  return _s;
}
inline const std::string& ContractTxMsgReq::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ContractTxMsgReq::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractTxMsgReq::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:ContractTxMsgReq.version)
  return _impl_.version_.Release();
}
inline void ContractTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContractTxMsgReq.version)
}

// .TxMsgReq txMsgReq = 2;
inline bool ContractTxMsgReq::_internal_has_txmsgreq() const {
  return this != internal_default_instance() && _impl_.txmsgreq_ != nullptr;
}
inline bool ContractTxMsgReq::has_txmsgreq() const {
  return _internal_has_txmsgreq();
}
inline void ContractTxMsgReq::clear_txmsgreq() {
  if (GetArenaForAllocation() == nullptr && _impl_.txmsgreq_ != nullptr) {
    delete _impl_.txmsgreq_;
  }
  _impl_.txmsgreq_ = nullptr;
}
inline const ::TxMsgReq& ContractTxMsgReq::_internal_txmsgreq() const {
  const ::TxMsgReq* p = _impl_.txmsgreq_;
  return p != nullptr ? *p : reinterpret_cast<const ::TxMsgReq&>(
      ::_TxMsgReq_default_instance_);
}
inline const ::TxMsgReq& ContractTxMsgReq::txmsgreq() const {
  // @@protoc_insertion_point(field_get:ContractTxMsgReq.txMsgReq)
  return _internal_txmsgreq();
}
inline void ContractTxMsgReq::unsafe_arena_set_allocated_txmsgreq(
    ::TxMsgReq* txmsgreq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.txmsgreq_);
  }
  _impl_.txmsgreq_ = txmsgreq;
  if (txmsgreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ContractTxMsgReq.txMsgReq)
}
inline ::TxMsgReq* ContractTxMsgReq::release_txmsgreq() {
  
  ::TxMsgReq* temp = _impl_.txmsgreq_;
  _impl_.txmsgreq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TxMsgReq* ContractTxMsgReq::unsafe_arena_release_txmsgreq() {
  // @@protoc_insertion_point(field_release:ContractTxMsgReq.txMsgReq)
  
  ::TxMsgReq* temp = _impl_.txmsgreq_;
  _impl_.txmsgreq_ = nullptr;
  return temp;
}
inline ::TxMsgReq* ContractTxMsgReq::_internal_mutable_txmsgreq() {
  
  if (_impl_.txmsgreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::TxMsgReq>(GetArenaForAllocation());
    _impl_.txmsgreq_ = p;
  }
  return _impl_.txmsgreq_;
}
inline ::TxMsgReq* ContractTxMsgReq::mutable_txmsgreq() {
  ::TxMsgReq* _msg = _internal_mutable_txmsgreq();
  // @@protoc_insertion_point(field_mutable:ContractTxMsgReq.txMsgReq)
  return _msg;
}
inline void ContractTxMsgReq::set_allocated_txmsgreq(::TxMsgReq* txmsgreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.txmsgreq_;
  }
  if (txmsgreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(txmsgreq);
    if (message_arena != submessage_arena) {
      txmsgreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txmsgreq, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.txmsgreq_ = txmsgreq;
  // @@protoc_insertion_point(field_set_allocated:ContractTxMsgReq.txMsgReq)
}

// repeated string contractDependentAddress = 3;
inline int ContractTxMsgReq::_internal_contractdependentaddress_size() const {
  return _impl_.contractdependentaddress_.size();
}
inline int ContractTxMsgReq::contractdependentaddress_size() const {
  return _internal_contractdependentaddress_size();
}
inline void ContractTxMsgReq::clear_contractdependentaddress() {
  _impl_.contractdependentaddress_.Clear();
}
inline std::string* ContractTxMsgReq::add_contractdependentaddress() {
  std::string* _s = _internal_add_contractdependentaddress();
  // @@protoc_insertion_point(field_add_mutable:ContractTxMsgReq.contractDependentAddress)
  return _s;
}
inline const std::string& ContractTxMsgReq::_internal_contractdependentaddress(int index) const {
  return _impl_.contractdependentaddress_.Get(index);
}
inline const std::string& ContractTxMsgReq::contractdependentaddress(int index) const {
  // @@protoc_insertion_point(field_get:ContractTxMsgReq.contractDependentAddress)
  return _internal_contractdependentaddress(index);
}
inline std::string* ContractTxMsgReq::mutable_contractdependentaddress(int index) {
  // @@protoc_insertion_point(field_mutable:ContractTxMsgReq.contractDependentAddress)
  return _impl_.contractdependentaddress_.Mutable(index);
}
inline void ContractTxMsgReq::set_contractdependentaddress(int index, const std::string& value) {
  _impl_.contractdependentaddress_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ContractTxMsgReq.contractDependentAddress)
}
inline void ContractTxMsgReq::set_contractdependentaddress(int index, std::string&& value) {
  _impl_.contractdependentaddress_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ContractTxMsgReq.contractDependentAddress)
}
inline void ContractTxMsgReq::set_contractdependentaddress(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.contractdependentaddress_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractTxMsgReq.contractDependentAddress)
}
inline void ContractTxMsgReq::set_contractdependentaddress(int index, const char* value, size_t size) {
  _impl_.contractdependentaddress_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractTxMsgReq.contractDependentAddress)
}
inline std::string* ContractTxMsgReq::_internal_add_contractdependentaddress() {
  return _impl_.contractdependentaddress_.Add();
}
inline void ContractTxMsgReq::add_contractdependentaddress(const std::string& value) {
  _impl_.contractdependentaddress_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContractTxMsgReq.contractDependentAddress)
}
inline void ContractTxMsgReq::add_contractdependentaddress(std::string&& value) {
  _impl_.contractdependentaddress_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ContractTxMsgReq.contractDependentAddress)
}
inline void ContractTxMsgReq::add_contractdependentaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.contractdependentaddress_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContractTxMsgReq.contractDependentAddress)
}
inline void ContractTxMsgReq::add_contractdependentaddress(const char* value, size_t size) {
  _impl_.contractdependentaddress_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContractTxMsgReq.contractDependentAddress)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContractTxMsgReq::contractdependentaddress() const {
  // @@protoc_insertion_point(field_list:ContractTxMsgReq.contractDependentAddress)
  return _impl_.contractdependentaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContractTxMsgReq::mutable_contractdependentaddress() {
  // @@protoc_insertion_point(field_mutable_list:ContractTxMsgReq.contractDependentAddress)
  return &_impl_.contractdependentaddress_;
}

// -------------------------------------------------------------------

// VrfDataSource

// repeated string vrfNodelist = 1;
inline int VrfDataSource::_internal_vrfnodelist_size() const {
  return _impl_.vrfnodelist_.size();
}
inline int VrfDataSource::vrfnodelist_size() const {
  return _internal_vrfnodelist_size();
}
inline void VrfDataSource::clear_vrfnodelist() {
  _impl_.vrfnodelist_.Clear();
}
inline std::string* VrfDataSource::add_vrfnodelist() {
  std::string* _s = _internal_add_vrfnodelist();
  // @@protoc_insertion_point(field_add_mutable:VrfDataSource.vrfNodelist)
  return _s;
}
inline const std::string& VrfDataSource::_internal_vrfnodelist(int index) const {
  return _impl_.vrfnodelist_.Get(index);
}
inline const std::string& VrfDataSource::vrfnodelist(int index) const {
  // @@protoc_insertion_point(field_get:VrfDataSource.vrfNodelist)
  return _internal_vrfnodelist(index);
}
inline std::string* VrfDataSource::mutable_vrfnodelist(int index) {
  // @@protoc_insertion_point(field_mutable:VrfDataSource.vrfNodelist)
  return _impl_.vrfnodelist_.Mutable(index);
}
inline void VrfDataSource::set_vrfnodelist(int index, const std::string& value) {
  _impl_.vrfnodelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:VrfDataSource.vrfNodelist)
}
inline void VrfDataSource::set_vrfnodelist(int index, std::string&& value) {
  _impl_.vrfnodelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:VrfDataSource.vrfNodelist)
}
inline void VrfDataSource::set_vrfnodelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.vrfnodelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VrfDataSource.vrfNodelist)
}
inline void VrfDataSource::set_vrfnodelist(int index, const char* value, size_t size) {
  _impl_.vrfnodelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VrfDataSource.vrfNodelist)
}
inline std::string* VrfDataSource::_internal_add_vrfnodelist() {
  return _impl_.vrfnodelist_.Add();
}
inline void VrfDataSource::add_vrfnodelist(const std::string& value) {
  _impl_.vrfnodelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VrfDataSource.vrfNodelist)
}
inline void VrfDataSource::add_vrfnodelist(std::string&& value) {
  _impl_.vrfnodelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VrfDataSource.vrfNodelist)
}
inline void VrfDataSource::add_vrfnodelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.vrfnodelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VrfDataSource.vrfNodelist)
}
inline void VrfDataSource::add_vrfnodelist(const char* value, size_t size) {
  _impl_.vrfnodelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VrfDataSource.vrfNodelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VrfDataSource::vrfnodelist() const {
  // @@protoc_insertion_point(field_list:VrfDataSource.vrfNodelist)
  return _impl_.vrfnodelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VrfDataSource::mutable_vrfnodelist() {
  // @@protoc_insertion_point(field_mutable_list:VrfDataSource.vrfNodelist)
  return &_impl_.vrfnodelist_;
}

// -------------------------------------------------------------------

// ContractPackagerMsg

// string version = 1;
inline void ContractPackagerMsg::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ContractPackagerMsg::version() const {
  // @@protoc_insertion_point(field_get:ContractPackagerMsg.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractPackagerMsg::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContractPackagerMsg.version)
}
inline std::string* ContractPackagerMsg::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ContractPackagerMsg.version)
  return _s;
}
inline const std::string& ContractPackagerMsg::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ContractPackagerMsg::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractPackagerMsg::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractPackagerMsg::release_version() {
  // @@protoc_insertion_point(field_release:ContractPackagerMsg.version)
  return _impl_.version_.Release();
}
inline void ContractPackagerMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContractPackagerMsg.version)
}

// .CSign sign = 2;
inline bool ContractPackagerMsg::_internal_has_sign() const {
  return this != internal_default_instance() && _impl_.sign_ != nullptr;
}
inline bool ContractPackagerMsg::has_sign() const {
  return _internal_has_sign();
}
inline const ::CSign& ContractPackagerMsg::_internal_sign() const {
  const ::CSign* p = _impl_.sign_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSign&>(
      ::_CSign_default_instance_);
}
inline const ::CSign& ContractPackagerMsg::sign() const {
  // @@protoc_insertion_point(field_get:ContractPackagerMsg.sign)
  return _internal_sign();
}
inline void ContractPackagerMsg::unsafe_arena_set_allocated_sign(
    ::CSign* sign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sign_);
  }
  _impl_.sign_ = sign;
  if (sign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ContractPackagerMsg.sign)
}
inline ::CSign* ContractPackagerMsg::release_sign() {
  
  ::CSign* temp = _impl_.sign_;
  _impl_.sign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSign* ContractPackagerMsg::unsafe_arena_release_sign() {
  // @@protoc_insertion_point(field_release:ContractPackagerMsg.sign)
  
  ::CSign* temp = _impl_.sign_;
  _impl_.sign_ = nullptr;
  return temp;
}
inline ::CSign* ContractPackagerMsg::_internal_mutable_sign() {
  
  if (_impl_.sign_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSign>(GetArenaForAllocation());
    _impl_.sign_ = p;
  }
  return _impl_.sign_;
}
inline ::CSign* ContractPackagerMsg::mutable_sign() {
  ::CSign* _msg = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:ContractPackagerMsg.sign)
  return _msg;
}
inline void ContractPackagerMsg::set_allocated_sign(::CSign* sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sign_);
  }
  if (sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sign));
    if (message_arena != submessage_arena) {
      sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sign_ = sign;
  // @@protoc_insertion_point(field_set_allocated:ContractPackagerMsg.sign)
}

// repeated .TxMsgReq txMsgReq = 3;
inline int ContractPackagerMsg::_internal_txmsgreq_size() const {
  return _impl_.txmsgreq_.size();
}
inline int ContractPackagerMsg::txmsgreq_size() const {
  return _internal_txmsgreq_size();
}
inline void ContractPackagerMsg::clear_txmsgreq() {
  _impl_.txmsgreq_.Clear();
}
inline ::TxMsgReq* ContractPackagerMsg::mutable_txmsgreq(int index) {
  // @@protoc_insertion_point(field_mutable:ContractPackagerMsg.txMsgReq)
  return _impl_.txmsgreq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxMsgReq >*
ContractPackagerMsg::mutable_txmsgreq() {
  // @@protoc_insertion_point(field_mutable_list:ContractPackagerMsg.txMsgReq)
  return &_impl_.txmsgreq_;
}
inline const ::TxMsgReq& ContractPackagerMsg::_internal_txmsgreq(int index) const {
  return _impl_.txmsgreq_.Get(index);
}
inline const ::TxMsgReq& ContractPackagerMsg::txmsgreq(int index) const {
  // @@protoc_insertion_point(field_get:ContractPackagerMsg.txMsgReq)
  return _internal_txmsgreq(index);
}
inline ::TxMsgReq* ContractPackagerMsg::_internal_add_txmsgreq() {
  return _impl_.txmsgreq_.Add();
}
inline ::TxMsgReq* ContractPackagerMsg::add_txmsgreq() {
  ::TxMsgReq* _add = _internal_add_txmsgreq();
  // @@protoc_insertion_point(field_add:ContractPackagerMsg.txMsgReq)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxMsgReq >&
ContractPackagerMsg::txmsgreq() const {
  // @@protoc_insertion_point(field_list:ContractPackagerMsg.txMsgReq)
  return _impl_.txmsgreq_;
}

// .Vrf vrfInfo = 4;
inline bool ContractPackagerMsg::_internal_has_vrfinfo() const {
  return this != internal_default_instance() && _impl_.vrfinfo_ != nullptr;
}
inline bool ContractPackagerMsg::has_vrfinfo() const {
  return _internal_has_vrfinfo();
}
inline void ContractPackagerMsg::clear_vrfinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
}
inline const ::Vrf& ContractPackagerMsg::_internal_vrfinfo() const {
  const ::Vrf* p = _impl_.vrfinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vrf&>(
      ::_Vrf_default_instance_);
}
inline const ::Vrf& ContractPackagerMsg::vrfinfo() const {
  // @@protoc_insertion_point(field_get:ContractPackagerMsg.vrfInfo)
  return _internal_vrfinfo();
}
inline void ContractPackagerMsg::unsafe_arena_set_allocated_vrfinfo(
    ::Vrf* vrfinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfinfo_);
  }
  _impl_.vrfinfo_ = vrfinfo;
  if (vrfinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ContractPackagerMsg.vrfInfo)
}
inline ::Vrf* ContractPackagerMsg::release_vrfinfo() {
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vrf* ContractPackagerMsg::unsafe_arena_release_vrfinfo() {
  // @@protoc_insertion_point(field_release:ContractPackagerMsg.vrfInfo)
  
  ::Vrf* temp = _impl_.vrfinfo_;
  _impl_.vrfinfo_ = nullptr;
  return temp;
}
inline ::Vrf* ContractPackagerMsg::_internal_mutable_vrfinfo() {
  
  if (_impl_.vrfinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vrf>(GetArenaForAllocation());
    _impl_.vrfinfo_ = p;
  }
  return _impl_.vrfinfo_;
}
inline ::Vrf* ContractPackagerMsg::mutable_vrfinfo() {
  ::Vrf* _msg = _internal_mutable_vrfinfo();
  // @@protoc_insertion_point(field_mutable:ContractPackagerMsg.vrfInfo)
  return _msg;
}
inline void ContractPackagerMsg::set_allocated_vrfinfo(::Vrf* vrfinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vrfinfo_;
  }
  if (vrfinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vrfinfo);
    if (message_arena != submessage_arena) {
      vrfinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfinfo_ = vrfinfo;
  // @@protoc_insertion_point(field_set_allocated:ContractPackagerMsg.vrfInfo)
}

// .VrfDataSource vrfDataSource = 5;
inline bool ContractPackagerMsg::_internal_has_vrfdatasource() const {
  return this != internal_default_instance() && _impl_.vrfdatasource_ != nullptr;
}
inline bool ContractPackagerMsg::has_vrfdatasource() const {
  return _internal_has_vrfdatasource();
}
inline void ContractPackagerMsg::clear_vrfdatasource() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfdatasource_ != nullptr) {
    delete _impl_.vrfdatasource_;
  }
  _impl_.vrfdatasource_ = nullptr;
}
inline const ::VrfDataSource& ContractPackagerMsg::_internal_vrfdatasource() const {
  const ::VrfDataSource* p = _impl_.vrfdatasource_;
  return p != nullptr ? *p : reinterpret_cast<const ::VrfDataSource&>(
      ::_VrfDataSource_default_instance_);
}
inline const ::VrfDataSource& ContractPackagerMsg::vrfdatasource() const {
  // @@protoc_insertion_point(field_get:ContractPackagerMsg.vrfDataSource)
  return _internal_vrfdatasource();
}
inline void ContractPackagerMsg::unsafe_arena_set_allocated_vrfdatasource(
    ::VrfDataSource* vrfdatasource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vrfdatasource_);
  }
  _impl_.vrfdatasource_ = vrfdatasource;
  if (vrfdatasource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ContractPackagerMsg.vrfDataSource)
}
inline ::VrfDataSource* ContractPackagerMsg::release_vrfdatasource() {
  
  ::VrfDataSource* temp = _impl_.vrfdatasource_;
  _impl_.vrfdatasource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VrfDataSource* ContractPackagerMsg::unsafe_arena_release_vrfdatasource() {
  // @@protoc_insertion_point(field_release:ContractPackagerMsg.vrfDataSource)
  
  ::VrfDataSource* temp = _impl_.vrfdatasource_;
  _impl_.vrfdatasource_ = nullptr;
  return temp;
}
inline ::VrfDataSource* ContractPackagerMsg::_internal_mutable_vrfdatasource() {
  
  if (_impl_.vrfdatasource_ == nullptr) {
    auto* p = CreateMaybeMessage<::VrfDataSource>(GetArenaForAllocation());
    _impl_.vrfdatasource_ = p;
  }
  return _impl_.vrfdatasource_;
}
inline ::VrfDataSource* ContractPackagerMsg::mutable_vrfdatasource() {
  ::VrfDataSource* _msg = _internal_mutable_vrfdatasource();
  // @@protoc_insertion_point(field_mutable:ContractPackagerMsg.vrfDataSource)
  return _msg;
}
inline void ContractPackagerMsg::set_allocated_vrfdatasource(::VrfDataSource* vrfdatasource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vrfdatasource_;
  }
  if (vrfdatasource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vrfdatasource);
    if (message_arena != submessage_arena) {
      vrfdatasource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrfdatasource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vrfdatasource_ = vrfdatasource;
  // @@protoc_insertion_point(field_set_allocated:ContractPackagerMsg.vrfDataSource)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ca_5fprotomsg_2eproto
